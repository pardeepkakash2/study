Course Outline

Embedded Linux Development

    Introduction
    Embedded and Real-Time Systems Concepts
    Cross-Development Environments: Goals and Needs
    Cross-Development Toolchain
    Setting Up a Target Development Board
    KBuild System
    Boot loaders and U-Boot
    Kernel Configuration, Compilation, Booting
    Device Drivers**
    Device Trees**
    Target Filesystem Packaging
    Build Target Root Filesystem
    Root Filesystem Choices
    Configuring uClibc
    Build BusyBox Utility Suite
    Kernel Monitoring and Debugging
    Right-Sizing
    Memory Technology Devices**
    Compressed Filesystems
    System Upgrades
    Real-Time Extensions

Developing Applications For Linux

    Introduction
    Preliminaries
    Compilers
    Libraries
    Make
    Source Control
    Debugging and Core Dumps
    Debugging Tools
    System Calls
    Memory Management and Allocation
    Files and Filesystems in Linux
    File I/O
    Advanced File Operations
    Processes - I
    Processes - II
    Pipes and Fifos
    Asynchronous I/O**
    Signals - I
    Signals - II
    POSIX Threads - I
    POSIX Threads - II
    Networking and Sockets
    Sockets - Addresses and Hosts
    Sockets - Ports and Protocols
    Sockets - Clients
    Sockets - Servers
    Sockets - Input/Output Operations
    Sockets - Options
    Netlink Sockets
    Sockets - Multiplexing and Concurrent Servers
    Inter Process Communication
    Shared Memory
    Semaphores
    Message Queues

Linux Kernel Internals and Development

    Introduction
        Objectives
        Who You Are
        The Linux Foundation
        Linux Foundation Training
        Course Registration
    Preliminaries
        Procedures
        Things change in Linux
        Linux Distributions
        Kernel Versions
        Kernel Sources and Use of git
        Platforms
        Documentation and Links
    Kernel Architecture I
        UNIX and Linux **
        Monolithic and Micro Kernels
        Object-Oriented Methods
        Main Kernel Tasks
        User-Space and Kernel-Space
        Kernel Mode Linux **
    Kernel Programming Preview
        Error Numbers and Getting Kernel Output
        Task Structure
        Memory Allocation
        Transferring Data between User and Kernel Spaces
        Linked Lists
        String to Number Conversions
        Jiffies
        Labs
    Modules
        What are Modules?
        A Trivial Example
        Compiling Modules
        Modules vs Built-in
        Module Utilities
        Automatic Loading/Unloading of Modules
        Module Usage Count
        The module struct
        Module Licensing
        Exporting Symbols
        Resolving Symbols **
        Labs
    Kernel Architecture II
        Processes, Threads, and Tasks
        Process Context
        Kernel Preemption
        Real Time Preemption Patch
        Dynamic Kernel Patching
        Run-time Alternatives **
        Porting to a New Platform **
    Kernel Initialization
        Overview of System Initialization
        System Boot
        Das U-Boot for Embedded Systems**
    Kernel Configuration and Compilation
        Installation and Layout of the Kernel Source
        Kernel Browsers
        Kernel Configuration Files
        Kernel Building and Makefiles
        initrd and initramfs
        Labs
    System Calls
        What are System Calls?
        Available System Calls
        How System Calls are Implemented
        Adding a New System Call
        Replacing System Calls from Modules
        Labs
    Kernel Style and General Considerations
        Coding Style
        kernel-doc **
        Using Generic Kernel Routines and Methods
        Making a Kernel Patch
        sparse
        Using likely() and unlikely()
        Writing Portable Code, CPU, 32/64-bit, Endianness
        Writing for SMP
        Writing for High Memory Systems
        Power Management
        Keeping Security in Mind
        Mixing User- and Kernel-Space Headers **
        Labs
    Race Conditions and Synchronization Methods
        Concurrency and Synchronization Methods
        Atomic Operations
        Bit Operations
        Spinlocks
        Seqlocks
        Disabling Preemption
        Mutexes
        Semaphores
        Completion Functions
        Read-Copy-Update (RCU)
        Reference Counts
        Labs
    SMP and Threads
        SMP Kernels and Modules
        Processor Affinity
        CPUSETS
        SMP Algorithms - Scheduling, Locking, etc.
        Per-CPU Variables **
        Labs
    Processes
        What are Processes?
        The task_struct
        Creating User Processes and Threads
        Creating Kernel Threads
        Destroying Processes and Threads
        Executing User-Space Processes From Within the Kernel
        Labs
    Process Limits and Capabilities **
        Process Limits
        Capabilities
        Labs
    Monitoring and Debugging
        Debuginfo Packages
        Tracing and Profiling
        sysctl
        SysRq Key
        oops Messages
        Kernel Debuggers
        debugfs
        Labs
    Scheduling Basics
        Main Scheduling Tasks
        SMP
        Scheduling Priorities
        Scheduling System Calls
        The 2.4 schedule() Function
        O(1) Scheduler
        Time Slices and Priorities
        Load Balancing
        Priority Inversion and Priority Inheritance **
        Labs
    Completely Fair Scheduler (CFS)
        The CFS Scheduler
        Calculating Priorities and Fair Times
        Scheduling Classes
        CFS Scheduler Details
        Labs
    Memory Addressing
        Virtual Memory Management
        Systems With no MMU
        Memory Addresses
        High and Low Memory
        Memory Zones
        Special Device Nodes
        NUMA
        Paging
        Page Tables
        page structure
        Kernel Samepage Merging (KSM) **
        Labs
    Huge Pages
        Huge Page Support
        libhugetlbfs
        Transparent Huge Pages
        Labs
    Memory Allocation
        Requesting and Releasing Pages
        Buddy System
        Slabs and Cache Allocations
        Memory Pools
        kmalloc()
        vmalloc()
        Early Allocations and bootmem()
        Memory Defragmentation
        Labs
    Process Address Space
        Allocating User Memory and Address Spaces
        Locking Pages
        Memory Descriptors and Regions
        Access Rights
        Allocating and Freeing Memory Regions
        Page Faults
        Labs
    Disk Caches and Swapping
        Caches
        Page Cache Basics
        What is Swapping?
        Swap Areas
        Swapping Pages In and Out
        Controlling Swappiness
        The Swap Cache
        Reverse Mapping **
        OOM Killer
        Labs
    Device Drivers**
        Types of Devices
        Device Nodes
        Character Drivers
        An Example
        Labs
    Signals
        What are Signals?
        Available Signals
        System Calls for Signals
        Sigaction
        Signals and Threads
        How the Kernel Installs Signal Handlers
        How the Kernel Sends Signals
        How the Kernel Invokes Signal Handlers
        Real Time Signals 

Developing Linux Device Drivers

    Introduction
    Preliminaries
    Device Drivers
    Modules and Device Drivers
    Memory Management and Allocation
    Character Devices
    Kernel Features
    Transferring Between User and Kernel Space
    Interrupts and Exceptions
    Timing Measurements
    Kernel Timers
    ioctls
    Unified Device Model and sysfs
    Firmware
    Sleeping and Wait Queues
    Interrupt Handling: Deferrable Functions and User Drivers
    Hardware I/O
    PCI
    Platform Drivers**
    Device Trees**
    Direct Memory Access (DMA)
    Network Drivers I: Basics
    Network Drivers II: Data Structures
    Network Drivers III: Transmission and Reception
    Network Drivers IV: Selected Topics
    USB Drivers
    Power Management
    Block Drivers

Developing Embedded Linux Device Drivers

    Preliminaries
    Cross-Development Toolchain
    Basic Target Development Board Setup
    Booting a Target Development Board over Ethernet
    Kernel Configuration, Compilation, Booting
    Device Drivers
    Modules and Device Drivers
    Memory Management and Allocation
    Character Devices
    Kernel Features
    Transferring Between User and Kernel Space
    Platform Drivers
    Device Trees
    Interrupts and Exceptions
    Timing Measurements
    Kernel Timers
    ioctls
    Unified Device Model and sysfs
    Firmware
    Sleeping and Wait Queues
    Interrupt Handling: Deferrable Functions and User Drivers
    Direct Memory Access (DMA)
    Memory Technology Devices
    USB Drivers


ptimizing Linux Device Drivers for Power Efficiency
	Introduction
	Procedures and Documentation
	Power Management Overview
	The Linux Kernel View of Power Management
	Power Management in Android
	Notifiers**
	CPU Frequency Scaling**
	CPU Idle
	Ftrace
	Perf
	Measuring Power Usage and Latencies
	Debugging power usage
	Crash
	Kernel Core Dumps
	System-wide Power Management
	Runtime Power Management
	Common clock framework **
	Regulator framework **
	Retrofit for PM
	Optimize for PM 

Linux Kernel Debugging and Security

    Introduction
    Preliminaries
    Kernel Features
    Monitoring and Debugging
    The proc Filesystem **
    kprobes
    Ftrace
    Perf
    Crash
    Kernel Core Dumps
    Virtualization**
    QEMU
    Linux Kernel Debugging Tools
    Embedded Linux**
    Notifiers**
    CPU Frequency Scaling**
    Netlink Sockets**
    Introduction to Linux Kernel Security
    Linux Security Modules (LSM)
    SELinux
    AppArmor
    Netfilter
    The Virtual File System
    Flash Memory Filesystems
    Filesystems in User-Space (FUSE)**
    Journaling Filesystems**

Linux Networking and Administration

    Session 1: Introduction
    Session 2: Linux Networking - Concepts and Review
    Session 3: Network Configuration
    Session 4: Network Troubleshooting and Monitoring
    Session 5: Remote Access
    Session 6: Domain Name Service
    Session 7: HTTP Servers
    Session 8: Advanced HTTP Servers
    Session 9: Email Servers
    Session 10: File Sharing
    Session 11: Advanced Networking
    Session 12: HTTP Caching
    Session 13: Network File Systems
    Session 14: Introduction to Network Security
    Session 15: Firewalls
    Session 16: Virtualization Overview
    Session 17: High Availability
    Session 18: System Log
    Session 19: Package Management

Advanced Linux System Administration and Networking

    Introduction
        Linux Foundation
        Linux Foundation Training
        Laboratory Exercises
        Distribution Details
        Obtaining Class Solutions and Resources
        Registration
    Linux Networking Concepts and Review
        OSI Model Introduction and Upper Layers
        OSI Model Transport Layer
        OSI Model Network Layer
        OSI Model Lower Layers
        Network Topology
        Domain Name System
        System Services
        Managing System Services
    Network Configuration
        Runtime Network Configuration
        Boot Time Network Configuration
        Intro to OpenVPN
    Network Troubleshooting and Monitoring
        Network Troubleshooting
        Client-Side Troubleshooting
        Server-Side Troubleshooting
        Network Monitoring
    Remote Access
        Remote Access History
        Intro to Cryptography
        Secure Remote Access
        Remote Graphics
    Domain Name Service
        Overview Of DNS
        BIND (named) Server
        BIND Zone Configuration
    HTTP Servers
        Apache
        Apache Configuration
        Apache Virtual Hosts
        Apache Security
    Advanced HTTP Servers
        Mod Rewrite
        Mod Alias
        Mod Status
        Mod Include
        Mod Perl
        Performance Considerations
    Email Servers
        Email Overview
        Postfix
        Dovecot
    File Sharing
        FTP
        vsftpd
        rsync
        SSH Based Protocols
        Other Protocols
    Advanced Networking
        Routing
        VLANs
        DHCP
        NTP
    HTTP Caching
        Overview
        Squid Configuration
    Network File Systems
        NFS
        SMB/CIFS
        Other Network File Systems
    Introduction to Network Security
        Security Concepts
        Security Practices
        Security Tools
    Firewalls
        TCP Wrappers
        netfilter Concepts
        Iptables Command
        Managing IPtables
        Advanced Firewalls
    Virtualization Overview
        Virtualization History
        libvirt
        Docker Example
    High Availability
        Overview
        DRDB
    System log
        Overview
    Package Management
        Installing from Source
        Package Management
        Packaging System Benefits
        Main Package Management Systems
        Role of Linux Distributions
        Building RPM Packages
        RPM Spec File Sections
        RPM Spec File Example
        Building Debian Packages

