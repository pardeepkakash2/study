Process management and process scheduling:-

1) how to manipulate the current process.
2) what are kernel thread.
3) how threads are implemented in linux kernel.
4) What are different state of a process in lunix.
5) what is difference between process and thread.
6) generally what resources are shared between threads.
7) what is process descriptor
8) what is task_struct.
9) what is therad_info structure for.
10) what was the need of thread_info structure.
11) difference betwen fork() and vfork()
12) what is process context.
13) what is zombie process.
14) how parent less process is handles in linux.

What are the different schedulers class present in the linux kernel?
How to create a new process?
What is the difference between fork( ) and vfork( )?
Which is the first task what is spawned in linux kernel?
What are the processes with PID 0 and PID 1?
PID 0 - idle task
PID 1 - init
How to extract task_struct of a particular process if the stack pointer is given?
How does scheduler picks particular task?
When does scheduler picks a task?
How is timeout managed?
How does load balancing happens?
Explain about any scheduler class?
Explain about wait queues and how they implemented? Where and how are they used?
What is process kernel stack and process user stack? What is the size of each and how are they allocated?
Why do we need seperate kernel stack for each process?
What all happens during context switch?
What is thread_info? Why is it stored at the end of kernel stack?
What is the use of preempt_count variable?
What is the difference between interruptible and uninterruptible task states?
How processes and threads are created? (from user level till kernel level)
How is virtual run time (vruntime) calculated?


Process Scheduling:-

1) what is process scheduling
2) what is cooperative multitasking and pre-emptive multitasking.
3) what is yielding.
4) what is limitation of cooperative multitasking.
5) I/O bound versus Processor bound process.
6) what is process priority.
7) What kind of priority is maintained in linux.
8) what is nice value.
9) what is virtual run time.
10) what are the available scheduling classes in linux.
11) which type os scheduling used in linux.
12)  how next task is picked for scheduling.
13) what is scheduler entry point in linux.
14) what is waitqueus.
15) How context switching is handled in linux.
16) what is user preemption and kernel preemption

Syscalls:-

1) what is syscalls.
2) how system calls are implemented in linux.
3) what happens when process in userspace calls a syscall.
4) what is the need of verifying parameter in definition of syscall.
5) what is system calls context.
6) why it is not recommended to writing new syscall.
 

Interrupts and interrupt handlers:-

1) what is interrupt
2) what is interrupt handler or ISR.
3) what is top halves and bottom halves.
4) How interrupt is registered.
5) what are different interrupt handler flags.
6) How interrupt are freed.
7) what are the considerations needs to taken care while writing interrupt handler.
8) what are shared handlers.
9) what is interrupt context.
10) how to disable and enable interrupts.
11) what are different bottom halves techniques in linux.
12) what is tasklets , softirq and workqueus and difference among them.
13) when to choose which bottom halves.
14) how to implements softirq , tasklets and workwues.
15) how to schedule tasklet.
16) what is ksoftirq.
17) How to disable bottom halves.
18) How locking between bottomhalves handled.
19) Why we need preemption.

Interrupts in Linux:

Explain about the interrupt mechanims in linux?
What are the APIs that are used to register an interrupt handler?
How do you register an interrupt handler on a shared IRQ line?
Explain about the flags that are passed to request_irq().
Explain about the internals of Interrupt handling in case of Linux running on ARM.
What are the precautions to be taken while writing an interrupt handler?
Explain interrupt sequence in detail starting from ARM to registered interrupt handler.
What is bottom half and top half.
What is request_threaded_irq()
If same interrupts occurs in two cpu how are they handled?
How to synchronize data between 'two interrupts' and 'interrupts and process'.
How are nested interrupts handled?
How is task context saved during interrupt.

Bottom-half Mechanisms in Linux:

What are the different bottom-half mechanisms in Linux?
Softirq, Tasklet and Workqueues
What are the differences between Softirq/Tasklet and Workqueue? Given an example what you prefer to use?
What are the differences between softirqs and tasklets?
Softirq is guaranteed to run on the CPU it was scheduled on, where as tasklets don’t have that guarantee.
The same tasklet can't run on two separate CPUs at the same time, where as a softirq can.
When are these bottom halfs executed?
Explain about the internal implementation of softirqs?
Bottom-halves in Linux - Part 1: Softirqs
Explain about the internal implementation of tasklets?
Bottom-halves in Linux - Part 2: Tasklets
Explain about the internal implementation of workqueues?
Bottom-halves in Linux - Part 3: Workqueues
Explain about the concurrent work queues.
 

Kernel Synchronization:-

1) what is synchronization
2) what is critical section
3) what is race condition.
4) why we need to take care of synchronization
5) what is various synchronization techniques in linux.
6) what is deadlocks.
7) what is atomic operations.
8) what is spin locks.
9) what is reader-writer spin lock.
10) what is semaphore.
11) what is binary semaphore.
12) what is difference between semaphore and spin lock.
13) when to choose what among spin lock and semaphore.
14) what is difference between semaphore and mutex.
15) what is preemption disabling and what is the use of this.

Kernel Synchronization:

Why do we need synchronization mechanisms in Linux kernel?
What are the different synchonization mechanisms present in Linux kernel?
What are the differences between spinlock and mutex?
What is lockdep?
Which synchronization mechanism is safe to use in interrupt context and why?
Explain about the implementation of spinlock in case of ARM architecture.
Explain about the implementation of mutex in case of ARM architecture.
Explain about the notifier chains.
Explain about RCU locks and when are they used?
Explain about RW spinlocks locks and when are they used?
Which are the synchronization technoques you use 'between processes', 'between processe and interrupt' and 'between interrupts'; why and how ?
What are the differences between semaphores and spinlocks? 

Kernel timers

1) what is tick rate and jiffies.
2) what are the various way of applying delay in linux.
3) what is blocking and non blocking call
4) what is Real time clock (RTC).
5) how busy looping is implemented in linux.


Timers and Time Management:

What are jiffies and HZ?
What is the initial value of jiffies when the system has started?
Explain about HR timers and normal timers?
On what hardware timers, does the HR timers are based on?
How to declare that a specific hardware timers is used for kernel periodic timer interrupt used by the scheduler?
How software timers are implemented?

Power Management in Linux:

Explain about cpuidle framework.
Explain about cpufreq framework.
Explain about clock framework.
Explain about regulator framework.
Explain about suspened and resume framwork.
Explain about early suspend and late resume.
Explain about wakelocks.


Memory management

1) how memory is managed in linux.
2) what are pages.
3) what are different memory zones in linux.
4) how to allocated pages.
5) how to freeing page.
6) what us kmalloc and what are action modifier we can pass while using kmalloc.
7) what is zone modifier in linux.
8) what is vmalloc

Linux Memory Management:

What are the differences between vmalloc and kmalloc? Which is preferred to use in device drivers?
What are the differences between slab allocator and slub allocator?
What is boot memory allocator?
How do you reserve block of memory?
What is virtual memory and what are the advanatages of using virtual memory?
What's paging and swapping?
Is it better to enable swapping in embedded systems? and why?
What is the page size in Linux kernel in case of 32-bit ARM architecture?
What is page frame?
What are the different memory zones and why does different zones exist?
What is high memory and when is it needed?
Why is high memory zone not needed in case of 64-bit machine?
How to allocate a page frame from high memory?
In ARM, an abort exception if generated, if the page table doesn't contain a virtual to physical map for a particular page. How exactly does the MMU know that a virtual to physical map is present in the pagetable or not?
A Level-1 page table entry can be one of four possible types. The 1st type is given below:
A fault entry that generates an abort exception. This can be either a prefetch or data abort, depending on the type of access. This effectively indicates virtual addresses that are unmapped.
In this case the bit [0] and [1] are set to 0. This is how the MMU identifies that it's a fault entry.
Same is the case with Level-2 page table entry.
Does the Translation Table Base Address (TTBR) register, Level 1 page table and Level 2 page table contain Physical addresses or Virtual addresses?
TTBR: Contain physical address of the pgd base
Level 1 page table (pgd): Physical address pointing to the pte base
Level 2 page table (pte): Physical address pointing to the physical page frame
Since page tables are in kernel space and kernel virtual memory is mapped directly to RAM. Using just an easy macro like __virt_to_phys(), we can get the physical address for the pgd base or pte base or pte entry.
 

 

Virtual file system:-

1) what is virtual file system and what is the need of it in linux.
2) are are different object types in VFS.
3) what are the operations possible on inode and superblock objects.
 

Process Address Space:-

1) what is process address space.
2) what is memory descriptor in linux and which structure represents it.
3) how to allocate and destroy a memory descriptor
4) does kernel thread  has any association with mm_struct.
5) what is VMA and what are various VMA operations possible in linux kernel.
6) how to manipulate memory area in linux.
7) what mmap and do_mmap().
8) what is page tables.

Device driver  questions:-

1) What is device driver and what is the need of it.
2) what are different kind of devices.
3) what is module in linux.
4) how mudules are loaded in linux.
5) difference between insmod and modprobe.
6) how parameters are shared between driver modules.
7) what are IOCTLS.
8) what is syscalls.
9) what are the benefits of syscalls.
10) how character driver is registered in linux.
11) what is init and exit function of a driver.
12) how and when init and exit function of driver get called.
13) what is probe function.
14) when probe is get called.
15) what is platform devices.
16) what is device tree.
17) what are the benefits of device tree over board files.
18) what is sysfs and procfs.
19) how logs are printed in linux kernel and what are the logs level available in linux.
20) what is copy_to_user and copy_from_user.
21) what do you mean by kernel configuration and what are the various way of configuring kernel.
22) what is menuconfig.
23) what is ioremap
24) what is seagmentation fault.
25) what are the various ways od debugging linux kernel.
26) how linux kernel boots.
27) what is zimage and bzimage.
28)  what are different booting arguments in linux.
29) how parameter are passed from boot loader to kernel.
30) what is ATAGS.
31) from which file kernel execution starts.
32) what is bootloader.
33) what is primary and secondary bootloader.
34) why we need two bootloader.
35) difference between poll and select.
36) what is priority inheritance and priority inversion.
37) what are different type of kernel.
38) what is DMA.
39) what is cache coherency.
40) what is copy on write.
41) what is highmem and lowmem.
42) what happens if we pass invalid address from userspace by using ioctls.
43) what are different ipc mechanism in linux.
44) what are sockets.
45) how page fault is handled in linux.
46) difference between memory based io and port based io.
47) what is I2c and SPI.
48) how physical to virtual translations works in linux.
49) what is thrashing, segmentation and fragmentation.
50) what is preempt_count and what is the need of that.

Linux Device Model (LDM)

Explain about the Linux Device Model (LDM)?
Explain about about ksets, kobjects and ktypes. How are they related?
Questions about sysfs.

Linux Boot Sequence:

Explain about the Linux boot sequence in case of ARM architecture?
How are the command line arguments passed to Linux kernel by the u-boot (bootloader)?
Explain about ATAGS?
Explain about command line arguments that are passed to linux kernel and how/where they are parsed in kernel code?
Explain about device tree.

Linux Kernel Modules:

How to make a module as loadable module?
How to make a module as in-built module?
Explain about Kconfig build system?
Explain about the init call mechanism.
What is the difference between early init and late init?
Early init:
Early init functions are called when only the boot processor is online.
Run before initializing SMP.
Only for built-in code, not modules.
Late init:
Late init functions are called _after_ all the CPUs are online.

Linux Kernel Debugging:

What is Oops and kernel panic?
Does all Oops result in kernel panic?
What are the tools that you have used for debugging the Linux kernel?
What are the log levels in printk?
Can printk's be used in interrupt context?
How to print a stack trace from a particular function?
What's the use of early_printk( )?
Explan about the various gdb commands.

Miscellaneous:

How are the atomic functions implemented in case of ARM architecture?
How is container_of( ) macro implemented?
Explain about system call flow in case of ARM Linux.
What 's the use of __init and __exit macros?
How to ensure that init function of a partiuclar driver was called before our driver's init function is called (assume that both these drivers are built into the kenrel image)?
What's a segementation fault and what are the scenarios in which segmentation fault is triggered?
If the scenarios which triggers the segmentation fault has occurred, how the kernel identifies it and what are the actions that the kernel takes? 

Some FAQ interview questions:

What is dirac delta function and its Fourier transform and its importance?DMA deals with which address (physical/virtual addresses)?*.
Why do we need a infinite loop in embedded systems development? What are the different ways by which you can code in a infinite loop?*.
Is it necessary to start the execution of a program from the main() in C?*.
Explain what are the different storage classes in C?*.
What is watchdog timer?*.
What are little endian and big endian types of storage? How can you identify which type of allocation a system follows?*.
Scope of static variables?*.
What is the difference between testing and verification of vlsi circuit?*.
What is the size of the int, char and float data types?*.
What is the difference between a ‘thread’ and a ‘process’?*.
Explain why cannot arrays be passed by values to functions?*.
Explain can microcontroller work independently?
What is interrupt latency?*.
What type of registers containsan (INTEL) CPU?.
Can structures be passed to the functions by value?*.
How to define a structure with bit field members?
what is an anti aliasing filter? Why is it required?*.
Advantages and disadvantagesof using macro and inline functions?*
Explain Scope of static variables?*.Explain what are the different qualifiers in C?*
What are hard and soft Real time systems?*.
How is function itoa() written inC?*.
What is difference between micro processor & micro controller?*.
Explain Order of constructor and destructor call in case of multiple inheritance?*.
Explain What will this return malloc(sizeof(-10))?*.
What do you mean by interrupt latency?*.
What is a semaphore? what arethe different types of semaphore?*.
Explain Can structures be passed to the functions by value?*.
IS 8085 an embedded system?*
What are the advantages and disadvantages of using macro and inline functions?*
Explain What are the 5 differenttypes of inheritance relationship?*.
What is ISR? Can they be passed any parameter and can they return a value?*.
What typecast is applied when we have a signed and an unsigned int in an expression?*.
What is the order of calling for the constructors and destructors in case of objects of inherited classes?*.
a=7; b=8; x=a++-b; printf(“%d”, x ); What does this code give asoutput?*.What is the role of segment register?*.
Explain what is interrupt latency?*.
What is pass by value and passby reference? How are structure passed as arguments?*.
What does malloc do? What will happen if we have a statement like malloc(sizeof(0));*.
What is Concurrency? Explain with example Deadlock and Starvation.*
Explain the properties of a Object oriented programming language.*
Explain can we have constant volatile variable?*.
What is the difference between embedded systems and the system in which rtos is running?*.
Explain the working of Virtual Memory?*.
What is a memory leak? What is a segmentation fault?*.
While writing interrupt handlers(ISR), which are points needed to be considered?*.
What is the difference between fifo and the memory?*.
Explain what is interrupt latency? How can we reduce it?*.
What is the use of having the const qualifier?*.What is plc system?*.
Explain Operations involving unsigned and signed? Unsigned will be converted to signed?*.
Explain What happens when recursion functions are declared inline?*.
What is the volatile keyword used for?*.
What are recursive functions? Can we make them in line?*.
What is difference between using a macro and a in line function?*.
Explain what is the difference between embedded systems and the system in which RTOS is running?*.
Explain Difference between object oriented and object based languages?*.
Why cannot arrays be passed by values to functions?*.
Can we use semaphore or mutex or spin lock in interrupt context in linux kernel?*
What is meant by a forward reference in C?*.
ow are variables mapped across to the various memories by the C compiler?
How to implement a fourth order Butterworth LP filter at 1kHz if sampling frequency is 8kHz?*.
What is the scope of a function that is declared as static?*.
Write a constant time consuming statement lot finding out If a given number Is a power of 2?

Qualcomm Interview Questions :

How many interrupt lines you have been used in your driver development.
UART : 1 (RX)
Ethernet: 2 (RX & TX)
I2C : what is I2C Clock Stretch, Bus line clear.
How do u debug when an process aborted.
How many Exceptions are there in ARM.
what are the methods or functions to raise execute the interrupt process when interrupt occurs.

1. What is the difference in features between kernel 2.2, 2.4 and 2.6 ?
2. What are Static and Shared libraries ?
3. What is dynamic linking ? What is static linking ?
4. What are the advantages of Dynamic linking or Shared libraries ?
5. Does gcc search for both static and shared libraries ? Which is searched initially by gcc compiler ?
6. What should be done for Shared library based linking in gcc ?
7. What should be done for static library based linking in gcc ?
8. What is object file and what are symbols ?
9. Can you tell the memory layout based on Data,BSS,HEAP and STACK ?
10. What are the ways in which linux kernel can be compiled ?
11. How will get the driver added into the kernel ? What are Kconfig files ?
12. What is a kernel module ?
13. What is the difference between insmod and modprobe ?
14. How will you list the modules ?
15. How do you get the list of currently available drivers ?
16. How will you Access userspace memory from kernel ? What are the various methods ?
17. What is the use of ioctl(inode,file,cmd,arg) ApI ?
18. What is the use of the poll(file, polltable) API ?
19. What is the use of file->private_data in a device driver structure ?
20. What is a device number ?
21. What are the two types of devices drivers from VFS point of view ?
22. What are character devices ?
23. How does the character device driver adds and remove itself from the kernel ?
24. What is the role of interrupts in a device driver ? How are interrupts handled in device driver ?
25. How will you make interrupt handlers as fast as possible ?
26. What are the types of softirqs ?
27. Difference between Timer Softirq and Tasklet Softirq ?
28. What are tasklets ? How are they activated ? when and How are they initialized ?
29. What is task_struct and how are task states maintained ?
30. What is rwlock and spinlock ? Briefly explain about both of them ?
31. When will you use rwlock instead of spinlock ?
32. Can spinlock/rwlock be used in Interrupt handler ?
33. Tell about the Memory Layout of a Process in Linux .
34. How will you trace the system calls made into the kernel of lInux ?
35. What is mmap ? MMAP & malloc ? MMAP & brk ? MMAP adv & dis-adv.
36. Tell the relation between Malloc and MMAP
37. Advantages of MMAP over Read ?
38. Tell the role of brk() in malloc / Tell the relation between heap and brk?
39. Example of using MMAP and MUNMAP in C ?
40. Tell about the method/steps in Linux Kernel Compilation.
41. What is Kmalloc and how does it differ from normal malloc ? or Why can’t we use malloc in kernel code ?
42. What happens as soon as a packet arrives from the network in Linux ?
43. What is a stack frame, stack pointer & frame pointer ?
44. What is a profiler ? Which one have you used ?
45. How do you determine the direction of stack growth ?

C++ questions:

13.What is copy constructor and a default constructor and write a copy constructor and explain shallow copy with memory diagram.
14.Is it necessary to have const for a reference in copy constructor
15.Explain the stack over flow condition when pass by value is done in copy constructor.
16.Memory layout of a program and explain the different segements when a function call happen.
17. Explain the difference between static variable and local variable
18. what are the different storage classes present and explain the differnces between them.
19.Polymorphism and virtual concepts
20.Why a virtual destructor is needed explain with a scenario what happens when a virtual destructor is not defined.
21.What is a smart pointer and why it is needed?
22.Difference between smart pointer and auto pointer and write the code for autp ptr implementation.
23.exception handling in c++
24.what is stack unwinding?
25.Difefrence between vector and list.
26.Templates and function templates.
27.what is operator overloading  ? implememt how to overload ++ operator and "insertion" operator.
28. What is memory leak and memory corruption and explain the scenario for memory leaks and memory corruption with a sample code.
29.What is factory pattern? why factory pattern is needed?
30.What is builder pattern pattern ? write a sample code for the same.
31.What is a singleton pattern and write the code for the same.
32. How can you retain the values of a local variable without using a  static variable.
33.What happens when a function is made inline?
34. why inline functions are needed and in what scenario the inlines are needed?

35..Find the first non repeated value in the array by iterating only once.

Posted by RAJASEKHAR CHALLA at 9:07 AM No comments: Email ThisBlogThis!Share to TwitterShare to FacebookShare to Pinterest
Thursday, March 5, 2015
Linux Device Driver,Embedded C Interview Questions
Below are the collection of interview questions for positions in Embedded,Linux Device Drivers,QNX BSP Kernel Programming, C language,System programmer.


**************************************************************************************
Mirafra Interview Questions for QNX OS for Automotive Domain(Client : Qualcomm)
Round-1
1.Write a macro to swap the nibbles in the word ?
Ex:0x1234 output:2143

2.Differance between macro & micro Kernel.

3.what you observed difference between QNX & Linux

4.Difference between Semaphore & Mutex

5.Write a programme to delete a given node number in Single linked list.

6.difference between processes and thread

7.diffrence b/w RTOS & GPOS

8.code base query :
Need the out put to be printed as 10.
int a=10;
main()
{
                int a=20;
                printf("%d",a);
}

Round-2
1.What are the projects you worked and breif them

2.What is the difference between I2C & SPI

3.How will you chosse which protocal to be used on board communicaiton

4.How the communication difference b/w I2C & SPI

5.Sceanrio based query:
Had 4 sensors on board,which communicaiton you will chose to establish communicaiton b/w the sensors

6.Code base query:
what is the output.
main()
{
                int *p= &a;
                int a= 5;
                printf("%d %d",*p,a);
}

7.Diff types of storage classes and details of each storage class

8.Detailed discussion on Static like storage ,default ,scope,life time.

9.Code based query:
what is the output.
main()
{
                int a= 5;
                int *p= &a;
                printf("%d %d",*p,a);
}


main()
{
                int a= 5;
                int *p= &a;
                *p++;
                p--;
                printf("%d %d",*p,a);
}

main()
{
                int a= 5;
                int *p= &a;
                (*p)++;
                p--;
                printf("%d %d",*p,a);
}

10.
const volatile int *ptr;
*const volatile int ptr;
What is the diff .

11.
which pointer value we can  modify.
const volatile int *ptr;
*const volatile int ptr;

12.different IPC mechanisms in QNX & Linux

13.Discussion on Shared Memory

14.Roles & Responsibilities in the project

15.What is greb loader

16.Embedded board Booting sequence

17.Diff b/w MLO & IPL.

18.Who will provide MBR and is it possible to modify.

19.Debugging techniques.

Round-3

1.Why are you leaving the company, what are the reasons.

2. Write a macro to swap the nibbles in the word ?
Ex:0x1234 output:2143

3. Thread locked a resource ,before releasing the resource an Interrupt got triggred ,here interrupt is also using the same resource.
  How will you handle this scenario.

4.Having Three resources and 10 Threads,
out of 10 ,3 threads acquired the resources, How will handle the reaming 7 threads
which thread has  to come first to take the release resources
Which type of mechanism will you use for synchronization.

5.Diff b/w Semphore & Mutex /binaru sema & Mutex.Is it possible to use the counting semaphore for above scenario

6.What is Bit Binding in I2C protocol

7.Multimaster & single slave communication
m1: 0001 0000
m2: 0101 1010
m3: 0000 1111
Which master will acquire I2C Bus

8.What is i2c clock stretching

9.Is clock stretching is for Master or Slave in I2C protocol

10.How Multiple Threading is handled in single CPU.
**************************************************************************************
Panasonic America Automotive for BSP Role for QNX OS
*************************************************************************************************************
1.Is const volatile possible ?
2.Where a const volatile variable is used?
3.What is booting sequence of linux?
4.Booting Sequence of a board ?
5.Why primary boot loader and secondary boot loader required?
6.What are types of boot loader?
7.How a user mode is transferred to kernel mode?


What part of kernel driver worked. Explain
Difference between kernerl/user space
How system call causes change from user to kernel space
Which RTOS worked on. Difference between various OS/RTOS
How to chose RTOS for a consumer product
Measure of performance of OS. Define performance
How to debug crash. Gdb
What is object file, how its used in crash
What are the various code optimization techniques used
memory leak deduction and various ways of handling
How to write own malloc call
How to proceed if system is sluggish
How to determine if some high prio task is hogging CPU
How debug prints/system trace could help solve above issues
Important things to look for in code reviews
Experrience with Oscilloscope, logic analyzer, i2C sniffer
Understanding of schematics
Why driver code in not written in C++/Java
How to debug while system is running
Run Time optimization
Estimate the requirement in BSP domain
How to define the process of QNX/Arch delivery integration
How many years of experience in BSP domain


What part of kernel driver worked. Explain
Difference between kernerl/user space
How system call causes change from user to kernel space
Which RTOS worked on. Difference between various OS/RTOS
How to chose RTOS for a consumer product
Measure of performance of OS. Define performance
How to debug crash. Gdb
What is object file, how its used in crash
What are the various code optimization techniques used
memory leak deduction and various ways of handling
How to write own malloc call
How to proceed if system is sluggish
How to determine if some high prio task is hogging CPU
How debug prints/system trace could help solve above issues
Important things to look for in code reviews
Experrience with Oscilloscope, logic analyzer, i2C sniffer
Understanding of schematics
Why driver code in not written in C++/Java
How to debug while system is running
Run Time optimization
Estimate the requirement in BSP domain
How to define the process of QNX/Arch delivery integration
How many years of experience in BSP domain
what is repeate sequence in I2C?
How this signal will look on CRO?
How many lines required for SPI communication?
Do you need to change Clock polarity and phase for SPI?
Who has control of SPI clock?
What is deadlock?
How to come out of deadlock?
what is difference between mutex and semaphore?
Explain board bring up.
What is the difference between inline and macro?
Write program toreset bit in register if address of register is given
 reset (int address, int bit)
How do you implement malloc ?
How to know size of memory allocated by malloc using pointer?
What is the problem in following code
char * p = 'a';
How to fix it?
Explain cinit and bss section


Asked on what are optimisation that I have done in my previous project
how will you verify I2C communication?How will you know if there was a software or hw problem?
How will you know if the I2C lines are noisy?
Have you worked in crash dump?
How will you solve memory crash, what steps would you take if a crash occurs?
Diff between mutex and semaphore? Can semaphore be used for data synchronisation purpose?
Data sharing between ISR and threads?
Whats the boot loading process from powerup? They wanted a detailed answer to this asking for detailed explanation for every step?
what is NAND and NOR flash, diff between them?
What execution in place?
What monitoring tools have you used like I2C sniffer
How many years of experience in BSP domain
Details of performance related optimisation?

HARMAN Automotive :
*************************************************************************************************************
1.What  memcopy do? implement your own memcopy function?with optimization(less usage of variables?)
2. int *i
     char *c
     void *v
tell me the sizes ?
sizeof(*i)
sizeof(i)
sizeof(*c)
sizeof(c)
sizeof(*v)
sizeof(v)

3.What is big endian and little endian?
     implement a function changes the endians
4.what is cache coherence? 
5.what is critical section?
6.what is protection mechanism?
7.Can a scheduler can be locked?
8.How are the compiler optimization techniques?
9.what is user space and kernel space?
10.Main Advantages and disadvantages of having separate user space and kernel space?
11.what is scheduler?
12.who schedules the scheduler?
13.At what frequency scheduler looks for threads/processes ready for schedule?
14.what is tick?
15.what actually does a system does in a tick?
16.what is DMA?
17.When cahche is enabled in a operating system ,DMA is enabled,how does DMA access the cache?
18.what is scheduler algoritham?
19.How interrupts are generated?
20. write a programe which includes the variables should cover all the segments ?
21.Local Const variables reside in which segment?
22.Global const variables reside in which segment?
23. How many stack will present?
24.does each processes has it own stack ?
25.does each thread has its own stack?
26.what is context switch ?
27.when their context switch from thread t1 To thread t2 where does the stack information of t1 gets stored?
28.What is advantage of virtual memory?
why not directly the physical address?
29.What is MMU?
30.what is a page fault?
31.What is instruction pipelining?
32.What is page write back?

    Memory map of RAM
    Where do const variables get stored? (literal segment)
    Static, auto, etc
    Write a program to change endianness
    What is structure padding?
    Why does the compiler perform padding?
    How to send information over network? (structure packing)
    Declare an array of 10 integer pointers
    Volatile variable in-depth (definition, use case, impact, when to avoid, etc)
    Where does dynamic memory allocation get stored?
    What are the pros and cons of using dynamic memory allocation versus static memory allocation?
    If you had to allocate 1MB of memory that needs to be used for only a short time, which type of allocation would you use?
    Different types of schedulers (round robin, pre-emptive)
    Timeslice, jiffy
    Priority inversion, priority inheritance, priority ceiling
    Difference between semaphores & mutexes
    Write a program to implement memcopy.
    Optimize it such that it uses NO stack space at all
    How to handle situation when a program is too large for code space? (edit linker file)



1.Difference btwn Process and Thread
2.Diff btwn mutex & semaphore
3.Bit operations
4.C program for factorial, prime number with recursion  
5.About Booting process
6.Questions on Pointers
7.What is Process preemption
8.About priority inversion & priority inheritance
9.How priority inheritance will work
10.structure padding
11.about #pragma
12.How to avoid re declaration of header files
13.About Jtag

1.How you Evaluate the Driver
2.about ISR, Interrupts 
3.about Synchronization mechanism where you used  in real time(examples)
4.what happen if you use mutex in ISR, how you over come with that problem 
5.about memory mapped files
6.about linker scripts 
7.what is re entrant function
8.what is module
9. IPC mechanism
10.toggle alternate bits
11.about function pointers
12.Advantages of func pointers
13.Advantages of call back functions
14. Declare a array of function pointer of taking two arguments
15. How to find little endian and big endian


1. Implement your own memcpy function and Error handling in memcpy
2. How you handle errors with the pointers
3. About dynamic and static memory
4.about malloc in depth
5. about Null pointer
6. how can you determine whether your memory is in protected or un-protected mode
7. About memory layout 
8.How you will think while writing a program in optimized way 
9.They will ask most of the question from memory in this round please study MMU well.

Some Imp Question:

1.About volatile and use cases
2.Why the first two parameters are of type void in memcpy
3.Are #pragramas Gerneric or processor specific
4.Enabling & Disabling of interrupts
5.C program to swap every 2 bits in a 8 bit binary number.
6.Write a program to find how many bit to toggle in 2 binary numbers so that they become equal
    a. program for to get the number of bits toggle in 2 binary numbers and toggle them to make the numbers equal
7. what is user mode and kernel mode

1.How you Decide the stack size for the function or thread.
2.Booting Sequence
3.About JTAG
4.Diff btwn SPI & I2C
5.Memory Layout
6.what is your strength 
7.About Disassembly file(Memory map file) 
8. About clock & timers
9.About Stack
*************************************************************************************************************


PANASONIC and HARMAN Automotive:
*************************************************************************************************************
1. Booting sequence in embedded systems
2. How to decrease the time of booting processes
3. What is the functionality of PROBE function
4.How to detect whether a device is not detected?
5.Own Malloc implementations
6.memcpy implementation
7.Find a word from string
8.How to find if their is in repeating node in linked list
9.For a given array gather all 1's to one side and 0's to one side.
10.In a given byte interchage pair of bits
11.Reverse linked list
12.Reverse string
13.Reverse a word in a string


Ericson:
*************************************************************************************************************
1.A thread is created by processes, how the process comes to know the completion of that created thread ?
2.In a big array consists of 1's & 0's ,write an efficient programe to keep all 1's to right side and 0's to other side?
3.Write a programe In a given string find a specific word.
4.Semaphore internal code behavior in a way semaphore implementation ?
5. Topic to look :
 1.            Inter-process communication
a.            Socket programming
b.            Named and unnamed pipes
c.             Message queues
d.            Shared memory, mmap
2.            Synchronization mechanisms
a.            Mutex and semaphore
b.            Spinlocks
c.             Synchronization between ISRs and process context threads
3.            Debugging using GDB
C Questions
------------
1. Storage classes
2. const and volatile
3. How to allocate memory in c - malloc vs calloc
4. brk, sbrk
5. Any other system call to allocate memory. mmap ; anonymous mapping
6. Memory barriers; Why are they required
7. Wild and dangling pointers
8. struct alignment and packing. Need of alignment
9. Pass by value and ref
10. Endianness
11. size of void pointer
12. What is thread safety
13. What is re-entrancy
14. far and near pointers
Programming
------------
1. Verify if a number is a power of two
2. nth element from last in a  linked list
OS Concepts
------------
1. Thrashing
2. Deadlock - example
3. MM - Segmentation, paging, swapping
4. Paging vs swapping
5. Different segments in a program
6. Does linux use segmentation
7. System boot sequence
8. What is DMA. Modes - cycle stealing/burst (blk transfer)/transparent
9. Cache coherency during dma. Which component handles it
Linux
------
1. How are interrupts handled in linux 
2. spinlock vs mutex vs semaphore
3. Top and bottom halves. examples
4. Different contexts
5. softirq vs tasklet vs workqueue
6. IPC mechanisms - shared mem/pipe/sockets/DBUS
7. Memory alloc in linux - kmalloc vs vmalloc
8. System call implementation
9. Physical Virtual and logical addresses
10. Threads vs processes
scheduler in linux
Hardware / Protocols / Misc
-----------------------------
I2C 
 - Protocol
 - Slave address

*************************************************************************************************************




 Dover corporation:F2F
1.what is a device driver and write a simple driver
and explain what happens when an insmod is done an module
2.How will you insert a module statically in to linux kernel.
3.what are IPC mechanisms and explain d/f between all types with example scenario
4.explain the synchronization mechanisms
5.Explain about file system in linux kernel and how a kernel handles any file when it was created.
6.what is file descriptor and what informtion it contains in file descriptor
7.How do u see system messages and how do find the issues in system by reading the proc file system or dmsg queues or sysfs information.
8.what all kind  of info is present in procfs.
9.when do u select the semaphore and a mutex and binary sempahore.
10.what is an interrupt and difference between exceptions and signals
11.How many types of signals are present in linux kernel.


Shared IRQ :
When a signal is raised on irq line which triggers an exception on processor.
Linux had data structure called interrupt descriptor table which is linked list of irq descriptors
number  of descriptors is equal to number of irq lines. Below screen shot shows the irq descriptor table.
 This descriptor had two main pointers handler and action.Handler pointer is to managing a irq line like enabling , disabling and acknowledge and action pointer is to call the registered function to be called.
Linux allows single irq line to be shared between multiple devices in such case the action pointer points to multiple handler functions.Each ISR is called in sequence of the ISR's registered.







1. In a processes address space does the code segment starts form zero?
Ans.  No, out of 0-3GB processes address space the first 64kb is not used for process address space
         that 64KB is used by OS for critical/important tasks.
      (In general it is 64kb it may vary.)




Nice link for LDD questions:
http://embedded-telecom-interview.blogspot.in/2010/07/linux-and-linux-device-driver-interview.html

Void main()
{
    char *str_ptr="MY_STRING";
    printf("%s",str_ptr);
}
     In processes addres space wehre is string "MY_STRING" stored ?
Ans. string "MY_STRING" stored at read only Text segment and str_ptr stored at data segment.






In a Process Address Space what if stack or heap collide?


Malloc Implementation (not Interview FAQ but you can impress interviwer if asked)
http://danluu.com/malloc-tutorial/
(
    Very effective and easy to understand (My Pref read this down to the blog you can find very useful     link  https://github.com/danluu/malloc-tutorial/blob/master/malloc.c to see simple malloc code
    Read this too
    http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/
)


http://www.inf.udec.cl/~leo/Malloc_tutorial.pdf
https://fossies.org/dox/glibc-2.21/malloc_8c_source.html  //glibc malloc source code.
http://moss.cs.iit.edu/cs351/assets/slides-malloc.pdf






Ericsion Interview from WIPRO:

1.Write a simple with crtical section,mutex lock and mutex unlock.
2.What is the difference between Mutex and Binary semaphore
3.What is difference between Mutex and semaphore
4.Working of spinlocks
5.Can Spinlocks works on mutliprocessor system.
6.In what scenarios mutex is used and semaphore is used.
7.Delete a particular node in a linked list having argument passed as address of a node.
   without Header pointer known and other implementation with header pointer known
8.When a signal is raised on a interrupt line what will be passed to processor either interrupt number        or anything else?
9.How kernel comes to know which device raised an interrupt when  interrupt  is shared.
10.How can an application can talk to specific device in this below case ?
      having Hard Disk devices
        SATA0
        SATA1
        SATA2
 if their a devce driver registered for these devices and a single drivere is used to manage thesr devies then how can an application talk to a sepcific device
Ex: if i want to read from SATA1 hard disk and Write to SATA0 and SATA1  hard disk.
11.How do you establish a sync mechanisam in above hard disk scenarios.
12.When a Mutex lock is aquired by a low priority task and High priority trys to acquires the lock
      will the low priority task will be pre emitted .
13.The same above scenario is with sema and spinlock
14.Explain working any any IPC mechanisam.
15.Where your driver will be in kernel
16.Explain about process address space with data seg,code seg..
     how much memory is occupied by process address spcae.
17.When a same executable is excuted in two terminals like terminal 1 execute ./a.out and terminal 2 executed ./a.out what will the programe address space look like on RAM
18.If a global variable defined as int V1=100 in programm_1 and modified this V1=200 in              programme_2.what will be printed in Programme_1 and Programme_2.
19.char *name="WIPRO";
       sizeof(*name) = ?  (Ans :1)
       sizeof("WIPRO")= ? (Ans :6 )
       sizeof(name)= ?    (Ans :4 )
20.Declare a function pointer which takes 2 arguments as char pointers,and returns an integer pointer?
21.For above function pointer assign the function to be called?

.............................................................................................................................................................

CISCO Interview from WIPRO:
Malloc allocation tutorial
Write your own malloc implementation without using system calls.(FAQ Interview)
http://danluu.com/malloc-tutorial/
http://www.inf.udec.cl/~leo/Malloc_tutorial.pdf


Understanding linux Kernel Oreily
http://idak.gop.edu.tr/esmeray/UnderStandingKernel.pdf

Linux Kernel Dervelopment by Robert Love click on 1st item
https://www.google.co.in/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=robert+love+linux+device+drivers+4th+edition+pdf

Linux Device Drivers Oreilly
http://www.oreilly.com/openbook/linuxdrive3/book/


Below link explains i2c well
http://maxembedded.com/2014/02/inter-integrated-circuits-i2c-basics/


Below Link Explains how a Prob function called (FAQ in device driver interviews)
http://stackoverflow.com/questions/7578582/who-calls-the-probe-of-driver



1. Write program for Fibonacci series of first n number
           Ex: if n=4 ,answer is 0,1,1,2
2. Write program to Insert element in static array.
          Ex: int a[20] = {1,2,3,5},
               Given input element is 4,
               answer is {1,2,3,4,5}
3.Write your own malloc implementation without using system calls.
         Hint:How you will get the heap next free address
4.Reverse the words in given strings.
         Ex: I am good boy
         answer : boy good am I

5. Swap two element in efficient manner

Design Part
1. Class diagram for State Machine.
 
OS Concept 
1.Message queues
2.semaphore
Memory Leak Debugging concept.  Whats your approach on debugging a core dump.
Memory layout of a process. Stack/Heap/BSS/Data/Code.
implement malloc API.
C++ Programming Concepts . why do we need virtual function? How the performance is affected by this?)
Concepts of pointer and reference.
1.       Write a malloc_alloc() function for an integer, without using heap or any system calls
Int * malloc_alloc(int * 1) Hint: normal integer pointer allocation ; storage can be in data segment
2.       Write a pgm to insert an element in a sorted array; check all boundary conditions
3.       Implement a state diagram for state change based on events
Hint: use a Table mapping events to state change
4.       Memory usage, heap, physical memory, system concepts
5.       Data segment/Bss etc
6.       Compare the size of the 2 files after compilation.
File1:
int arr1[1000];
Main() {
}
File2:
Int arr2[2000];
Main() {
}
Hint: File size is same
7.       Lastly worked project details and design
8.       Bit manipulation – To set a bit at a position in a 32 bit integer


.............................................................................................................................................................

Cisco f2f interview
1.Write a C program to set a bit at a particular position.
2. Write a function in library file that function should return a 32bit unique integer number every time the function is called and that function will not take any arguments?
3.How above written library function to be take care in multi thread scenarios. 
4.What is the default value of static?
5.how the default value is get assigned to static variables?
6.Where static variable are present in programme address space?
7.How a interrupt is registered?
8.How a delayed execution in interrupt is handled?
9.In detail about top half and bottom Half?
10.In which interrupt context the interrupt will run?
Ans. Arbitary Thread context means(The processes in which the interrupt was triggered.)
         (https://www.osr.com/blog/2014/09/08/arbitrary-thread-context-article-video/)
11.what all Debugging techniques you know?
12.do you know scripting?

2nd-Round:
1.Create a pointer pointing to integer type point that to char array containing 10 elements?
2.The above created pointer if incremented ++ which element of the array it points to?
3.Write an instruction such that integer pointing sould point to first element of the array on increment?
4.Will their be any compilation errors while trying to print the below?
     int *ptr=NULL;
     printf("%d",*ptr);
5.will their be any warning if yes when at compile time or run time?
6.Expalin about your latest project?
7.Explain about shared interrupt  and how an correponding 
interrupt Handler is called while an interrupt is shared?

.........................................................................................................................................................
Broad com:
1. write a C programe to check given string is palindrome or not.
2.Write a C programe to reverse a string.
3.write a C programme to copy a string to other char pointer
4.write a C programme for any sorting logic.
5.write a C programme to set a particular bit to 1 for given position.
6.write a C programme to set a particular bit to 0 for given position.
7.write a C programme to toggle a particular bit for given position.
8.Volatile keyword
9.Interrupts mechanisam
10.Synchronization techniques(Semaphore/Mutex/Spinlocks)

..........................................................................................................................................................

SmartPlay :
1. write a C programe to set bits  from 3 to 7  positions to 1 in a 32-bit given value
Condition is at a time only one bit from 3 to 7 bit positions to be  1 and if not all bits to be reset.?

2. Determine the minimum stack size required for given prog by end of main function?
Void main()
{
int x,y;
char c;
fun1();//Assuming forward declaration is done.
fun2();//Assuming forward declaration is done
fun3();//Assuming forward declaration is done
}

void fun1()
{
int a,b,c;
c=a+b;
}

void fun2()
{
char c;
}

void fun3()
{
}

3.what is the internal implementation/mechanism made to work volatile to get the updated value?
4. Behavior of  system call from user level to kernel level.
5.What is software interrupt and hardware interrupt with examples?
6. Spin locks behavior?
7.What is structure padding?How can we eliminate it?
8.If structure padding is efficient why not C language made this as default behaviour?
9.
..........................................................................................................................................................

HCL telephonic:
1.Explain camera sensor project
2.How frame buffers are allocated in camera sensor project
3.how to debug your driver if u had any buffer issues
4.Do u know about V4L2 layer
5.Have u faced any page faults in driver and how u will solve that issue?
6.How the data is transferred from camera sensor to LCD display
7.Do u know about IOCTL operations? and have they been used in your camera sensor project.

8.what is softirq and tasklet and work queues?
9.how you select the bottom half mechanism and what are the differences between them
10.what in interrupt context and process context
11.what is context switch
12.what are kernel synchronization techniques
13.Difference between sempahore and mutex and when u select the semaphore and mutex to use in your driver
14.what is process management
15.What is kernel thread?
16.what is pthread?
17.Do u know about IPC mechnanisms?
18.what is shared memory
19.Explain MMU in Linux
20.what is /proc entry and how it is useful
21.how the device files are created in linux
22.Difference between structure and union
23.what is function pointer and how it is used?
24.can i call a function using the address of that function through a point variable?

..........................................................................................................................................................



General Question Collection:

->Storage classes
->Where static and global data members stored?
->What is shared lib and static library?
->How can two slaves can communicate with master in i2c protocol at a time?
->How can we address different devices from same vendor i2c?
->Structure padding?
->Difference between #define and CONST, which one will you chose in programming?
->Debugging techniques?
->Volatile keyword?
->Top half and bottom half interrupt approach?
->Inter process communication techniques?
->Threads, Fork and clone?


->Device driver projects
->write a efficient programme to set a particular bit in a givne number?
->Difference between typedef and #define?
->Callback functions?
->Intterupt top half and bottom half?
->USb driver project?

..................................................................................................................................................................
Global edge:
1.Explain camera sensor driver project
2.where the camera driver resided in kernel
3.Know about VL42
4.I2C protocl
5.I2C- dummy write,repeated start,arbitration,synchronization between masters
6.Lm475 temeprature driver project
7.storage classes in C
8.Questions on static,diff b/n static and extern
9.can we assign pointer to a static variable?
10.can we assign pointer to a register variable
..................................................................................................................................................................
HCL:
1.How to give memory of 250Mb to kernel (high zone memory)
2.Working of camera sensor project
3.bit operations :set a bit, clear a bit,toggle a bit
4.find a loop in a linked list
5.can we add two pointers
6.can we subtract pointers
7.Difference between structures and union
8.storage classes
9.diff between static and extern
10.How to develop a device driver for a hard device?
..................................................................................................................................................................
DELL:
1.Explain the projects what u have done
2.IPC,memory management, process management
3.Socket programming
4.Delete a node in the list
5.find a word in a buffer
Telephonic for CISCO:
Linux
1. Explain in brief about your project (Camera device driver)?
2. What is the communication protocol used to communicate with camera sensor?
3. How to write data to camera sensor address?
4. Which type of address (virtual or physical) is used in function iowrite32?
5. What is concept of virtual address or physical address?
6. Why virtual address is required when physical address is existing?
7. What all the things to be taken care while handling an interrupt?
8. Main  difference between Tasklets and workqs?
9. When an interrupt can be enabled again?( Not asked but better to find the answer When an interrupt can be disabled)
10. What is volatile variable?
11. How to register an interrupt handler?
12. How to know whether a interrupt is an edge triggered or level triggered from registering an interrupt handler?
13. What is the type of driver char or n/w or block driver you developed?
14. How to register a CHAR driver to kernel?
15. How to load a dynamic driver or static driver?
C
11. what is a static variable or static function?
12. what is the difference between static variable and global variable?
13. Where a global variable and static variable resides in at run time?
14. What all the segments present when a programe at compile time?
14. What all the segments present when a programe at run time?
15. Tell me the logic to disable specific set of bit provided a 32 bit number, start bit and end bit?
Example given numb, disable whatever the data from 5th bit to 10th bit.
16. Tell me the logic how can you find depth of a stack?
Example In a program their is foo1() function calling foo2() function  calling foo3() in any function write a logic to know the depth of stack.
17. s3c2440 processer supports which ENDIAN type?
18. Can Volatile be applied to pointer?
19. Why to have Virtual memory concept instead why cannot we increase the RAM on system?
20.s3c2440 supports what bit type 32/16/8?
symphony teleca F2F questions
1.volatile variable usage
2.const and volatile difference
3.can volatile and const be used together?
4.How do you declare pointer to memory mapped area?
5 Call backs and explain with example
6.How callbacks are different to normal function calling?
6.synchronization mechanisms (semaphore and mutex)
7.Difference between binary semaphore and Mutexes
8.Interrupt handler ? how interrupt is serviced?
9.difference between Malloc and calloc
10.what is memory leak and how to avoid it?
11.I2C protocol

Second round:
1.What are the design issues/considerations  that was taken care for your camera project.
2.Expalin about the S3C2440 processor architecture
allegion interview F2F qs
1.why size of data types is restricted?
2.why volatile and why it cant be used to all variables
3.difference b/w macro and a constant variable
4.I2c protocol and diff b/w i2c and spi
5.what is  i2c bus error
6.how to synchronize devices which operates at different frequencies
7.explain how an interrupt of hardware device is handled
8.explain embedded system architecture (von neumann and harvard architecture)
9.s3c2440 board architecture
10.make file creation and it rules and how it works to create .objs
11.Build process of  C program (preprocessing, compilation,linking etc)
12.Questions on Wifi-- related to networking

..................................................................................................................................................................
Broadcom//Face to face.
1. WAP to toggle the given range of bits for a given number(with out using loops)?
2.How C programme memory address space is allocated?
(stack,heap ,data segment,code segment
given few functions in a programme and asked to tell which all variables goes to which sections in
programme memory adress space)
3.How can you make a header file not to include multiple times?
4.Q's on #ifdef,#ifndef
5.where are static variable get stored in programme adress space?(in stack/heap/data segment)
6.if we print the adress of local variable which adress it would print?
7.What all the data memebers stored on data segmet?
8.Volatile use case?volaitile is qualifier or not?
9.static use case ?
10.Over all more Q’s on programme address space,stack heap segements?
..................................................................................................................................................................
Broadcom//2nd Round
1.main()
  {
  int a;
  }
  where a will be stored.
2.WAP to know how stack grows in upward or downward directions?
3.WAP to convert ACII to Interger?
4.Why ASCII number is required?
5.Given Two borads and with exactly same CPU's should they require different compilers?
6.#include<stdio.h>
 void main ()
 {
 int a;
 }
 how this programme looks after preprocessing?
8.The project done by you are in linux platform if gcc is the compiler used what is the preprocessor used?
9.what is the job of preprocessor?
10.more deep question on preprocessor and compiler?
11.what is diff b/w process and threads?
12.Will threads have their own stack space?
13.can one thread access the address space of another thread?
//http://www.cs.cf.ac.uk/Dave/C/node29.html
14.Overall 2nd round more Q's on preprocessor,compliler,process and threads?
15.main()
  {
  int a;
  }
  how variable ‘a’ get allocated memory  in assembly level language?
16.In printf what it the purpose of %X ?
17.What is the size of integer variable on 32bit and 64bit machine?
18.Structure
{
Int a,
Char c;
Int b;
}
What is the size of the structure.
19. What is an re-entrant function?

..................................................................................................................................................................
Broadcom://Telephonic
1. Brief about yourself?
2. In Depth of USB Device Driver?
a. What are the different data transfer modes?
b. If there is a speech audio data to be received by USB device what type of data transfers will
you chose.
c. What are the different types of device descriptors?
d. How many END point descriptors can be present per device?
e. What is a configuration descriptor?
f. What is a control type of data transfer?
3.In a given structure having n number of structure members how do you find the sizeof structure?
4. How can you find the offset  of next structure member
 if out of n-number of structure members ,xth structure member is given  how can you find the size of structure?
5. DO you know container macros? In all most all kernel drivers it is used?
6. What is call by value and call by reference?
7. If passing name is an call by value, then array name is passed is it also call by value?
8. Volatile keyword? Usage?
9.  Can a volatile member can be cached?
10. Can you see any difference between MUTEX and Binary Semaphore?
11. Spinlocks mechanism?
12. A global data member is programmed to get modified in a thread and Interrupt,so what kind of synchronization mechanism will you use?
13.If spin locks what flavor of spin locks will you use.
..................................................................................................................................................................
Xylinx:
How can a static driver runs? Without doing any insmod?
Any idea about Device tree?
synchronization Techniquies programmes
IOCTL implementation prog
C-Code data segments
C-programme complilation steps
Where will be your driver file will be located
What is the entry point of your driver
Memory Kernel Working
USB Driver
i2c Driver
IPC Mechanisams
Port Mapping/Memory mapping
Fork/Clone
Diff of Kmalloc and Vmalloc
Linked List
Device Tree
String operations
Call back
Programme to find little Endian and Big endian
programme to find the size of a structure with size of operator.
Programme to implement reversal of bits
ARM processor overall knowledge.
Overall knowledge of kernel building knowledge.
..................................................................................................................................................................
MiroChip
->Linked List creation, adding elements, insertion in the middle, deleting elements in the middle.
->2-Dimentional array creation, allocation
->Reversing bits.
->IPC
->Creating of threads
->Difference between process and threads
->Debugging of kernel
->Kernel crash dump analysis
->basics of board support package

..................................................................................................................................................................
Tata Elexsi:
->Storage classes
->Where static and global data members stored?
->What is shared lib and static library?
->How can two slaves can communicate with master in i2c protocol at a time?
->How can we address different devices from same vendor i2c?
->Structure padding?
->Difference between #define and CONST, which one will you chose in programming?
->Debugging techniques?
->Volatile keyword?
->Top half and bottom half interrupt approach?
->Inter process communication techniques?
->Threads, Fork and clone?
->


..................................................................................................................................................................


Global Logic:
->Device driver projects
->write a efficient programme to set a particular bit in a givne number?
->Difference between typedef and #define?
->Callback functions?
->Intterupt top half and bottom half?
->USb driver project?
->
..................................................................................................................................................................


General:
Sizeof operator without using sizeof operator?
Search the middle element in a given list?
Ethernet driver how a packet get transferred in Ethernet drivers?


System call flow?
blocking and non-blocking USB calls
How and steps a C programme executes.,
How the programme is loaded in execution space


1.C prog Compilation steps
2.C prog memory layout.
3.Diff b/w string and string lit
4.What actually preprocessor does
5.
..................................................................................................................................................................


WIPRO:

->How Memory Management works in KERNEL?(In total about Kernel Memory management)
->Inter Process communication techniques?
->Spin locks working?
->Favorite topics in kernel?
->Tell about interrupts handling in kernel?
->When a interrupt is handled whether that specific interrupt is disabled or not? If disabled why ? if not disabled why not disabled?
->When a interrupt is handled tell whether all interrupts are disabled or not ?if yes why ?if no why?
->As device driver developer when you will you disable or enable particular interrupt or all interrupts>
->What is the functionality of save_interrupts?
->what is the first function called when interrupt is handled?
->Have you heard about “Handle_interrupt” ?
->What are the possible ways that memory leaks can happen in a programme ?(Apart from allocation and not freeing )
-> How a memory leak can happen in a linked list?
->How a Reception of packet performed in a Ethernet device driver? (Explain from starting to reception of packet)
->How can you rate yourself in KERNEL?
..................................................................................................................................................................

HARMAN

->How can you avoid accessing of an array beyond its limits?
->Whether an exception or normal operation when an array is accessed beyond its limits?
..................................................................................................................................................................

General Q's:
->What are types of function(Callback,Recursion ....)?
->what is advantage and disadvantages of each function type?
->Implementation example for each function type?
->What are different searching algos expalin each one ,implement any one?
->link for programmes of palidrome ,fibonaci,searching etc.
http://study-for-exam.blogspot.in/search/label/C%20programming#.VHUuByWoLFY



..................................................................................................................................................................

WIPRO:

->How Memory Management works in KERNEL?(In total about Kernel Memory management)
->Inter Process communication techniques?
->Spin locks working?
->Favorite topics in kernel?
->Tell about interrupts handling in kernel?
->When a interrupt is handled whether that specific interrupt is disabled or not? If disabled why ? if not disabled why not disabled?
->When a interrupt is handled tell whether all interrupts are disabled or not ?if yes why ?if no why?
->As device driver developer when you will you disable or enable particular interrupt or all interrupts>
->What is the functionality of save_interrupts?
->what is the first function called when interrupt is handled?
->Have you heard about “Handle_interrupt” ?
->What is Memory Leak?
->What are the possible ways that memory leaks can happen in a programme ?(Apart from allocation and not freeing )
-> How a memory leak can happen in a linked list?
->How a Reception of packet performed in a Ethernet device driver? (Explain from starting to reception of packet)
->How can you rate yourself in KERNEL?
->Points you will inquiry when a driver from one platform to be ported to another platform?
->How do you do debug?
->Have analyzed kernel panic code dump(what all data it dumps and what do you understand from it)
->What are storage classes available ?what are the scenarios the specific storage class is used?
->Are you comfortable with pointers, linked list and Queues?
->What is memory mapping ?How kernel knows to which memory location the devices are mapped?
->


..................................................................................................................................................................


HARMAN
->How can you avoid accessing of an array beyond its limits?
->Whether an exception or normal operation when an array is accessed beyond its limits?
..................................................................................................................................................................
Aricent :
1.What is Function Pointer?
2.What is Call back function?
3.How Call Function works?
4.What is the clock frequency used in your I2C driver designed?
5.What is the start bit condition in I2C?
6.How I2C protocol works?
7.What are different speeds the I2C had?
8.What is the path of your driver inside kernel?
9.Can interrupts sleep?why?
10.Types of interrupts?
11.What are the function names for the driver you designed?
12.How the master knows what is the start condition ?
13.while in between I2C communication what happens if clocks happends to be dragged low which is not as per i2c standard?
14.What if the slave device is not responding or no acknowledge bit is sent by slave device?
15.What is the difference between kmalloc and vmalloc?
16.how to get physically contiguousness memory allocation if kmalloc is giving logical contiguousness allocations?
17.How do a driver get registered to kernel?
18.What actually happens while interrupt occurs exactly explain in terms of context switching
,what happens to the current running process?
19.As their no code written to do  context saving when a interrupt happens in any of the functions then  which is responsible in doing this context saving and switching context?
20.How "Make" is performed in compiling a module?
21.What is VOLATILE keyword?
22.Write a program to perform a string copy without using string library functions?
..................................................................................................................................................................

Wipro/ERRICSON:
1.What is the difference between Linux and RTOS ?and Reason why linux is not Real time?
2.How User space buffer can be accessed from kernel level and viceversa?
3.How to debug different threads in GDB?
4.Comfort level in Assembly level language?
5.What are the kernel structures and which kernel structure used in device driver development?
6.What is interrupt nesting, How IRQ priority handled?
7.What is SERDES?
8.How do you pass data between kernel modules?
9.What are different embedded design patters?
10. Memmory Mapping, synchronization Techiniques , Interrupts , Mutes , Interprocess_communication?
..................................................................................................................................................................

Ericsson :
1.Explain about any Device Driver project your good at?
2.Can call back functions or Recursive call can be made in asynchronous events?
3.What is stack overflow?
4.Difference between processes and Threads?
5. How can you corrupt STACK?
6.What are the issues faced while developing driver projects?
7.What are your strengths?
8.Rate your self in C?
9.What is Blocking and Pooling?Diff ?

 ..................................................................................................................................................................

UTC Aerospace:
1.Storage classes in C
2.What is pointer
3.What is volatile
4.What is Structure
5.What is Class in C++
6.Difference between structure and class
7.What is Partition on DO-178B document?
8.What is Real time system
9.What are types of real time systems
10.what happens in Real time system if specific task in not executed at specified time?
11.What is Dead code and Deactivated code and diff b/w them?
12.Level of software as per DO-178B?
..................................................................................................................................................................
Aricent:
1.Explain about USB device Dreiver?
2.Explain about I2C Driver?
3.How USB driver is registration mechanisam?
4.How to pass a two dimentional array to other fucntion?
5.Syntax of main with arguments?
..................................................................................................................................................................

Global Edge:
C:
1.Difference between string and string literal
2.compilation steps of a C programme
3.Memmory allocation of a c programme
4.Why uninitialized data is placed in uninitialized data segment?

Device drivers project:
1.More questions on Camera device driver project?and more Questions specific to project?
..................................................................................................................................................................
SMART_PLAY
1.How do find wheter a processor is Big Endian/Little Endian?
2.Intreputs,Bottom half.
3.Memmory allocation using Kmalloc with FLAGS?

..................................................................................................................................................................
synapse-da
Device Drivers

Camera Project

How do you get JPEG image from CAM

Diff Semaphore & Mutex

Diff Insmod and Modprobe

Diff Binary sema and Muex

What are the precautions to be take care in ISR routine.

Diff Process and Thread

How to create a Major and Minor Numbs dynamically.

Diff b/w char ,Block and Network drivers

When Kernal had a previlage to write to any memory location then why do we need copy_to_user and copy_from_user functions.

What is Dead lock scenario.

Diff Kmalloc and Vmalloc



 ..................................................................................................................................................................

C:

Volatile

Diff array and Linked List.

Storage classes and difference.

Usage of Static data members.

While and For loop efficiency and which is better.

How to find a number is divisible by 4 without using mathematical operators

Diff static library dynamic library and shared library

Diff inline and macro.

Diff malloc and calloc


..................................................................................................................................................................
HARMAN:
1.How to create buffers in Kernel?
2.What is the difference b/w kmalloc and vmalloc
3.How buffer is copied to user level
4.Explain working of interrupts
5.Expalin about the projects mentioned in CV?
6.How to search for a specific nth-node in a given unknown number of nodes in a linked list?
7.How to determine the size of structure with out using "sizeof" operator?
8.What is memory leak
9.Fucntion Signature of registering Interrupt handler?aned Flags used while requesting IRQ?
10.Explain Shared memory ,Message Queue Synchronization techniquies in Linux
..................................................................................................................................................................
Unknown Consultancy:
Volatie variable:with example

Volatile is qualifier applied  while  declaring of an variable.

Volatile keyword tells the compiler that  variable can be modified from outside source without the action of the code the compiler finds nearby.

Volatile int a,

Int volatile b,

Int volatile *foo-> Pointer  pointing to a volatile integer

Volatile int *foo;



Register variable



Unions with practical example

Malloc and its disadvantages

Int *const p and const *int p meaning

Endianness determination

Diff between array and linkedlist

Bitoperations : how do u set a bit?

..................................................................................................................................................................

Mettasoft--Graphite semi
1.What happens when insomd is performed?
2.How system call is executed?
3.What all stpes involved while a C programme .exe is created?
4.How can you make part of driver code is allowed to be executed and not executed depending upon condition?
5.How Intrrupts are executed?.
6.Different synchronization techniquies ?how do you chose the best sync mechanisam fits the scenario?
7.What are all the Kernel APIs used in you driver programming?
8.In a given list of elements how to find the middle element?
   condition no count is available
   condition not known how many elements present
9.How the data integrity check is done in case of network packets or I2c driver communication?
10.How a packet is sent in ethernet driver?

..................................................................................................................................................................

  Consultancy:
1. A = 10000000000

  B = 0110

  i = 2

  j=  6

o/p =10000001100??


 2.how to implement own malloc function.

3.how to delete duplicate node in single linked list.

4.what is the entry points in kernel?

5.how to create a major number dynamically?

6. ISR descriptor Table


7.spin_lock_bh() diff spin_lock_irq()?

8. Do_irq?

9. Static Drivers vs Dynamic Driver?

10.Diff SLAB and Vmalloc

11.copy_to_user and copy_from_user?

12. how to divided critical work and non critcal work based on top half and bottom Half

13.int arr[]{9,9,9}

    o/p = {1,1,1,0}


..................................................................................................................................................................

Global logic interview questions


What is system call? How to check what are the system calls used?
What is linux kernel module programming?
What is boot loader?
What ioctl?
How to write own module?

Programming questions:
Printing * in triangle shape , input is number lines to print
       *
   * * *
* * * * *

Delete a node in the linked list and the node to be deleted is the one that is passed to the function, no head reference is given

Print nth node from the end in a single linked list

String is recursive or not, s1 = “abcd” , s2 is the user input – s2 can be cdab, dbca
..................................................................................................................................................................
SONY india questions

1.       How to speed up the memcpy, have you seen memcpy code in kernel ?
2.       How to build the vmlinux image
3.       How to debug crash, what is the first line you see when you see a crash/oops message, explain crash console
4.       How Ethernet device is registered
5.       Have you checked linux lib code
6.       How to debug kernel code
7.       What is x86 and what are the registers used
8.       How to write a makefile to build a customized kernel
9.       More questions on debug and crash point related
10.   Struct test { int a; int b; };  Assume you don’t know the contents of structure, and you have the base address of test strucuture alone, how to do access the data inside it ??
11.   How to register, allocate NIC.
12.   How does system call works, in detail.
13.   ARM or x86 archiecture
14.   Step by step of writing a device driver structure, lot of cross questions, not a straight forward question
15.   /proc file system, how to create it
16.   ARM
17.   In-depth of the projects worked so far… 

Few more Questions @

http://linuxinterviewpreperation.blogspot.in/2013/01/linux-kernel-and-device-drivers.html

..................................................................................................................................................................

References:
1. Steps involved in creating a C programme executable
http://www.thegeekstuff.com/2011/10/c-program-to-an-executable/

2.Re-entrant functions and Thread safe is explained well at :
http://www.thegeekstuff.com/2012/07/c-thread-safe-and-reentrant/

Link List Questions

    Ques 1: How do you reverse a singly linked list? How do you reverse a doubly linked list? Write a C program to do the same. [Answer]
    Ques 2: Given only a pointer to a node to be deleted in a singly linked list, how do you delete it. [Answer]
    Ques 3: How do you sort a linked list? Write a C program to sort a linked list. [Answer]
    Ques 4: How to declare a structure of a linked list? [Answer]
    Ques 5: Write a C program to implement a Generic Linked List. [Answer]
    Ques 6: How do you reverse a linked list without using any C pointers? [Answer]
    Ques 7:How would you detect a loop in a linked list? Write a C program to detect a loop in a linked list. [Answer]
    Ques 8:How do you find the middle of a linked list? Write a C program to return the middle of a linked list. [Answer]
    Ques 9:If you are using C language to implement the heterogeneous linked list, what pointer type will you use? [Answer]
    Ques 10: How to compare two linked lists? Write a C program to compare two linked lists. [Answer]
    Ques 11: How to create a copy of a linked list? Write a C program to create a copy of a linked list. [Answer]
    Ques 12: Write a C program to free the nodes of a linked list. [Answer]
    Ques 13: Can we do a Binary search on a linked list? [Answer]
    Ques 14: Write a C program to return the nth node from the end of a linked list. [Answer]
    Ques 15: How would you find out if one of the pointers in a linked list is corrupted or not? [Answer]
    Ques 16: Write a C program to insert nodes into a linked list in a sorted fashion. [Answer]
    Ques 17:Write a C program to remove duplicates from a sorted linked list. [Answer]
    Ques 18: How to read a singly linked list backwards? [Answer]
    Ques 19: How can I search for data in a linked list? [Answer]
    Ques 20: What is the difference between a linked list and Array?
    Ques 21: Implement a linked list. Why did you pick the method you did?
    Ques 22: Implement an algorithm to sort a linked list. Why did you pick the method you did? Now do it in O(n) time.
    Ques 23: Given two sorted linked lists, write a function to merge them into one.
    Ques 24: Delete an element from a doubly linked list.
    Ques 25: Find the nth node from the end of a singly link list in a single pass.

 
C Functions Implementation Questions

    Ques 1: Write your own C program to implement the atoi() function. [Answer]
    Ques 2: Implement the memmove() function. What is the difference between the memmove() and memcpy() function? [Answer]
    Ques 3: Write C code to implement the strstr() (search for a substring) function. [Answer]
    Ques 4: Write your own printf() function in C. [Answer]
    Ques 5: Implement the strcpy() function. [Answer]
    Ques 6: Implement the strcmp(str1, str2) function. [Answer]
    Ques 7: Implement the substr() function in C. [Answer]
    Ques 8: Write your own File copy() function. [Answer]
    Ques 9: Write C programs to implement the toupper() and the isupper() functions. [Answer]
    Ques 10: Write a C program to implement your own strdup() function. [Answer]
    Ques 11: Write a C program to implement the strlen() function. [Answer]
    Ques 12: Write your own strcat() function. [Answer]
    Ques 10: Write a C program to implement your own strdup() function. [Answer]
    Ques 11: Write a C program to implement the strlen() function. [Answer]
    Ques 12: Write your own strcat() function. [Answer]

  
C Programming Questions
 

    Ques 1: Right a program to implement malloc.
    Ques 2: Write a C program to swap two variables without using a temporary variable . [Answer]
    Ques 3: What is the 8 queens problem? Write a C program to solve it. [Answer]
    Ques 4: Write a C program to print a square matrix helically. [Answer]
    Ques 5: Write a C program to reverse a string. [Answer]
    Ques 6: Write a C program to reverse the words in a sentence in place. [Answer]
    Ques 7: Write a C program generate permutations. [Answer]
    Ques 8: Write a C program to calculate pow(x,n). [Answer]
    Ques 9: Write a C program which does wildcard pattern matching algorithm. [Answer]
    Ques 10: How do you calculate the maximum subarray of a list of numbers? [Answer]
    Ques 11: How to generate fibonacci numbers? How to find out if a given number is a fibonacci number or not? Write C programs to do both. [Answer]
    Ques 12: Solve the Rat In A Maze problem using backtracking. [Answer]
    Ques 13: What Little-Endian and Big-Endian? How can I determine whether a machine's byte order is big-endian or little endian? How can we convert from one to another? [Answer]
    Ques 14: Write C code to solve the Tower of Hanoi problem. [Answer]
    Ques 15: Write C code to return a string from a function. [Answer]
    Ques 16: Write a C program which produces its own source code as its output. [Answer]
    Ques 17: Write a C progam to convert from decimal to any base (binary, hex, oct etc...). [Answer]
    Ques 18: Write C code to check if an integer is a power of 2 or not in a single line? [Answer]
    Ques 19: Write a C program to find the GCD of two numbers. [Answer]
    Ques 20: Finding a duplicated integer problem. [Answer]
    Ques 21: Write code to remove duplicates in a sorted array. [Answer]
    Ques 22: How do you initialize a pointer inside a function? [Answer]
    Ques 23: Write C code to dynamically allocate one, two and three dimensional arrays (using malloc()). [Answer]
    Ques 24: How would you find the size of structure without using sizeof(). [Answer]
    Ques 25: Write a C program to multiply two matrices. [Answer]
    Ques 26: Write a C program to check for palindromes. [Answer]
    Ques 27: Write C code to implement the Binary Search algorithm. [Answer]
    Ques 28: Write code to add two polynomials. [Answer]
    Ques 29: Write a program to add two long positive numbers (each represented by linked lists). [Answer]
    Ques 30: How do you compare floating point numbers? [Answer]
    Ques 31: Is there something we can do in C but not in C++? [Answer]
    Ques 32: How to swap the two nibbles in a byte ? [Answer]
    Ques 33: How to scan a string till we hit a new line using scanf()? [Answer]
    Ques 34: How do you get the line numbers in C? [Answer]


1)Memory layout of c programs or process ?
2)What are different storage classes in c?
3)what is extern and static ,auto,register ?
what dangling pointer problem and how to resolve it
how to access array elements without using index and incrementing  pointer variable
diff b/w strcpy and memcpy
what is pointer to function
what is diff b/w passing argument array as a and &a
9)reverse of a linked list
10)What bit masking and unmasking
11) what is endianness in c ?
12)What is diff b/w macro and constant
13)can we declare static variable in header file ?
14)How can we merge of  two linked lists?
15)Write srtcpy logic
1.  how to find the  power of 2  ?



    What is mknod and it's usage ?
    What is Major number and it's usage ?
    What is Major number and it's usage ?
    Can we have same major number for more than one device file ?
    What is minor  number and it's usage ?
    What is range of major and minor numbers?
    What is use of  dev_t type ?
    How to retrieve major and minor number from dev_t type ?
    How can i use my own major and minor number for a device file ?
    In how many ways we can allocate device number ?
    How can we allocate device number statically ?
    How can we allocate device number dynamically ?
    How can we  Free  Device Numbers ?
    How to see  statically assigned major number ?
    What is the disadvantage of dynamic device number assignment ?
    Where can we write allocation and freeing of device number's code ?

 Interview Experience
I am sharing here some of the interview questions that I faced in this post.

C
1. What is volatile and why is it used?
2. What is the necessity for a const qualifier?
3. What is little Endian and big Endian? Write a code to convert little endian to big endian and vice versa.
4. Write a single line macro to do the above conversion
5. Declare a structure.
6. Structure has been declared with int; char; int; char members in same order. What is the size allocated for it in memory? Is there a way to optimise it?
7. Implement a stack using linked list.
8. String copy without using default functions from string.h
9. How to toggle a bit in a number?
10. Convert decimal to binary
11. Verify if a linked list is a palindrome or not.
12. What will happen if there is
main()
{
printf("Hello");
while(1);
}
13. What is the difference between char * const ptr, char const * ptr and const char * ptr??
14. What are preprocessor macros?
15. What is compilation and linking?
16. Is a global variable extern?
17. Can a static variable be made extern?
18. What are static variables and static functions?
19. Is a MACRO advantageous or a function?
20. What is difference between macro and inline function?
21. Reverse a linked list.
22. Find the middle element of linked list in a single traversal.
23. What are the differences between malloc and calloc?
24. Where are static and global variables stored in the memory?
25. How can a multi threaded application be written?

Linux
1. What is a kernel?
2. What is difference between user space and kernel space?
3. Why kernel mode of operation is required?
4. What happens when a system call is made?
5. How a kernel can be live patched? (Ksplice)
6. sed related, awk related question
7. how to write a module?
8. How to write a system call? steps
9. How the boot time of an embedded machine can be reduced?
10. How are embedded distribution different from regular distributions?
11. rpm and all its options
12. patch and all its options
13. How to debug a shell script/binary?
14. what are different mechanisms of inter process communications?
15. What is procfs and sysfs?
16. The ways to set ip for an interface.
17. What all kind of tests LTP covers?
18. What is the need of asmlinkage?
19. How many arguments can be passed to a system call?
20. yocto related questions.

Questions regarding both Clients and Servers (TCP/SOCK_STREAM) [/size]

How can I tell when a socket is closed on the other end?
What's with the second parameter in bind()?
How do I get the port number for a given service?
If bind() fails, what should I do with the socket descriptor?
How do I properly close a socket?
When should I use shutdown()?
Please explain the TIME_WAIT state.
Why does it take so long to detect that the peer died?
What are the pros/cons of select(), non-blocking I/O and SIGIO?
Why do I get EPROTO from read()?
How can I force a socket to send the data in its buffer?
Where can I get a library for programming sockets?
How come select says there is data, but read returns zero?
Whats the difference between select() and poll()?
How do I send [this] over a socket?
How do I use TCP_NODELAY?
What exactly does the Nagle algorithm do?
What is the difference between read() and recv()?
I see that send()/write() can generate SIGPIPE. Is there any advantage to handling the signal, rather than just ignoring it and checking for the EPIPE error?
After the chroot(), calls to socket() are failing. Why?
Why do I keep getting EINTR from the socket calls?
When will my application receive SIGPIPE?
What are socket exceptions? What is out-of-band data?
How can I find the full hostname (FQDN) of the system I'm running on?
How do I monitor the activity of sockets?
	
Writing Client Applications (TCP/SOCK_STREAM)
* How do I convert a string into an internet address?
* How can my client work through a firewall/proxy server?
* Why does connect() succeed even before my server did an accept()?
* Why do I sometimes lose a server's address when using more than one server?
* How can I set the timeout for the connect() system call?
* Should I bind() a port number in my client program, or let the system choose one for me on the connect() call?
* Why do I get "connection refused" when the server isn't running?
* What does one do when one does not know how much information is comming over the socket? Is there a way to have a dynamic buffer?
* How can I determine the local port number?

Writing Server Applications (TCP/SOCK_STREAM)

* How come I get "address already in use" from bind()?
* Why don't my sockets close?
* How can I make my server a daemon?
* How can I listen on more than one port at a time?
* What exactly does SO_REUSEADDR do?
* What exactly does SO_LINGER do?
* What exactly does SO_KEEPALIVE do?
* How can I bind() to a port number < 1024?
* How do I get my server to find out the client's address / hostname?
* How should I choose a port number for my server?
* What is the difference between SO_REUSEADDR and SO_REUSEPORT?
* How can I write a multi-homed server?
* How can I read only one character at a time?
* I'm trying to exec() a program from my server, and attach my socket's IO to it, but I'm not getting all the data across. Why?

Writing UDP/SOCK_DGRAM applications

* When should I use UDP instead of TCP?
* What is the difference between "connected" and "unconnected" sockets?
* Does doing a connect() call affect the receive behaviour of the socket?
* How can I read ICMP errors from "connected" UDP sockets?
* How can I be sure that a UDP message is received?
* How can I be sure that UDP messages are received in order?
* How often should I re-transmit un-acknowleged messages?
* How come only the first part of my datagram is getting through?
* Why does the socket's buffer fill up sooner than expected?
	
Advanced Socket Programming
	
	* How would I put my socket in non-blocking mode?
* How can I put a timeout on connect()?
* How do I complete a read if I've only read the first part of something, without again calling select()?
* How to use select routine
* RAW sockets
* Restricting a socket to a given interface
* Receiving all incoming traffic through a RAW-socket?
* Multicasting
* Getting IP header of a UDP message
* To fork or not to fork?
* Connect with timeout (or another use of select() )

Bugs and Strange Behaviour
* send() hangs up when sending to a switched off computer
* Error when using inetd

Connect with timeout (or another use for select() )
To fork or not to fork?
Is it possible to receive all the incoming packets ignoring target port, source address/port and seq/ack-numbers, through a raw-socket? 
How do I restrict a socket to a specific inteace i.e. that it only listens and accepts from the given interface ? 
How would a socket using the SOCK_RAW protocol be used, and what, if any, advantages would it have over SOCK_DGRAM or SOCK_STREAM protocols ?
How to use select call for multiplexing ?
How can I put a timeout on connect()?
How would I put my socket in non-blocking mode?
How to be sure that UDP messages are received in order ?
How do I monitor the activity of sockets?
How can I find the full hostname (FQDN)?
What are socket exceptions? What is out-of-band data?
how to do handling SIGPIPE signal or EPIPE errno ?
Whats the difference between select() and poll()?
Where can I get a library for programming sockets?
Pros/cons of select(), non-blocking I/O and SIGIO ?
How do I get the port number for a given service?
How to tell when a socket is closed on the other end?
How do I convert a string into an internet address?
How can my client work through a firewall/proxy server ?
How can I determine the local port number?
How to find out the client's address/hostname ?
How should I choose a port number for my server?
Difference between SO_REUSEADDR and SO_REUSEPORT ?
How can I write a multi-homed server?
When should I use UDP instead of TCP?

    Linux Kernel In short
    What is a Linux Device Driver Model ?
    How to Pass Command Line Arguments to a Kernel Module?
    What are the Possible Task States ?
    What is a Loadable Kernel Module?
    Monolithic and Micro Kernel
    Why do we need two bootloaders viz. primary and secondary?
    Given a pid, how will you distinguish if it is a process or a thread ?
    What is memory leak?
    What is a linux kernel ? isit a process or thread?
    How function pointers are shared across different processes? using which IPCs?
    What are the Synchronization techniques used in Linux Kernel?
    On x86-32 Linux, at which address the code segment of the program and stack starts?
    Why Kernel Code running in interrupt context cannot sleep?
    How does User Space memory Layout look like?
    How will the User Space mapping look like when our RAM is less than 896 MB?
    How will the Kernel Space mapping look like when our RAM is less than 896 MB?
    Explain the module loading in Linux.
    How does Linux Manage memory?
    When should one use Polling and when should one use Interrupts?
    What is the difference between IRQ and FIQ in case of ARM?
    Where are macros stored in the memory?
    What is a kernel Panic?
    What is OOPS in Linux Kernel?
    How to avoid memory leak in Linux?
    What is a buss error? What are the common causes of bus error?
    What is a device tree in Linux?
    How function pointers are shared across different processes? using which IPCs?
    What is the difference between a Mutex and a Semaphore?
    What are the important applications of touch command in linux?
    How a system call is executed in X86 architecture?
    How is a system call executed in ARM architecture?
    Compare I2C and SPI protocols
    What is a callback function?

Supported tests by the watchdog daemon to check the system status:

    Is the process table full?
    Is there enough free memory?
    Are some files accessible?
    Have some files changed within a given interval?
    Is the average work load too high?
    Has a file table overflow occurred?
    Is a process still running? The process is specified by a pid file.
    Do some IP addresses answer to ping?
    Do network interfaces receive traffic?
    Is the temperature too high? (Temperature data not always available.)
    Execute a user defined command to do arbitrary tests.
    Execute one or more test/repair commands found in /etc/watchdog.d. These commands are called with the argument test or repair

Counter: Counts and indicates the number of signals (events) input at any interval.
Timer: Counts the number of signals input at a constant interval to indicate the elapsed time. 

A watchdog timer is a piece of hardware, often built into a microcontroller that can cause a processor reset when it 
judges that the system has hung, or is no longer executing the correct sequence of code.

A watchdog timer is a piece of hardware that can be used to automatically detect the system problem like fault condition, hang and send a trigger pulse to reset the system.
 You also can say it is a failsafe mechanism that can sense if a system stop functioning.
 what is the difference between hardware watchdog and software watchdog ?
 How can a CPU dynamically change its clock frequency?
 
My Intel CPU changes clock speed depending on the usage, but how does it decide what clock speed to run at?
Is the clock speed determined by the OS software using an algorithm, or is it hardware based? 
Is it dependent on the # of interrupts? The cache turnover? Does the CPU itself set its own clock? 
Or does a separate controller set it? Or software?

How fast cpu clock do you need to control camera?	
What exactly will the CPU be doing? Image capture? Image processing? Communications? 
Will image processing be performed on an entire captured image or on streamed video on a pixel-by-pixel basis? How complex would the image processing be? 
If you haven't figured it out, your question is impossible to answer in it's current form.

What is clock cycle, machine cycle, instruction cycle in a microprocessor?
How does a CPU change frequency?
The clock that the CPU uses does not come directly from the crystal oscillator in the motherboard ! 
The (fixed frequency) clock from the crystal oscillator is first fed to a system called a Phase Locked Loop or PLL.
The simplest PLLs can only multiply the fixed frequency clock from the crystal oscillator so if the crystal oscillator runs at 
40 MHz then such a PLL can generate 80 MHz, 120 MHz, 160 Mhz, etc. Basically n times the crystal clock frequency.

 Is there a physical limit to CPU speed? How high is it?
What is the highest CPU speed reached so far?

Important question:
Operating System Interview Questions:
Kernel Synchronization what are the differences between mutex and semaphore?
What is a race condition and how to avoid a race condition?
What is a critical region?
What are atomic operations?
RTOS:
What are the differences between general purpose OS and and RTOS?
What are the characteristics of an RTOS?
What is the difference between a hard real time system and a soft real time system?
What is priority inversion and how to solve that problem?
What is priority inheritance?
Process management:
1) how to manipulate the current process
2) what are kernel thread.
3) how threads are implemented in linux kernel.
4) What are different state of a process in lunix.
5) what is difference between process and thread.
6) generally what resources are shared between threads.
7) what is process descriptor
8) what is task_struct.
9) what is therad_info structure for.
10) what was the need of thread_info structure.
11) difference betwen fork() and vfork()
12) what is process context.
13) what is zombie process.
14) how parent less process is handles in linux.
 Process Scheduling
1) what is process scheduling
2) what is cooperative multitasking and pre-emptive multitasking.
3) what is yielding.
4) what is limitation of cooperative multitasking.
5) I/O bound versus Processor bound process.
6) what is process priority.
7) What kind of priority is maintained in linux.
8) what is nice value.
9) what is virtual run time.
10) what are the available scheduling classes in linux.
11) which type os scheduling used in linux.
12) how next task is picked for scheduling.
13) what is scheduler entry point in linux.
14) what is waitqueus.
15) How context switching is handled in linux.
16) what is user preemption and kernel preemption
 Syscalls:
1) what is syscalls.
2) how system calls are implemented in linux.
3) what happens when process in userspace calls a syscall.
4) what is the need of verifying parameter in definition of syscall.
5) what is system calls context.
6) why it is not recommended to writing new syscall.
 
Interrupts and interrupt handlers
1) what is interrupt
2) what is interrupt handler or ISR.
3) what is top halves and bottom halves.
4) How interrupt is registered.
5) what are different interrupt handler flags.
6) How interrupt are freed.
7) what are the considerations needs to taken care while writing interrupt handler.
8) what are shared handlers.
9) what is interrupt context.
10) how to disable and enable interrupts.
11) what are different bottom halves techniques in linux.
12) what is tasklets , softirq and workqueus and difference among them.
13) when to choose which bottom halves.
14) how to implements softirq , tasklets and workqueus.
15) how to schedule tasklet.
16) what is ksoftirqd.
17) How to disable bottom halves.
18) How locking between bottom halves handled.
19) Why we need preemption.
Explain about the interrupt mechanims in linux?
What are the APIs that are used to register an interrupt handler?
How do you register an interrupt handler on a shared IRQ line?
Explain about the flags that are passed to request_irq().
Explain about the internals of Interrupt handling in case of Linux running on ARM.
What are the precautions to be taken while writing an interrupt handler?
Explain interrupt sequence in detail starting from ARM to registered interrupt handler.
What is bottom half and top half.
What is request_threaded_irq()
If same interrupts occurs in two cpu how are they handled?
How to synchronize data between 'two interrupts' and 'interrupts and process'.
How are nested interrupts handled?
How is task context saved during interrupt.
What are the considerations needs to taken care while writing interrupt handler ?
How to disable and enable interrupts ?



Bottom-half Mechanisms in Linux
What are the different bottom-half mechanisms in Linux?
Softirq, Tasklet and Workqueues
What are the differences between Softirq/Tasklet and Workqueue? Given an example what you prefer to use?
When to choose which bottom halves ?

Softirq is guaranteed to run on the CPU it was scheduled on, where as tasklets don’t have that guarantee. 
The same tasklet can't run on two separate CPUs at the same time, where as a softirq can. 
When are these bottom halfs executed?
Explain about the internal implementation of softirqs?
Explain about the concurrent work queues.
How to schedule tasklet or bottom half ?
How to disable bottom halves ?
What is ksoftirqd ?
How locking between bottom halves handled ?


Kernel Synchronization:
1) what is synchronization
2) what is critical section
3) what is race condition.
4) why we need to take care of synchronization
5) what is various synchronization techniques in linux.
6) what is deadlocks.
7) what is atomic operations.
8) what is spin locks.
9) what is reader-writer spin lock.
10) what is semaphore.
11) what is binary semaphore.
12) what is difference between semaphore and spin lock.
13) when to choose what among spin lock and semaphore.
14) what is difference between semaphore and mutex.
15) what is preemption disabling and what is the use of this.
Why do we need synchronization mechanisms in Linux kernel?
What are the different synchonization mechanisms present in Linux kernel?
What are the differences between spinlock and mutex?
What is lockdep?
Which synchronization mechanism is safe to use in interrupt context and why?
Explain about the implementation of spinlock in case of ARM architecture.
Explain about the implementation of mutex in case of ARM architecture.
Explain about the notifier chains.
Explain about RCU locks and when are they used?
Explain about RW spinlocks locks and when are they used?
Which are the synchronization technoques you use 'between processes', 'between processe and interrupt' and 'between interrupts'; why and how ?
What are the differences between semaphores and spinlocks?

Process Management and Process Scheduling
What are the different schedulers class present in the linux kernel?
How to create a new process?
What is the difference between fork( ) and vfork( )?
Which is the first task what is spawned in linux kernel?
What are the processes with PID 0 and PID 1?
PID 0 - idle task and PID 1 - init .
How to extract task_struct of a particular process if the stack pointer is given?

Timers and Time Management:
1) what is tick rate and jiffies.
2) what are the various way of applying delay in linux.
3) what is blocking and non blocking call
4) what is Real time clock (RTC).
5) how busy looping is implemented in linux.
What are jiffies and HZ?
What is the initial value of jiffies when the system has started?
Explain about HR timers and normal timers?
On what hardware timers, does the HR timers are based on?
How to declare that a specific hardware timers is used for kernel periodic timer interrupt used by the scheduler?
How software timers are implemented?

Memory management:
1) how memory is managed in linux.
2) what are pages.
3) what are different memory zones in linux.
4) how to allocated pages.
5) how to freeing page.
6) what us kmalloc and what are action modifier we can pass while using kmalloc.
7) what is zone modifier in linux.
8) what is vmalloc
Virtual file system
1) what is virtual file system and what is the need of it in linux.
2) are are different object types in VFS.
3) what are the operations possible on inode and superblock objects.
Linux Memory Management 
What are the differences between vmalloc and kmalloc? Which is preferred to use in device drivers?
What are the differences between slab allocator and slub allocator?
What is boot memory allocator?
How do you reserve block of memory?
What is virtual memory and what are the advanatages of using virtual memory?
What's paging and swapping?
Is it better to enable swapping in embedded systems? and why?
What is the page size in Linux kernel in case of 32-bit ARM architecture?
What is page frame?
What are the different memory zones and why does different zones exist?
What is high memory and when is it needed?
Why is high memory zone not needed in case of 64-bit machine?
How to allocate a page frame from high memory?
In ARM, an abort exception if generated, if the page table doesn't contain a virtual to physical map for a particular page. How exactly does the MMU know that a virtual to physical map is present in the pagetable or not?
 
Process Address Space:
1) what is process address space.
2) what is memory descriptor in linux and which structure represents it.
3) how to allocate and destroy a memory descriptor
4) does kernel thread has any association with mm_struct.
5) what is VMA and what are various VMA operations possible in linux kernel.
6) how to manipulate memory area in linux.
7) what mmap and do_mmap().
8) what is page tables.
 
Linux Device Driver :
Explain about the Linux Device Model (LDM)?
Explain about about ksets, kobjects and ktypes. How are they related?

1) What is device driver and what is the need of it.
2) what are different kind of devices.
3) what is module in linux.
4) how mudules are loaded in linux.
5) difference between insmod and modprobe.
6) how parameters are shared between driver modules.
7) what are IOCTLS.
8) what is syscalls.
9) what are the benefits of syscalls.
10) how character driver is registered in linux.
11) what is init and exit function of a driver.
12) how and when init and exit function of driver get called.
13) what is probe function.
14) when probe is get called.
15) what is platform devices.
16) what is device tree.
17) what are the benefits of device tree over board files.
18) what is sysfs and procfs.
19) how logs are printed in linux kernel and what are the logs level available in linux.
20) what is copy_to_user and copy_from_user.
21) what do you mean by kernel configuration and what are the various way of configuring kernel.
22) what is menuconfig.
23) what is ioremap
24) what is seagmentation fault.
25) what are the various ways od debugging linux kernel.
26) how linux kernel boots.
27) what is zimage and bzimage.
28) what are different booting arguments in linux.
29) how parameter are passed from boot loader to kernel.
30) what is ATAGS.
31) from which file kernel execution starts.
32) what is bootloader.
33) what is primary and secondary bootloader.
34) why we need two bootloader.
35) difference between poll and select.
36) what is priority inheritance and priority inversion.
37) what are different type of kernel.
38) what is DMA.
39) what is cache coherency.
40) what is copy on write.
41) what is highmem and lowmem.
42) what happens if we pass invalid address from userspace by using ioctls.
43) what are different ipc mechanism in linux.
44) what are sockets.
45) how page fault is handled in linux.
46) difference between memory based io and port based io.
47) what is I2c and SPI.
48) how physical to virtual translations works in linux.
49) what is thrashing, segmentation and fragmentation.
50) what is preempt_count and what is the need of that.
Linux Kernel Modules:
How to make a module as loadable module?
How to make a module as in-built module?
Explain about Kconfig build system?
Explain about the init call mechanism.
What is the difference between early init and late init?
Linux Kernel Debugging
What is Oops and kernel panic?
Does all Oops result in kernel panic?
What are the tools that you have used for debugging the Linux kernel?
What are the log levels in printk?
Can printk's be used in interrupt context?
How to print a stack trace from a particular function?
What's the use of early_printk( )?
Explan about the various gdb commands.

Miscellaneous:
How are the atomic functions implemented in case of ARM architecture?
How is container_of( ) macro implemented? 
Explain about system call flow in case of ARM Linux.
What 's the use of __init and __exit macros?
How to ensure that init function of a partiuclar driver was called before our driver's init function is called (assume that both these drivers are built into the kenrel image)?
What's a segementation fault and what are the scenarios in which segmentation fault is triggered?
If the scenarios which triggers the segmentation fault has occurred, how the kernel identifies it and what are the actions that the kernel takes?

Power Management in Linux:
Explain about cpuidle framework.
Explain about cpufreq framework.
Explain about clock framework.
Explain about regulator framework.
Explain about suspened and resume framwork.
Explain about early suspend and late resume.
Explain about wakelocks.

Linux Boot Sequence:
Explain about the Linux boot sequence in case of ARM architecture?
How are the command line arguments passed to Linux kernel by the u-boot (bootloader)?
Explain about ATAGS?
Explain about command line arguments that are passed to linux kernel and how/where they are parsed in kernel code?
Explain about device tree.

How does scheduler picks particular task?
When does scheduler picks a task?
How is timeout managed?
How does load balancing happens?
Explain about any scheduler class?
Explain about wait queues and how they implemented? Where and how are they used?
What is process kernel stack and process user stack? What is the size of each and how are they allocated?
Why do we need seperate kernel stack for each process?
What all happens during context switch?
What is thread_info? Why is it stored at the end of kernel stack?
What is the use of preempt_count variable?
What is the difference between interruptible and uninterruptible task states?
How processes and threads are created? (from user level till kernel level)
How is virtual run time (vruntime) calculated?


Explaining Workqueues, flags and how they fit into the kernel
Difference between uart_register_driver and platform_driver_register?
How to do a single dma transaction in kernel?
Translating virtual address to physical address in kernel space
http://stackoverflow.com/questions/35100766/how-to-make-usb-ethernet-driver-for-android
What is mknod and it's usage ?
In how many ways we can allocate device number ?
How can we allocate device number statically ?

How can we allocate device number dynamically ?
How can we  Free  Device Numbers ?
Can we have same major number for more than one device file ?
What is minor  number and it's usage ?
What is range of major and minor numbers?
How to retrieve major and minor number from dev_t type ?
How can i use my own major and minor number for a device file ?
How to see  statically assigned major numbers ?
how interrupt id and ISR is mapped?
How to pin a interrupt to a CPU in driver
How many maximum different CPU-Cores can be used to processing of one IP-packet?
What are the different modes in ARM.
Timer Interrupts and related drivers.
What is the difference between IRQ & FIQ.
how the synchronisation works in single processor system(spinlock_irq_save).
how external devices access the physical address.
what is basic difference in insmod & modprobe.
What is the difference between Platform driver and normal device driver..?
What happens to the idle thread when a core is taken offline logically?
What is meant by system call?
What is the difference between programs and Kernel Modules?
What is the difference between user space and kernel space?
What is the importance of  /proc and /sys File system ? 
What is the difference between printf() and printk() ?
How a user mode is transferred to kernel mode?
How system call causes change from user to kernel space
Which RTOS worked on. Difference between various OS/RTOS
Measure of performance of OS. Define performance
What are the various code optimization techniques used
memory leak deduction and various ways of handling
How to proceed if system is sluggish
How to determine if some high prio task is hogging CPU
How debug prints/system trace could help solve above issues
Important things to look for in code reviews
Understanding of schematics
Why driver code in not written in C++/Java
How to debug while system is running
Run Time optimization
what is repeate sequence in I2C?
How this signal will look on CRO?
How many lines required for SPI communication?
Do you need to change Clock polarity and phase for SPI?
Who has control of SPI clock?
What is deadlock? How to come out of deadlock?
what is difference between mutex and semaphore?
Explain board bring up.
how will you verify I2C communication?How will you know if there was a software or hw problem?
How will you know if the I2C lines are noisy?
Have you worked in crash dump?
How will you solve memory crash, what steps would you take if a crash occurs?
Data sharing between ISR and threads?
what is NAND and NOR flash, diff between them?
What monitoring tools have you used like I2C sniffer
what is scheduler?
who schedules the scheduler
what is cache coherence?
Can a scheduler can be locked?
At what frequency scheduler looks for threads/processes ready for schedule?
what actually does a system does in a tick?
When cahche is enabled in a operating system ,DMA is enabled,how does DMA access the cache?
what is context switch ?
Diff btwn SPI & I2C
When a signal is raised on a interrupt line what will be passed to processor either interrupt number        or anything else?
How kernel comes to know which device raised an interrupt when  interrupt  is shared.
How can an application can talk to specific device in this below case ?
      having Hard Disk devices
        SATA,SATA1,SATA2
if their a devce driver registered for these devices and a single drivere is used to manage thesr devies then how can an application talk to a sepcific device
Ex: if i want to read from SATA1 hard disk and Write to SATA0 and SATA1  hard disk.
How do you establish a sync mechanisam in above hard disk scenarios.
When a Mutex lock is aquired by a low priority task and High priority trys to acquires the lock
      will the low priority task will be pre emitted
The same above scenario is with sema and spinlock
How can two slaves can communicate with master in i2c protocol at a time?
How can we address different devices from same vendor i2c?
What is I2C protocol,I2C- dummy write,repeated start,arbitration,synchronization between masters
How to know whether a interrupt is an edge triggered or level triggered from registering an interrupt handler?
what is  i2c bus error
What are the different data transfer modes?
What are the different types of device descriptors?
How many END point descriptors can be present per device?
DO you know container macros? In all most all kernel drivers it is used?
What is the clock frequency used in your I2C driver designed?
What is the start bit condition in I2C?
Can interrupts sleep?why?
How the master knows what is the start condition ?
while in between I2C communication what happens if clocks happends to be dragged low which is not as per i2c standard?
What if the slave device is not responding or no acknowledge bit is sent by slave device?
What is the difference between kmalloc and vmalloc?
how to get physically contiguousness memory allocation if kmalloc is giving logical contiguousness allocations?
what is the entry points in kernel?
Static Drivers vs Dynamic Driver?
How to write a makefile to build a customized kernel
How to debug crash, what is the first line you see when you see a crash/oops message, explain crash console
How do you build only a static (.a) library for kernel modules.
Kernel thread vs user space thread and kernel process vs user space process.
What was the need of thread_info structure?
Thread switching and process switching in linux kernel ?
How context switching is handled in linux?
How parent less process is handles in linux ?
What is yielding?
1.	Tell me about MIPI interface?
2.	What is i2c bus and how it works?
3.	How you will analyse crash dumps?
4.	knowledge about GIT?
5.	What is YOKTO?
6.	If i2c client is not giving ack how will you identify the issues?
7.	What will be your approach for any issue debugging?
8.	Tell about SPI?
9.	What are the different way of flashing binary into boards?
10.	What is boot monitor code?
11.	Tell me any issue in which you debugged and found that there is some issue in hardware?
12.	pull up / pull down register?
13.	Maximum size you can allocate using kmalloc?
14.	What message you will get if memory is not availeble?
15.	1) What is ioctl?
16.	2) What happens if you pass a invalid user space address in an ioctl?
17.	2) What is Virtual memory?
18.	4) What are different partitions of Physical memory?
19.	5) Related to  multimedia driver like camera and HDMI as i was working on that
20.	6) Device tree  vs board file?
21.	What is crash and opps?
22.	How you can analyse crash dump?
23.	What is static variable? 
24.	What is local static and global static with example?
25.	What happens if we pass some wrong address from user space to kernel space?
26.	linked list intersection identification
27.	kmalloc and vmalloc
28.	What is page fualt and how it is handled in linux kernel?
29.	ARM modes?
30.	How many irq lines are there in ARM?
Below is the interview questions asked in an interview in Vihaan Networks for the position of Embedded Engineer having  skills of Linux Device Driver , Linux Kernel Programming, Embedded C programming , BSP, RTOS , Linux Kernel Debugging , I2C, SPI , Bootloader etc.
1.	What is breakpoints?
2.	How software and hardware breakpoints are implemented?
3.	What is volatile constant ?
4.	What is the need of volatile constant in embedded systems?
5.	How you will analyze Linux Kernel   crash dumps ?
6.	How pagefault is handled in linux kernel?
7.	What is sempahore and mutex?
8.	What is the difference  in semaphore and Mutex?
9.	What is the difference  b/w spinlock and semaphore?
10.	When to use Semaphore and Mutex?
11.	What is the difference  between constant and macro?
12.	What is difference  between inline function and macro?
13.	 Questions Related to i2c
14.	Question Related to DMA
15.	Tell about Process address space of a c program?
16.	Difference  between local static and global static? 
17.	How compiler maintain the scope of local static or global static variable?
18.	Why can't we go for sleep while handling interrupt?
19.	How nested interrupts are handled in ARM?
20.	Different modes in ARM ?
21.	What are the benefits using FIQ?
22.	Tell me the Linux kernel Booting sequence? 
23.	How you will find out the issues if your device is not booting?
24.	What is reset vector
25.	pull up and pull down register?
26.	Edge triggered and level triggered Interrupt?
27.	Maximum size you can allocate using kmalloc?
28.	What message you will get if memory is not available?
29.	What is the significance of spinlock on uniprocessor system?
30.	Interrupt Handling 
Questions:
1) What happens if interrupt handler goes to sleep?
2) What happens if interrupt handler uses semaphores
3) How to protect variable between two interrupt handlers?
4) How to protect variable between task and interrupt handler?
Linux Useful command for performance

1) iostat
   Report Central Processing Unit (CPU) statistics and input/output statistics for devices and partitions.
2) netstat
3) blktrace
4) dtrace
5) perf
6) stap
7) top or htop
8) pidstat
9) nostat
10) dstat
11) slabtop
12) dstat
13) free
14) nicstat
15) ip
16) sar
17) sysctl

What is cooperative multitasking and pre-emptive multitasking?
What kind of priority is maintained in linux ?
What is user preemption and kernel preemption?
How ISR knows that it interrupts process in kernel mode or another interrupt (which enables further interrupts) - of course in kernel mode too
How does enabling and disabling interrupts from the kernel prevent race conditions?
How to copy MSB to rest of the byte?
How to use rotary encoder for counting?
Why is interrupt disabled between spin_lock and spin_unlock in Linux?
sleep-free kernel functions
Interrupt rate in modern computers
What does “interrupt hooking” mean?
What is the exact definition of 'process preemption'?
nested interrupt is allowed in linux, but the size of interrupt stack is limited,
 is there any chance that too many nested interrupts cause stack overflow which crashes the whole system! 
How to debug GPIO interrupt functions?
Timer interrrupts vs Dummy loops ?
How does MSI interrupt work in linux driver?
Which processor an interrupt will be generated on?
ARM interrupt service procedure vs function call procedure
Retrieving pid of tasklet
How do I write to a __user memory from within the top half of an interrupt handler?
Why can interrupt handler has sleep functionality?
Are the Interrupt Stack and the Kernel Stack the same stack?

Why interrupt handler cannot use user stack ?
What is a user thread and a kernel thread?
Number of kernel threads = cores?
Maximum number of threads per process in Linux?
cat /proc/sys/kernel/threads-max
There is also a limit on the number of processes (an hence threads) that a single user may create, see ulimit/getrlimit
Linux implements max number of threads per process indirectly!!
number of threads = total virtual memory / (stack size*1024*1024)
ulimit -s


how it differs from user thread ?.
what is the relationship between the two threads ?.
how can i implement kernel threads ?.
Why must all user threads be mapped to a kernel thread?
What kind of hardware do the newer kernels support?
How do I identify which interrupt line shown in /proc/interrupts list is shared?
How does the Linux kernel handle shared IRQs?
What is the relationship between fork() and pthread_atfork() in Linux?
What is the relationship between System Call and Software Interrupt in Linux?
How does the fork() system call in Linux work?

user/kernel interface (system calls, procfs/sysfs, ioctl) :
synchronization between contexts (how would you synchronize access to a shared memory area used from an interrupt handler and a workqueue on a SMP preemptive kernel).
memory allocation (kmalloc vs vmalloc)
are you familiar with the Linux kernel development process? Do you have any patch accepted in the mainline?
What are good ways to debug memory corruption in C under Linux?
How do I debug a kernel module in which a NULL pointer appears?
How to let kernel not run the printk with KERN_DEBUG
How do I include the device tree with my kernel?
How to attach file operations to sysfs attribute in platform driver?
How size of virtual memory is decided and calculated in Linux ?
How to remove packet from UDP read buffer in kernel?
How can I bind my own serial device with a driver?
How does Linux Kernel know where to look for driver firmware?
How to create a device in /dev automatically upon loading of the kernel module for a device driver?
sudo mknod -m 0666 /dev/msio c 22 0
How to use netlink socket to communicate with a kernel module?
How to implement a Linux Device Driver for Data Acquisition Hardware?
How to find owner socket of sk_buff in Linux kernel?
Why Socket Connection Blocked and TCP Kernel Keeps Retransmitting [ACK] packets


C Programming Interview Questions:
Volatile variable in-depth (definition, use case, impact, when to avoid, etc)
Priority inversion, priority inheritance, priority ceiling
Difference btwn Process and Thread
What is Process preemption
call back functions?
How can you avoid accessing of an array beyond its limits?
If passing name is an call by value, then array name is passed is it also call by value?
how can you determine whether your memory is in protected or un-protected mode
C program to swap every 2 bits in a 8 bit binary number
Write a program to find how many bit to toggle in 2 binary numbers so that they become equal
Write a program for to get the number of bits toggle in 2 binary numbers and toggle them to make the numbers equal
How you Decide the stack size for the function or thread
Memory Layout
How to decrease the time of booting processes
What is the functionality of PROBE function
How to detect whether a device is not detected?
How to find if their is in repeating node in linked list
Find a word from string
A thread is created by processes, how the process comes to know the completion of that created thread 
In a big array consists of 1's & 0's ,write an efficient programe to keep all 1's to right side and 0's to other side
What is Thrashing
Deadlock - example
MM - Segmentation, paging, swapping
Paging vs swapping
Different segments in a program
Does linux use segmentation
What is DMA. Modes - cycle stealing/burst (blk transfer)/transparent
Cache coherency during dma. Which component handles it
Physical Virtual and logical addresses
difference between exceptions and signals and interrupt.
In a Process Address Space what if stack or heap collide?
Delete a particular node in a linked list having argument passed as address of a node.
   without Header pointer known and other implementation with header pointer known
Write program to Insert element in static array
what all Debugging techniques you know?
Determine the minimum stack size required for given prog by end of main function?
how to debug your driver if u had any buffer issues
What is shared lib and static library? And how to create it ?
Difference between #define and CONST, which one will you chose in programming?
Difference between typedef and #define?
can we add two pointers
tell me the logic how can you find depth of a stack?
Can Volatile be applied to pointer?
why size of data types is restricted?
difference b/w macro and a constant variable

malloc vs calloc
Memory barriers; Why are they required
struct alignment and packing.
Pass by value and ref
size of void pointer
What is re-entrancy


What is structure padding?
How to write own malloc call
What is the difference between inline and macro?
Write program toreset bit in register if address of register is given
 reset (int address, int bit)
How to know size of memory allocated by malloc using pointer?
Diff between mutex and semaphore? Can semaphore be used for data synchronisation purpose?


http://cinterviewquestionandanswer.blogspot.in/2014/01/c-interview-question.html
Bitwise operation :
Bit manipulationWrite the logic for setting nth bit.
Write the logic for clearing  nth bit.
Write the logic for toggling  nth bit.
Write the logic for setting nth to mth bits, where n > m.
Write the logic for clearing nth to mth bits, where n > m.
Write the logic for toggling nth to mth bits, where n > m.
Program for finding number of 1s and 0s in a 32-bit number.
Program for finding whether a number is power of 2 or not.
Program for finding whether a number is even or odd.
Write a function to swap even bits with consecutive odd bits in a number.
Write a function to swap odd bits in a number.
Write a function to swap even bits in a number.
Write a function to find out the number of 1s in a number.
Write a function to check whether the number of 1s present in a number are even or odd.
Write a function for finding the first lowest bit set in a number.
Write a function for finding the higest bit set in a number.
Write a function for reversing the bits in a number.
Write the code for extracting nth to mth bits, where n < m.
Write the code for toggling nth to mth bits, where n < m.
Write the code for setting nth to mth bits, where n < m.
Write the code for clearing nth to mth bits, where n < m
Write a piece of code for sizeof() implementation.
Explain about container_of() and offsetof() implementations.
How to implement bit-wise operations without using bit-wise operators?

Check if a number is multiple of 9 using bitwise operators
Count strings with consecutive 1’s
Gray to Binary and Binary to Gray conversion
Find the maximum subset XOR of a given set
Given a set, find XOR of the XOR’s of all subsets.
Sum of Bitwise And of all pairs in a given array
Find Next Sparse Number
Find the maximum subarray XOR in a given array
Find XOR of two number without using XOR operator
Write a program to add one to a given number. You are not allowed to use operators like ‘+’, ‘-‘, ‘*’, ‘/’, ‘++’, ‘–‘ ?
Multiply two integers without using multiplication, division and bitwise operators, and no loops
Check if a number is a power of another number
Check perfect square using addition/subtraction
Count numbers having 0 as a digit
Number of perfect squares between two given numbers
Write an Efficient C Program to Reverse Bits of a Number
Calculate square of a number without using *, / and pow()


Linklist:
Data Structures Write a program for reversing a singly linked list?
Write a program for a singly linked list (insert, delete, count, search etc functions).
Write a program for a doubly linked list (insert, delete, count, search etc functions).
Write a program for a circular singly linked list (insert, delete, count, search etc functions).
Write a program for a circular doubly linked list (insert, delete, count, search etc functions).
Write a program for binary tree implementation.
You are given a pointer to a node (not the tail node) in a singly linked list. Delete that node from the linked list. 
How to check whether a linked list is circular or not?
How would you find a loop in a singly linked list?
Write a c program for reversing a singly linked list.
Given two singly linked list, find if they are intersecting. Do this in single iteration. Also find the intersecting node in O(n) time and O(1) space. By intersection I mean intersection by reference not by value.

Write a c program to get the intersection point of two singly linked lists.
Find loop in linked list and remove the loop
implement Stack and Queue using Linked List
Repeatedly Delete N nodes after M nodes of a Linked list
Reverse every k nodes of a linked list
Reverse a Linked List using Recursion
Remove Duplicates from a Linked List
Print Linked List Elements in Reverse order
Merge a linked list into another linked list at alternate positions
Move last node to front in linked list
Swap every two nodes in a linked list
Frequency of a given number in a Linked List
Delete alternate nodes of a Linked List
Rotate linked list by K nodes
Reverse a singly linked list
Write a function to get the intersection point of two Linked Lists (Y Shape)
Write a program to detect loop in a Linked List
Insert nodes into a linked list in a sorted fashion
Write a C program to return the nth node from the end of a linked list

Find the size of a structure with out size of operator.
why stack is always in higher location.
what is the difference between global and static
have u debug any issues using jtag/ any other debugger.if yes, how can we get the call stack in the debugger.
Write a function to find whether machine is little endian or big endian.?
Write a program to find occurrence of particular key in given string?
write a program to move all 0's to one side and 1's on ther side of array?
Write a program to find largest element in an array?
Write a program to find second largest element from array?
Write a program to count total number of vowel,consonant present in given string?
Write a program to check weather  string is palindrome or not?
Write a program to implement strncpy function using recursion
Write a program to implement strlen(), strcpy(),strncpy(), strrev(),strcmp() function"?
Write a program to find size of variable without using sizeof operator?
Can we increment the base address of array? Justify your answer.
What is difference between array and pointer?
Write a program to find weather machine is 32 bit or 64 bit?
What is memory leakage? How can we avoid it?
What is NULL , void, dangling pointer?
Can we use const keyword with volatile variable?
What does keyword const means?
Can we declare main() function as static?
Storage class static and extern and register in details.
Can we declare static variable in header file?
Where a const volatile variable is used?

1) what are the compilation steps? Explain
ans:- there are 4 compilation steps they are 1.preprocessor 2.compiler 3.assembler 4.linker.
1.preprocessor:-read the source code and resolve all preprocessor directives.
gcc -E first.c -o first.i
 vim first.i
2.compiler:-transulates preprocessor code into assembly language.
gcc -S -v first.i -o first.s
vim first.s
3.assembler:-converts the assembler language in to binary language(or ) machine instructions.
gcc -C -v first.s -o first.o
objdump -D first.o
4.linker:-applies the build process i.e., the linker links all the relocatable binary files and libraries.
gcc first.o -o first
objdump -D first

write a program to print size of integer variable without using sizeof operator
write a program to find repeated character in a given string? code should be generic?
Implement string reverse program without using temporary buffer and strrev function?
how do you transfer data from userspace to kernel space?
What is generic system call that is used to transfer data from user space to kernel space?
write a program to copy a string from source to destination without using strcpy?
what is difference between mutex and semaphores
which one is faster array or linklist ?
how you cna tell whether your system is little or big indian ?
Write a program to implement memcpy() on your own 
Difference between library call and a system call


 Explain the meaning of Kernal.
Operating System Kernal - The kernel is the essential center of a computer operating system, the core that provides basic services for all other parts....
Operating System - What is a command interpreter?
Operating System - A command interpreter is the part of a computer operating system that understands and executes commands that are entered....
What is a daemon?
Operating System daemon - In Unix and some other operating systems, a daemon is a computer program that runs in the background, It is not under the direct control of a user.......
Basic functions of process management.
Operating System process management - The basic functions of the OS wrt the process management are : Allocating resources to processes,.....
What is a named pipe?
Operating System named pipe- Its a pipe that an application opens by name in order to write data into or read data from the pipe. ...
What is pre-emptive and non-preemptive scheduling?
In non-preemptive scheduling, a running task is executed till completion. It cannot be interrupted......
Operating System semaphore - What is a semaphore?
Operating System semaphore - A semaphore is a variable. There are 2 types of semaphores:Binary semaphores, Counting semaphores.....
Meaning of mutex - Binary semaphore vs. Mutex
Operating System mutex - A mutex and the binary semaphore are essentially the same. Both can take values: 0 or 1. However, there is a significant difference...
What are the different types of memory?
Operating System memory types - Cache Memory - This is a small amounts of memory used to speed up system performance.....
Operating System virtual memory - Explain the meaning of virtual memory.
Operating System virtual memory - Virtual memory is an approach to make use of the secondary storage devices as an extension of the primary storage of the computer......
What is RTOS?
What is RTOS? - A certain capability within a specified time constraint is guaranteed by an operating system called ‘real time operating system’.
Difference between hard real-time and soft real-time
Hard real-time and soft real-time - Critical task completion on time is guaranteed by a hard real time system.
What type of scheduling is there in RTOS?
Type of scheduling in RTOS - The tasks of real time operating system have 3 states namely, ‘running’, ’ready’, ‘blocked’.
What is interrupt latency?
What is interrupt latency? - The time between a device that generates an interrupt and the servicing of the device
What is priority inheritance?
What is priority inheritance? - Priority inversion problems are eliminated by using a method called priority inheritance.
What is spin lock?
What is spin lock? - In a loop a thread waits simply (‘spins’) checks repeatedly until the lock becomes available.
What is an operating system? Functions of an operating system - operating system
An operating system is an interface between hardware and software. OS is responsible for managing and co-ordinating the activities of a computer system.......
What is paging? Why paging is used? - operating system
OS performs an operation for storing and retrieving data from secondary storage devices for use in main memory........
Difference between a process and a program - operating system
A program is a set of instructions that are to perform a designated task, where as the process is an operation........
Physical memory and virtual memory - operating system
Physical memory is the only memory that is directly accessible to the CPU.......
Difference between socket and pipe - operating system
Sockets: Socket is a part of OSI layer model. Communication among different layers is performed through sockets......
Difference between THREAD, PROCESS and TASK - operating system
A program in execution is known as ‘process’. A program can have any number of processes. Every process has its own address space........
Differentiate between RAM and ROM - operating system
RAM: - Volatile memory - Electricity needs to flow continuously - Program information is stored in RAM.......
What is DRAM? In which form does it store data? - operating system
DRAM – Dynamic Random Access Memory. One of the read / write memory. DRAM is cheap and does the given task.......
What is cache memory? Explain its functions - operating system
Cache memory is RAM. The most recently processing data is stored in cache memory. CPU can access this data more quickly than it can access data in RAM.......
Differentiate between Complier and Interpreter - operating system
The program syntax is checked by the compiler; where as the keywords of the program is checked by the interpreter......
Describe different job scheduling in operating systems
Job scheduling is an activity for deciding the time for a process to receive the resources they request. First Come First Served: In this scheduling, the job that is waiting for a long time is served next........
What is a Real-Time System? - operating system
Real-time system is the study of hardware and software, which are subject to the operational deadlines from event to the system response......
What do you mean by deadlock? - operating system
Dead lock is a situation of two or more processes waiting for each other to finish their tasks. In this situation no progress or no advancement is made.......
Difference between Primary storage and secondary storage - operating system
Primary memory storages are temporary; where as the secondary storage is permanent....... 


What are the different types of Kernel?
Kernels are basically of two types:

a. Monolithic Kernels - In this architecture of kernel, all the system services were packaged into a single system module which lead to poor maintainability and huge size of kernel.
b. Microkernels - They follow the modular approach of architecture. Maintainability became easier with this model as only the concerned module is to be altered and loaded for every function. This model also keeps a tab on the ever growing code size of the kernel.
What are the disadvantages of Microkernels?
Following are the main disadvantages of Microkernels. Usually these disadvantages are situation based.

a. Larger running memory footprint
b. Performance loss due to the requirement of more software for interfacing.
c. Difficulty in fixing the messaging bugs.
d. Complicated process management.


What is a daemon?
- Daemon - Disk and execution monitor, is a process that runs in the background without user’s interaction. They usually start at the booting time and terminate when the system is shut down.
How would you identify daemons in Unix?
- The name of daemons usually end with 'd' at the end in Unix.
- For e.g. httpd, named, lpd.
What do you mean by a zombie process?
- These are dead processes which are not yet removed from the process table.
- It happens when the parent process has terminated while the child process is still running. This child process now stays as a zombie

What is context switching?
- Context is associated with each process encompassing all the information describing the current execution state of the process
- When the OS saves the context of program that is currently running and restores the context of the next ready to run process, it is called as context switching.
- It is important for multitasking OS.

What is synchronization? What are the different synchronization mechanisms?
Synchronization means controlling access to a resource that is available to two or more threads or process. Different synchronization mechanisms are:

- Mutex
- Semaphores
- Monitors
- Condition variables
- Critical regions
- Read/ Write locks


What is the basic difference between pre-emptive and non-pre-emptive scheduling.
Pre-emptive scheduling allows interruption of a process while it is executing and taking the CPU to another process while non-pre-emptive scheduling ensures that a process keeps the CPU under control until it has completed execution.
Is non-pre-emptive scheduling frequently used in a computer? Why?
No, it is rarely used for the reasons mentioned below:

- It can not ensure that each user gets a share of CPU regularly.
- The idle time with this increases reducing the efficiency and overall performance of the system.
- It allows program to run indefinitely which means that other processes have to wait for very long.


Explain condition variable.
- These are synchronization objects which help threads wait for particular conditions to occur.
- Without condition variable, the thread has to continuously check the condition which is very costly on the resources.
- Condition variable allows the thread to sleep and wait for the condition variable to give it a signal.
What are read-write locks?
- Read - write locks provide simultaneous read access to many threads while the write access stays with one thread at a time. They are especially useful in protecting the data that is not frequently written but read simultaneously by many threads.
- They are slower than mutexes.
What is a deadlock?
- It is a condition where a group of two or more waiting for the resources currently in use by other processes of the same group.
- In this situation every process is waiting for an event to be triggered by another process of the group.
- Since no thread can free up the resource a deadlock occurs and the application hangs.
What are the necessary conditions for deadlock to occur?
a. At least one resource should be occupied in a non-sharable condition.
b. A process holding at least one resource is waiting for more resources currently in use by other processes.
c. It is not possible to pre-empt the resource.
d. There exists a circular wait for processes.

Name the different types of memory?
a. Main memory also called primary memory or RAM
b. Secondary memory or backing storage
c. Cache
d. Internal process memory


Differentiate between logical and physical address.
- Physical addresses are actual addresses used for fetching and storing data in main memory when the process is under execution.
- Logical addresses are generated by user programs. During process loading, they are converted by the loader into physical address.
When does page fault error occur?
- It occurs when a page that has not been brought into main memory is accessed.
Explain thrashing.
- In virtual memory system, thrashing is a high page fault scenario. It occurs due to under-allocation of pages required by a process.
- The system becomes extremely slow due to thrashing leading to poor performance.


Explain thread.
- It is an independent flow of control within a process.
- It consists of a context and a sequence of instructions for execution.
What are the advantage of using threads?
The main advantages of using threads are:

a.) No special communication mechanism is required.
b.) Readability and simplicity of program structure increases with threads.
c.) System becomes more efficient with less requirement of system resources.
What are the disadvantages of using threads?
The main disadvantages of using threads are:

- Threads can not be re-used as they exist within a single process.
- They corrupt the address space of their process.
- They need synchronization for concurrent read-write access to memory.

What is a library?
It is a file which contains object code for subroutines and data to be used by the other program.


What are the different types of scheduling algorithms?
The scheduling algorithms decide which processes in the ready queue are to be allocated to the CPU for execution. Scheduling algorithms can be broadly classified on the basis of:

- Preemptive algorithms
- Round Robin Scheduling
- Shortest Job First Scheduling (can be both)
- Priority Scheduling (can be both)
- Non-preemptive algorithms
- First Come First Served Scheduling

Non-Preemptive algorithms: In this type of scheduling once a CPU has been allocated to a process it would not release the CPU till a request for termination or switching to waiting state occurs.

Preemptive algorithms: In this type of scheduling a process maybe interrupted during execution and the CPU maybe allocated to another process.
Why is round robin algorithm considered better than first come first served algorithm?
The first come first served algorithm is the simplest scheduling algorithm known. The processes are assigned to the CPU on the basis of their arrival time in the ready queue. Since, it is non-preemptive once a process is assigned to the CPU, it will run till completion. Since a process takes the CPU till it is executed it is not very good in providing good response times. It can make other important processes wait un-necessarily.

On the other hand, the round robin algorithm works on the concept of time slice or also known as quantum. In this algorithm, every process is given a predefined amount of time to complete the process. In case, a process is not completed in its predefined time then it is assigned to the next process waiting in queue. In this way, a continuous execution of processes is maintained which would not have been possible in case of FCFS algorithm
Explain how a copying garbage collector works. How can it be implemented using semispaces?
The copying garbage collector basically works by going through live objects and copying them into a specific region in the memory. This collector traces through all the live objects one by one. This entire process is performed in a single pass. Any object that is not copied in memory is garbage.

The copying garbage collector can be implemented using semispaces by splitting the heap into two halves. Each half is a contiguous memory region. All the allocations are made from a single half of the heap only. When the specified heap is half full, the collector is immediately invoked and it copies the live objects into the other half of the heap. In this way, the first half of the heap then only contains garbage and eventually is overwritten in the next pass.
How does reference counting manage memory allocated objects? When can it fail to reclaim objects?
Reference counting augments every object with a count of the number of times an object has been referenced. This count is incremented every time a reference to that object is made. Also every time a reference is destroyed the reference is decremented. This process is repeated till the reference count becomes zero. Once the reference count of an object reaches zero the object can be reclaimed. In this way, reference counting systems can perform automatic memory management by keeping a count in every object. Any object that does not have a reference count can be considered to be dead and that memory can be reclaimed.

The reference counting method can fail to reclaim objects in case of cyclic references. There are no concrete ways to avoid this problem and it is always suggested to create an architecture that does not use a circular reference.
What differences are there between a semaphore wait signal and a condition variable wait signal?
Semaphore wait signal:

- They can be used anywhere except in a monitor.
- The wait() function does not always blocks its caller.
- The signal() function increments the semaphore counter and can release a process.
- If the signal() releases a process, the released and the caller both continue.

Condition Variable wait signal:

- It can only be used in monitors.
- The wait() function always blocks its caller.
- The signal() can either release a process or it is lost as if it never occurred.
- On signal() releasing a process either the caller or the released continues but not both at the same time.
For a deadlock to occur what are the necessary conditions
In order for deadlocks to occur there are four necessary conditions:

- Mutual Exclusion: The resources available are not sharable. This implies that the resources used must be mutually exclusive.

- Hold and Wait: Any process requires some resources in order to be executed. In case of insufficient availability of resources a process can take the available resources, hold them and wait for more resources to be available.

- No Preemption: The resources that a process has on hold can only be released by the process itself voluntarily. This resource cannot be preempted by the system.

- Circular Waiting: A special type of waiting in which one process is waiting for the resources held by a second process. The second process is in turn waiting for the resources held by the first process.
Why is the context switch overhead of a user-level threading as compared to the overhead for processes? Explain.
This is due to the reason that a context switch implementation is done by the kernel. During this process the state information is copied between the processor and the PCB (process control block) or the TCB (thread control block). Since the kernel does not know anything about user-level threads, technically it is not possible for it to be a user level thread context switch. The user level scheduler can do some limited state copying on the behalf of a thread prior to the control being handed to that thread. But this copying of state information is smaller compared to that of a kernel-level process. Also the process does not involve going into the kernel mode with the help of a system call.
State the advantages of segmented paging over pure segmentation?
In broad terms paging is a memory management technique that allows a physical address space of a process to be non-contiguous.

Segmented paging has a certain set of advantages over pure segmentation such as:

- Segmented paging does not have any source of external fragmentation.
- Since a segment existence is not restricted to a contiguous memory range it can be easily grown and does not have to adjust into a physical memory medium.
- With segmented paging the addition of an offset and a base is simpler as it is only an append operation instead of it being a full addition operation.
When does the Belady's anomaly occur?
The Belady's anomaly is a situation in which the number of page faults increases when additional physical memory is added to a system. This anomaly arises in some algorithms that implement virtual memory. The virtual memory allows programs larger than the physical memory space to execute. An algorithm suffers from this problem when it cannot guarantee that a page will be kept when a small number of frames are available. An optimal algorithm would not suffer from this problem as it replaces the page not to be used for the longest time. The anomaly occurs when the page replacement algorithm will remove a page that will be needed in the immediate future. An optimal algorithm will not select such a page that will be required immediately. This anomaly is also stated to be unbounded.
What complications does concurrent processing add to an operating system?
There are various complications of concurrent processing such as:

- A time sharing method must be implemented to allow multiple processes to have an access to the system. This will involve the preemption of processes that do not give up CPU on their own i.e. more than one process may be executing kernel code simultaneously.

- The amount of resources that a process can use and the operations that it may perform must be limited. The system resources and the processes must be protected from each other.

- Kernel must be designed to prevent deadlocks between the various processes, i.e. Cyclic waiting or hold and waiting must not occur.

- Effective memory management techniques must be used to better utilize the limited resources.

For any number, we can check whether its ‘i’th bit is 0(OFF) or 1(ON) by bitwise ANDing it with “2^i” (2 raise to i).
1) The left shift and right shift operators should not be used for negative numbers
The left-shift and right-shift operators are equivalent to multiplication and division by 2 respectively
The & operator can be used to quickly check if a number is odd or even


Check if a number is multiple of 9 using bitwise operators
Count strings with consecutive 1’s
Gray to Binary and Binary to Gray conversion
Find the maximum subset XOR of a given set
Given a set, find XOR of the XOR’s of all subsets.
Sum of Bitwise And of all pairs in a given array
Find Next Sparse Number
Find the maximum subarray XOR in a given array
Find XOR of two number without using XOR operator
Write a program to add one to a given number. You are not allowed to use operators like ‘+’, ‘-‘, ‘*’, ‘/’, ‘++’, ‘–‘ ?
Multiply two integers without using multiplication, division and bitwise operators, and no loops
Check if a number is a power of another number
Check perfect square using addition/subtraction
Count numbers having 0 as a digit
Number of perfect squares between two given numbers
Write an Efficient C Program to Reverse Bits of a Number
Calculate square of a number without using *, / and pow()
Bitwise operation :
Bit manipulationWrite the logic for setting nth bit.
Write the logic for clearing  nth bit.
Write the logic for toggling  nth bit.
Write the logic for setting nth to mth bits, where n > m.
Write the logic for clearing nth to mth bits, where n > m.
Write the logic for toggling nth to mth bits, where n > m.
Program for finding number of 1s and 0s in a 32-bit number.
Program for finding whether a number is power of 2 or not.
Program for finding whether a number is even or odd.
Write a function to swap even bits with consecutive odd bits in a number.
Write a function to swap odd bits in a number.
Write a function to swap even bits in a number.
Write a function to find out the number of 1s in a number.
Write a function to check whether the number of 1s present in a number are even or odd.
Write a function for finding the first lowest bit set in a number.
Write a function for finding the higest bit set in a number.
Write a function for reversing the bits in a number.
Write the code for extracting nth to mth bits, where n < m.
Write the code for toggling nth to mth bits, where n < m.
Write the code for setting nth to mth bits, where n < m.
Write the code for clearing nth to mth bits, where n < m
Write a piece of code for sizeof() implementation.
Explain about container_of() and offsetof() implementations.
How to implement bit-wise operations without using bit-wise operators?
Count Total Set Bits in All Numbers From 1 to N
Find the Maximum of Two Numbers Without Using if-else
Find the Element that Appears Once in arr[] = {10, 1, 10, 3, 10, 1, 1, 2, 3, 3}.
Count Number of Bits to be Flipped to Convert A to B
Find Position of the only Set Bit


Linklist :
Find loop in linked list and remove the loop
implement Stack and Queue using Linked List
Repeatedly Delete N nodes after M nodes of a Linked list
Reverse every k nodes of a linked list
Reverse a Linked List using Recursion
Remove Duplicates from a Linked List
Print Linked List Elements in Reverse order
Merge a linked list into another linked list at alternate positions
Move last node to front in linked list
Swap every two nodes in a linked list
Frequency of a given number in a Linked List
Delete alternate nodes of a Linked List
Rotate linked list by K nodes
Reverse a singly linked list
Write a function to get the intersection point of two Linked Lists (Y Shape)
Write a program to detect loop in a Linked List
Insert nodes into a linked list in a sorted fashion
Write a C program to return the nth node from the end of a linked list
Why Num&sizeMinusOne faster than num&(size-1)


string:
How to Print duplicate characters from String?
How to check if two Strings are anagrams of each other?
How to program to print first non repeated character from String?
how to reverse a string using recursion ?
how to found duplicate character in a string ?
How to convert numeric String to an int?
Remove duplicate character from a string ?
How to reverse words in a sentence without using library method?
implement your own strstr , strcpy, snprintf etc.. ?
Reverse an array without affecting special characters ?
Length of the longest valid substring ?

Questions On Storage Class Specifier
1. What are storage class specifier?

Ans: Please refer this link : http://cinterviewquestionandanswer.blogspot.in/2014/01/storage-class-specifier.html

2. What is static variable?
 Ans :

There are 3 main uses for the static.

1. If you declare within a function: It retains the value between function calls.

2. If it is declared for a function name: By default function is extern..so it will be visible from other files if the function declaration is as static..it is invisible for the outer files.

3. Static for global variables: By default we can use the global variables from outside files If it is static global..that variable is limited to with in the file.
3. What is difference between static and extern?
Ans:
"The static storage class is used to declare an identifier that is a local variable either to a function or a file and that exists and retains its value after control passes from where it was declared. This storage class has a duration that is permanent. A variable declared of this class retains its value from one call of the function to the next. The scope is local. A variable is known only by the function it is declared within or if declared globally in a file, it is known or seen only by the functions within that file. This storage class guarantees that declaration of the variable also initializes the variable to zero or all bits off.
The extern storage class is used to declare a global variable that will be known to the functions in a file and capable of being known to all functions in a program. This storage class has a duration that is permanent. Any variable of this class retains its value until changed by another assignment. The scope is global. A variable can be known or seen by all functions within a program. ."
 4. What is difference between static local and static global variable?
Ans: 
Static global  :
Static variable has scope only in the file in which it is declared. it can't be accessed in any other file but its value remains intact if code is running in some other file means lifetime is in complete program .
Static local:
static local variable has scope in that function in which it is declared means it can't be used in other functions in the same file also, means scope is limited to the function in which it is declared while its life time is also through out the program. 
5. Can we declare static variable in header file?
Ans: 
You can’t declare a static variable without defining it as well (this is because the storage class modifiers static and extern are mutuallyexclusive). A static variable can be defined in a header file, but this would cause each source file that included the header file to have its own private copy of the variable, which is probably not what was intended.
6. Can we declare main() function as static?
Ans:
No. The C spec actually says somewhere in it  that the main function cannot be static.
The reason for this is that static means "don't let anything outside this source file use this object". The benefit is that it protects against name collisions in C when you go to link (it would be bad bad bad if you had two globals both named "is_initialized" in different files... they'd get silently merged, unless you made them static). It also allows the compiler to perform certain optimizations that it wouldn't be able to otherwise. These two reasons are why static is a nice thing to have.
Since you can't access static functions from outside the file, how would the OS be able to access the main function to start your program? That's why main can't be static.
Some compilers treat "main" specially and might silently ignore you when you declare it static.
7. Draw memory layout of C program?
Ans : 
Refer This link:   http://cinterviewquestionandanswer.blogspot.in/2014/01/memory-layout-of-c-programs.html 

8.What is volatile variable means?
volatile has nothing to deal with storage class.
volatile just tells the compiler or force the compiler to "not to do the optimization" for that variable. so compiler would not optimize the code for that variable and reading the value from the specified location, not through interal register which holds the previous value.
So, by declaring variable as volatile.. it gives garrantee that you will get the latest value, which may be alterred by an external event.
your code may be work fine if haven't declare that variable as volatile, but there may be chance of not getting correct value sometimes.. so to avoid that we should declare variable as volatile.
volatile is generally used when dealing with external events, like interrupts of hardware related pins. 

Example. reading adc values.

const voltile means you can not modify or alter the value of that variable in code. only external event can change the value.
controller pins are generally defines as volatile. may be by declaring variable as volatile controller will do "read by pin" not "read by latch"... this is my assumtion. may be wrong...
but still there is lots of confusion when to choose variable as volatile..
A variable should be declared volatile whenever its value could change unexpectedly. In practice, only three types of variables could change:
Memory-mapped peripheral registers
Global variables modified by an interrupt service routine
Global variables within a multi-threaded application 
9. What does keyword const means?
Ans:
The const qualifier explicitly declares a data object as something that cannot be changed. Its value is set at initialization. You cannot use const data objects in expressions requiring a modifiable lvalue. For example, a const data object cannot appear on the lefthand side of an assignment statement
int const volatile var

10. What do the following declaration means?

const int a;
int const a;
const int *a;
int * const a;
int const * a const;
11. Can we use const keyword with volatile variable?
Ans:
Yes. The const modifier means that this code cannot change the value
of the variable, but that does not mean that the value cannot be
changed by means outside this code. For instance, in the example  the timer structure was accessed through a volatile const pointer. The function itself did not change the value of the timer, so it was declared const. However, the value was changed by hardware on the computer, so it was declared volatile. If a variable is both const and volatile, the two modifiers can appear in either order.

 Pointer String and array question :
1. What are pointers?
Ans:
A pointer is a variable whose value is the address of another variable, i.e., direct address of the memory location. Like any variable or constant, you must declare a pointer before you can use it to store any variable address. The general form of a pointer variable declaration is:
type *var-name;
Here, type is the pointer's base type; it must be a valid C data type and var-name is the name of the pointer variable. The asterisk * you used to declare a pointer is the same asterisk that you use for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Following are the valid pointer declaration:
int    *ip;    /* pointer to an integer */
double *dp;    /* pointer to a double */
float  *fp;    /* pointer to a float */
char   *ch     /* pointer to a character */
The actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.
2. What is dangling pointer?
Ans:
A dangling pointer points to memory that has already been freed. The storage is no longer allocated. Trying to access it might cause a Segmentation fault.
Common way to end up with a dangling pointer:
char* func()
{
   char str[10];
   strcpy(str,"Hello!");
   return(str); 
}
//returned pointer points to str which has gone out of scope. 
You are returning an address which was a local variable, which would have gone out of scope by the time control was returned to the calling function. (Undefined behaviour)
Another common dangling pointer example is an access of a memory location via pointer, after free has been explicitly called on that memory.
int *c = malloc(sizeof(int));
free(c);
*c = 3; //writing to freed location!

3. What is NULL pointer?
Ans:
Null pointer is special reserved value of a pointer. A pointer of any type has such a reserved value. Formally, each specific pointer type (int*, char*) has its own dedicated null-pointer value. Conceptually, when a pointer has that null value it is not pointing anywhere.

4. What is void Pointer?
Ans:
Void pointer or generic pointer is a special type of pointer that can be pointed at objects of any data type. A void pointer is declared like a normal pointer, using the void keyword as the pointer’s type.

Pointers defined using specific data type cannot hold the address of the some other type of variable i.e., it is incorrect in C++ to assign the address of an integer variable to a pointer of type float.

Example:

float *f; //pointer of type float
int i;  //integer variable
f = &i; //compilation error

The above problem can be solved by general purpose pointer called void pointer.

Void pointer can be declared as follows:

void *v // defines a pointer of type void

The pointer defined in this manner do not have any type associated with them and can hold the address of any type of variable.

Example:

void *v; 
int *i;
int ivar;
char chvar;
float fvar;
v = &ivar; // valid
v = &chvar; //valid
v = &fvar; // valid
i = &ivar; //valid
i = &chvar; //invalid
i = &fvar; //invalid  

5. What is memory leakage? How can we avoid it?
Ans :
Memory leak occurs when programmers create a memory in heap and forget to delete it.
Memory leaks are particularly serious issues for programs like daemons and servers which by definition never terminate.

/* Function with memory leak */
#include 

void f()
{
   int *ptr = (int *) malloc(sizeof(int));

   /* Do some work */

   return; /* Return without freeing ptr*/
}
To avoid memory leaks, memory allocated on heap should always be freed when no longer needed.

/* Function without memory leak */
#include ;

void f()
{
   int *ptr = (int *) malloc(sizeof(int));

   /* Do some work */

   free(ptr);
   return;
}

6. What is the size of pointer in 32 bit machine?
Ans:
Sizeof  of pointer in 32 bit machine is always 4 bytes.
7. Write a program to find weather machine is 32 bit or 64 bit?
Ans:
int main()
{
    int *p = NULL;
    if(sizeof(p) == 4)
        printf("Machine is 32 bit\n");
    else
        printf("Machine is 64 bit\n");
    return 0;
}
8. What is array?
Ans:
In C programming, one of the frequently arising problem is to handle similar types of data. For example: If the user want to store marks of 100 students. This can be done by creating 100 variable individually but, this process is rather tedious and impracticable. These type of problem can be handled in C programming using arrays.
An array is a sequence of data item of homogeneous value(same type).
9. What is difference between array and pointer?
Ans:
An array is an array and a pointer is a pointer, but in most cases array names are converted to pointers.
Here is an array:
int a[7] 
a contains space for seven integers, and you can put a value in one of them with an assignment, like this:
a[3] = 9; 
Here is a pointer:
int *p; 
p doesn't contain any spaces for integers, but it can point to a space for an integer. We can for example set it to point to one of the places in the array a, such as the first one:
p = &a[0]; 
What can be confusing is that you can also write this:
p = a; 
This does not copy the contents of the array a into the pointer p (whatever that would mean). Instead, the array name a is converted to a pointer to its first element. So that assignment does the same as the previous one.
Now you can use p in a similar way to an array:
p[3] = 17; 
The reason that this works is that the array dereferencing operator in C, "[ ]", is defined in terms of pointers. x[y] means: start with the pointer x, step y elements forward after what the pointer points to, and then take whatever is there. Using pointer arithmetic syntax, x[y] can also be written as *(x+y).
For this to work with a normal array, such as our a, the name a in a[3] must first be converted to a pointer (to the first element in a). Then we step 3 elements forward, and take whatever is there. In other words: take the element at position 3 in the array. (Which is the fourth element in the array, since the first one is numbered 0.)
So, in summary, array names in a C program are (in most cases) converted to pointers. One exception is when we use the sizeof operator on an array. If a was converted to a pointer in this contest, sizeof(a) would give the size of a pointer and not of the actual array, which would be rather useless, so in that case a means the array itself.

10. Can we increment the base address of array? Justify your answer.
Ans: 
No, Because once we initialize the array variable, the pointer points base address only & it's fixed  and constant pointer.
11.  What is the output of program.
int a[5] = {1,2,3,4,5};
int *ptr = (int*) (&a +1);
int *ptr = (int*) (a+1);  
Ans: 
you see, for your program above, a and &a will have the same numerical value,and I believe that's where your whole confusion lies.You may wonder that if they are the same,the following should give the next address after a in both cases,going by pointer arithmetic:

(&a+1) and (a+1)

But it's not so!!Base address of an array (a here) and Address of an array are not same! a and &a might be same numerically ,but they are not the same type. a is of type int* while &a is of type int (*)[5],ie , &a is a pointer to (address of ) and array of size 5.But a as you know is the address of the first element of the array.Numerically they are the same as you can see from the illustration using ^ below.
But when you increment these two pointers/addresses, ie as (a+1) and (&a+1), the arithmetic is totally different.While in the first case it "jumps" to the address of the next element in the array, in the latter case it jumps by 5 elements as that's what the size of an array of 5 elements. 
  

12. What is output of the program?
int main()
{
            int arr[10];
            int *ptr = arr;
            ptr++;
            arr++;
            return 0; 
} 

Ans:  
The statement arr++ will give you lvalue error. Because hear you are trying to increment base address of array and by default base address of array is constant pointer(constant value) so,
arr  =  arr+1;
i.e according to rule on LHS of assignment operator there always should be lvalue i.e variable not constant. 
13. What is string?
Ans:
The string in C programming language is actually a one-dimensional array of characters which is terminated by a null character '\0'. Thus a null-terminated string contains the characters that comprise the string followed by a null. 
14. What is difference between these two,

char ptr[] = "string";
char *ptr = "string";

Ans:

The two declarations are not the same.
First one is the array of character i.e. string and second one is the string literals.
char ptr[] = "string"; declares a char array of size 7 and initializes it with the characters s ,t,r,i,n,g and \0. You are allowed to modify the contents of this array. 
char *ptr = "string"; declares ptr as a char pointer and initializes it with address of string literal "string" which is read-only. Modifying a string literal is an undefined behavior. What you saw(seg fault) is one manifestation of the undefined behavior.

15. Write a program to find size of variable without using sizeof operator?
Ans: 

#define sizeof(var)     ( (char*)(&var+1) - (char*) (&var))

int main()
{
    int val;
    printf("size of = %d\n", SIZEOF(val));
    return 0;
}
16. Write a program to find sizeof structure without using size of operator?
Ans:

#define SIZEOF(var)     ( (char*)(&var+1) - (char*) (&var))

int main()
{
        struct s {
                int a;
                char b;
                int c;
        };
        struct s obj[1];

    printf("size of = %ld\n", SIZEOF(obj));
    return 0;
}
17. What is the output of following program?

int main()
{
      char str[] = "vishnu";
      printf("%d %d\n",sizeof(str),strlen(str));
}

Ans: 
7 6
Here char str[] = " 'v'. 'i' ,'s','h','n',u','\0' ";
so sizeof operator always count null character whereas strlen skip null character. 
18. Write a program to implement strlen(), strcpy(),strncpy(), strrev(),strcmp() function"?

Ans:
1. strlen:

int my_strlen(const char * str)
{
    int count;
    while(* str != '\0') {
        count++;
        str++;
    }
    return 0;
}
2. strcpy:

void my_strcpy(char * dest, const char* src)
{
    while(* src != '\0') {
        *dest = *src;
        dest++;
        src++;
    }
    *dest = '\0';
} 
3. strrev:

void my_strrev(char *str,size)
{
    int i;
    char temp;
    for(i=0;i<=size/2;i++) {
        temp = str[i];
        str[i] = str[size-i];
        str[size-i] = temp;
    }
}

int main()
{
    char str[10] = "vishnu";
    int len;
    len = strlen(str);
    my_strrev(str,len-1);
    printf("strrev = %s\n",str);
    return 0;
}
4. strcmp :

void my_strcmp(char * dest, const char* src)
{
     while(*str != '\0' && *dest != '\0') {
        str++;
        dest++;
    }
    return (*src - *dest);
}

int main()
{
    char str[10];
    char dest[10];
    int i;
    i = my_strcmp(dest,src);
    if(i == 0 ) 
        printf("strings are equal\n");
    if(i < 0) 
        printf(" string1 is less than string2\n");
    if(i > 0) 
        printf("string2 is greter than string1\n");
    return 0;
} 
5. strncpy

void my_strncpy(char * dest, const char* src,int n)
{
    while(*src != '\0' && n != 0) {
        *dest = *src;
        dest++;
        src++;
        n--;
    }
    while(n) {
        *dest = '\0';
        n--;
    }
}

19 . Write a program to implement above function using recursion?

20 . Write a program to check weather  string is palindrome or not?

int main()
{
    char string[25], reverse_string[25] = {'\0'};
    int  i, length = 0, flag = 0;
    fflush(stdin);
    printf("Enter a string \n");
    gets(string);
    for (i = 0; string[i] != '\0'; i++) {
        length++;
    }
    
    for (i = length - 1; i >= 0; i--) {
        reverse_string[length - i - 1] = string[i];
    }
    if(strcmp(string,reverse_string) == 0 )
        printf("%s is palindrome\n");
    else
        printf("%s is not palindrome\n");
    return 0; 
}


21 . Write a program to count total number of vowel,consonant present in given string?
Ans:

int main()
{

    char sentence[80];
    int i, vowels = 0, consonants = 0, special = 0;
    printf("Enter a sentence \n");
    gets(sentence);
         for (i = 0; sentence[i] != '\0'; i++) {

        if ((sentence[i] == 'a' || sentence[i] == 'e' || sentence[i] == 'i' || sentence[i] == 'o' || sentence[i] == 'u') || (sentence[i] == 'A' || sentence[i] == 'E' || sentence[i] == 'I' || sentence[i] == 'O' || sentence[i] == 'U')) {
        vowels = vowels + 1;
        }
        else {
            consonants = consonants + 1;
        }
        if (sentence[i] =='t' ||sentence[i] =='\0' || sentence[i] ==' ') {
            special = special + 1;
        }

    }
    consonants = consonants - special;
      printf("No. of vowels in %s = %d\n", sentence, vowels);
    printf("No. of consonants in %s = %d\n", sentence, consonants);
    return 0;

}
22. Write a function to find whether machine is little endian or big endian.?

Ans:
void is_little_or_big(int n)
    {
        int num = 0x01;
        char * ptr = (char*)num;
        if(*ptr == 1)
            printf("little endian\n");
        else
            printf("big endian\n");
    }
    or
    
    void is_little_or_big()
    {
        enum union {
            int a;
            char c[4];
        };
        enum endian obj;
        obj.i = 1;
        if(obj.c[0] == 1) 
            printf("Machine is little endian\n");
        else
            printf("machine is big endian\n");
    }
  
Write a program to find occurrence of particular key in given string?

Write a program to move all 0's to one side and 1's on ther side of array?

Write a program to find largest element in an array?

Write a program to find second largest element from array?


Bit Manipulation  :
1. Write a program to count total number of setbit in 32 bit number?

int countset(int num)
{
           int count = 0;
           while (num) {
                    if( ((num) & 1) == 1)
                           count++;
                     num = num >> 1; 
              }
             return count;
}
or
unsigned int countsetbit(int num)
{
           int count = 0;
           while(num != 0) {
                      count ++;
                      num = num & (num-1);
              }
             return count;
}

2. Write a program to set n th bit in 32 bit number?

int setbit(int num, int pos)
{
           num = num | 1 << pos; 
}

3. Write a program to count total number of reset bit in 32 bit integer? 

 int setbit(int num)
{
           int count = 0;
           while (num) {
                    if( ((num) & 1) == 0)
                           count++;
                     num = num >> 1; 
              }
             return count;
}

4. Write a program to reset nth bit in 32 bit number?

int resetbit(int num, int pos)
{ 
           num = num &  ~(1 << pos); 
}

5. Write a program to swap nibble of a 1byte data?

6. Write a program to swap two variable using bitwise operator?

void swap(int a, int b)
{
         a = a ^ b;
         b = a ^  b;
         a = a ^ b;
} 
7. Write a program to find number is even or odd?

void evnodd(int num)
{
       if( (num) & (1) )
           printf("odd");
      else
           printf("even"); 
}  
8. Write a program to find number is power of 2 or not?

void  power(int num)
{
       if( !( (num) & (num-1) ) )
           printf("power of 2");
      else
           printf("num is not power of 2"); 
}  
9 Write a function to swap even bits with consecutive odd bits in a number.
   e.g. bo swapped with b1,b2 sawpped with b3 and so on.

 Given an unsigned integer, swap all odd bits with even bits. For example, if the given number is 23 (00010111), it should be converted to 43 (00101011). Every even position bit is swapped with adjacent bit on right side (even position bits are highlighted in binary representation of 23), and every odd position bit is swapped with adjacent on left side.
If we take a closer look at the example, we can observe that we basically need to right shift (>>) all even bits (In the above example, even bits of 23 are highlighted) by 1 so that they become odd bits (highlighted in 43), and left shift (<<) all odd bits by 1 so that they become even bits. The following solution is based on this observation. The solution assumes that input number is stored using 32 bits.
Let the input number be x
1) Get all even bits of x by doing bitwise and of x with 0xAAAAAAAA. The number 0xAAAAAAAA is a 32 bit number with all even bits set as 1 and all odd bits as 0.
2) Get all odd bits of x by doing bitwise and of x with 0x55555555. The number 0x55555555 is a 32 bit number with all odd bits set as 1 and all even bits as 0.
3) Right shift all even bits.
4) Left shift all odd bits.
5) Combine new even and odd bits and return.

// C program to swap even and odd bits of a given number
#include 
unsigned int swapBits(unsigned int x)
{
    // Get all even bits of x
    unsigned int even_bits = x & 0xAAAAAAAA; 
    // Get all odd bits of x
    unsigned int odd_bits  = x & 0×55555555; 
    even_bits >>= 1;  // Right shift even bits
    odd_bits <<= 1;   // Left shift odd bits
    return (even_bits | odd_bits); // Combine even and odd bits
}
// Driver program to test above function
int main()
{
    unsigned int x = 23; // 00010111
    // Output is 43 (00101011)
    printf("%u ", swapBits(x));
    return 0;
}
Output: 
 43 
 
10. Write a function to set a particular bit.

unsigned int setbit(unsigned inr num,int pos)
{
 num = num | (1 << pos);
 return num;
}
 
11. Write a function to clear a particular bit.
unsigned int clear(unsigned inr num,int pos)
{
 num = num & ~ (1 << pos);
 return num;
}
12. Write a function to toggle particular bit.
unsigned int togglebit(unsigned inr num,int pos)
{
 num = num ^ (1 << pos);
 return num;
}
13. Write a function to swap even bits with consecutive odd bits in a number.
e.g. b0 swapped with b1, b2 swapped with b3 and so on.
unsigned int swap_bits(unsigned int num)
{
  return (num >> 1 & 0x55555555) | (num << 1 & 0xAAAAAAAA);
}

14. Write a function to swap odd bits in a number.
e.g. b1 swapped with b3, b5 swapped with b7 and so on.
unsigned int swap_odd_bits(unsigned int num)
{

 return (num >> 2 & 0x22222222) |

         (num << 2 & 0x88888888) |

         ( num   & 0x55555555) ; 
}
15. Write a function to swap even bits in a number.
e.g. b0 swapped with b2, b4 swapped with b6 and so on.
unsigned int swap_even_bits(unsigned int num)
{
  return (num >> 2 & 0x11111111) |
         (num << 2 & 0x44444444) |
         ( num   & 0xAAAAAAAA);}
16. Write a function to find out the number of 1s in a number.
unsigned int num_of_ones(unsigned int num)
{
 if( (count_ones(num) & 1) 
  return ODD;
 else
  return EVEN;
}
17. Write a function for finding the first lowest bit set in a number.
unsigned int first_lowest_bit(unsigned num)
{
 int count =0;
 while(num) {
  count ++;
  if( (num) & 1 == 1)
   break;
  num = num >> 1;
 }
 return count;
}
18. Write a function for finding the higest bit set in a number.
unsigned int first_highest_bit(unsigned num)
{
 int count =0;
 while(num) {
  count ++;
  if( (num & (1 << 31) ) == 1)
   break;
  num = num << 31;
 return count;
}
19 Write a function for reversing the bits in a number.
unsigned int reverse_bit(unsigned num)
{
 unsigned int NO_OF_BITS = sizeof(num) * 8;
 unsigned int temp,rev=0;
 for(i=0; i <= NO_OF_BITS -1 ;i++) {
  if(temp) {
   rev |= (1 << ((NO_OF_BITS-1)-i);
 }
 return rev;
}
20. Write a code to extract nth to mth bit, where n
(num >> n) & ~(~ 0 << (m-n+1))

21. write a code for toggling nth to m bits,where n < m
num ^ ((~ 0 << n) & ( ~0 >> (31-m)))


22. Write a code for setting nth to mth bit, where n < m
num | ((~0 << n) & (~0 >>(31-m)))
23. write a code for clearing nth to mth bit, where n  < m

num & ~((~0 << n) & (~0 >> (31-m))) 
 
Link List Question:
 
1. How to check whether linked list is circular or not.
Ans:
  
struct node {
    int data;
    struct node *next;
};
struct node *head = NULL;

void checkcircular(struct node *head)
{
    struct node * slow = head;
    struct node * fast = head;
    while( fast && fast->next) {
        if(slow == fast->next->next) {
            printf("Circular\n');
            break;
        }
        else {            
            slow = slow->next;
            fast = fats->next->next;
        }
    }
}

2. How would you find a loop in a singly linked list?

struct node {
    int data;
    struct node *next;
};

struct node *head = NULL:

void detectloop(struct node * head)
{
    struct node * slow = head;
    struct node * fast = head;
    while(slow && fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            printf("Loop detected\n');
            break;
        }
    }
}
3. Write a C function to print the middle of a given linked list.

struct node {
    int data;
    struct node *next;
};

void findmiddle(struct node *head)
{
    struct node * slow = head;
    struct head * fast = head;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = slow->next->next;
    }
    printf(" Middle element is %d\n", slow->data);
}

4. Write a c program to get the intersection point of two singly linked lists.

struct node {
    int data;
    struct node *next;
};

struct node * head = NULL:

int count_node(struct node * head) 
{
    int count = 0;
    struct node * current = head;
    while (current != NULL) {
        count ++;
        current = current->next;
    }
    return count;
}

struct get_intersection_mod(int d,struct node * head1, struct node * head2)
{
    struct node current1 = head1;
    struct node current2 = head2;
    
    for(i=0;i        cureent1 = current->next;
    }
    while(cuttent1 != NULL && current2 != NULL) {
        if(current1 == current2) {
            printf(" intersection node =%d\n", current1->data);
            break;
        }
        current1 = current1->next;
        current2 = current2->next;
    }
}

void get_intersecton(struct node * head1, struct node * head2)
{
    struct node *current = head1;
    struct node *current = head2;
    int c1, c2;
    c1 = count_node(current1);
    c2 = count_node(current2);
    if(c1 > c2) {
        d= c1 -c2;
        get_intersection_mod(d,head1,head2);
    }
    else {
        d = c2 -c1;
        get_intersection_mod(d, head1,head2);
    }
}
http://cinterviewquestionandanswer.blogspot.in/2014/06/function-pointers-and-callbacks-in-c.html
C String interview Question 
1. What will be output when you will execute following c code?
#include
void main(){
char arr[7]="Network";
printf("%s",arr);
}
Explanation:
Size of a character array should one greater than total number of characters in any string which it stores. In c every string has one terminating null character. This represents end of the string.So in the string “Network” , there are 8 characters and they are ‘N’,’e’,’t’,’w’,’o’,’r’,’k’ and ‘\0’. Size of array arr is seven. So array arr will store only first sevent characters and it will note store null character.
As we know %s in prinf statement prints stream of characters until it doesn’t get first null character. Since array arr has not stored any null character so it will print garbage value.



2.What will be output when you will execute following c code?
#include
void main(){
    char arr[11]="The African Queen";
    printf("%s",arr);
}
Explanation:
Size of any character array cannot be less than the number of characters in any string which it has assigned. Size of an array can be equal (excluding null character) or greater than but never less than.

3.What will be output when you will execute following c code?
#include
void main(){
    int const SIZE=5;
    int expr;
    double value[SIZE]={2.0,4.0,6.0,8.0,10.0};
    expr=1|2|3|4;
    printf("%f",value[expr]);
}
Explanation:
Size of any array in c cannot be constantan variable.

4.What will be output when you will execute following c code?
#include
enum power{
    Dalai,
    Vladimir=3,
    Barack,
    Hillary
};
void main(){
    float leader[Dalai+Hillary]={1.f,2.f,3.f,4.f,5.f};
    enum power p=Barack;
    printf("%0.f",leader[p>>1+1]);
}
Explanation:
Size of an array can be enum constantan.
Value of enum constant Barack will equal to Vladimir + 1 = 3 +1 = 4
So, value of enum variable p  = 4
leader[p >> 1 +1]
= leader[4 >> 1+1]
=leader[4 >> 2]   //+ operator enjoy higher precedence than >> operator.
=leader[1]  //4>>2 = (4 / (2^2) = 4/4 = 1
=2

5.What will be output when you will execute following c code?
#include
#define var 3
void main(){
    char *cricket[var+~0]={"clarke","kallis"};
    char *ptr=cricket[1+~0];
    printf("%c",*++ptr);
}
Explanation:
In the expression of size of an array can have micro constant.
var +~0 = 3 + ~0 = 3 + (-1)  = 2
Let’s assume string “clarke” and “kallis” has stored at memory address 100 and 500 respectively as shown in the following figure:
For string “clarke”:
For string “kallis”:
In this program cricket is array of character’s pointer of size 2. So array cricket will keep the memory address of first character of both strings i.e. content of array cricket is:
cricket[2] = {100,500}
ptr is character pointer which is pointing to the fist element of array cricket. So, ptr = 100
Now consider on *++ptr
Since ptr = 100 so after ++ptr , ptr = 101
*(++ptr) = *(101) = content of memory address 101. From above figure it is clear that character is l.

6.What will be output when you will execute following c code?
#include
void main(){
    char data[2][3][2]={0,1,2,3,4,5,6,7,8,9,10,11};
    printf("%o",data[0][2][1]);
}
Explanation:
%o in printf statement is used to print number in the octal format.

7.What will be output when you will execute following c code?
#include
void main(){
    short num[3][2]={3,6,9,12,15,18};
    printf("%d  %d",*(num+1)[1],**(num+2));
}
Explanation:
*(num+1)[1]=*(*((num+1)+1))=*(*(num+2))=*(num[2])=num[2][0]=15And**(num+2)=*(num[2]+0)=num[2][0]=15

8.What will be output when you will execute following c code?
#include
void main(){
    char *ptr="cquestionbank";
    printf("%d",-3[ptr]);
}
Explanation:
-3[ptr]=-*(3+ptr)=-*(ptr+3)
=-ptr[3]
=-103  //ASCII value of character ‘e’ is 103

9.What will be output when you will execute following c code?
#include
void main(){
    long  myarr[2][4]={0l,1l,2l,3l,4l,5l,6l,7l};
    printf("%ld\t",myarr[1][2]);
    printf("%ld%ld\t",*(myarr[1]+3),3[myarr[1]]);
    printf("%ld%ld%ld\t" ,*(*(myarr+1)+2),*(1[myarr]+2),3[1[myarr]]); 
}
Explanation:
Think yourself.

10.What will be output when you will execute following c code?
#include
void main(){
    int array[2][3]={5,10,15,20,25,30};
    int (*ptr)[2][3]=&array;
    printf("%d\t",***ptr);
    printf("%d\t",***(ptr+1));
    printf("%d\t",**(*ptr+1));
    printf("%d\t",*(*(*ptr+1)+2));
}
Explanation:
ptr is pointer to two dimension array.
***ptr
=***&array  //ptr = &array
=**array //* and & always cancel to each other
=*arr[0]  // *array = *(array +0) = array[0]
=array[0][0]
= 5
Rests think yourself.

11.What will be output when you will execute following c code?
#include
void main(){
    static int a=2,b=4,c=8;
    static int *arr1[2]={&a,&b};
    static int *arr2[2]={&b,&c};
    int* (*arr[2])[2]={&arr1,&arr2};
    printf("%d %d\t",*(*arr[0])[1],  *(*(**(arr+1)+1)));
}
Explanation:
Consider on the following expression:
*(*arr[0])[1]
=*(*&arr1)[1]  //arr[0] = &arr1
=*arr1[1]   //* and & always cancel to each other
=*&b
=b
=4
Consider on following expression:
*(*(**(arr+1)+1))
= *(*(*arr[1]+1))  //*(arr+1) = arr[1]
= *(*(*&arr2+1))  //arr[1] = &arr2
=*(*(arr2+1))  //*&arr2 = arr2
=*(arr2[1])  //*(arr2+1) = arr2[1]
=  *&c    //arr2[1] = &c
=  c
= 8

12.What will be output when you will execute following c code?
#include
#include
double myfun(double);
void main(){
    double(*array[3])(double);
    array[0]=exp;
    array[1]=sqrt;
    array[2]=myfun;
    printf("%.1f\t",(*array)((*array[2])((**(array+1))(4)))); 
}
double myfun(double d){
       d-=1;
       return d;
}
Explanation:
array is array of pointer to such function which parameter is double type data and return type is double.
Consider on following expression:
(*array)((*array[2])((**(array+1))(4)))
= (*array)((*array[2])((*array[1])(4)))
//*(array+1) = array[1]
= (*array)((*array[2])(sqrt(4))))
//array[1] = address of sqrt function
= (*array)((*array[2])(2.000000)))
= (*array)(myfun(2.000000)))
// array[2] = address of myfunc function
=(*array)(1.000000)
=array[0](1.000000)
=exp(1.000000)

13.What will be output when you will execute following c code?
#include
typedef struct{
    char *name;
    double salary;
}job;
void main(){
    static job a={"TCS",15000.0};
    static job b={"IBM",25000.0};
    static job c={"Google",35000.0};
    int x=5;
    job * arr[3]={&a,&b,&c};
    printf("%s  %f\t",(3,x>>5-4)[*arr]);
}
double myfun(double d){
       d-=1;
       return d;
}
Explanation:
(3,5>>5-4)[*arr]
=(3,5>>5-4)[*arr] //x=5
= (3,5>>1)[*arr] //- operator enjoy higher precedence than >>
= (3,2)[*arr]  //5>>1 = 5/(2^1) = 5 /2 = 2
= 2[*arr]  //In c comma is also operator.
= *(2 + *arr)
= *(*arr + 2)
=*arr[2]
=*(&c) //arr[2] = &c
=c   // *  and & always cancel to each other.
So,
printf("%s  %f\t",c);
=> printf("%s  %f\t", "Google",35000.0);

14.What will be output when you will execute following c code?
#include
union group{
    char xarr[2][2];
    char yarr[4];
};
void main(){
    union group x={'A','B','C','D'};
    printf("%c",x.xarr[x.yarr[2]-67][x.yarr[3]-67]);
}
Explanation:
In union all member variables share common memory space.
So union member variable, array xarray will look like:
{
{‘A’,’B’},
{‘C’,’D’}
}
And union member variable, array yarray will look like:
{
{‘A’,’B’,’C’,’D’}
}
x.xarr[x.yarr[2]-67][x.yarr[3]-67]
= x.xarr[‘C’-67][‘D’-67]
= x.xarr[67-67][68-67]
//ASCII value of ‘C’ is 67 and ‘D’ is 68.
x.xarr[0][1]
=’B’

15.What will be output when you will execute following c code?
#include
void main(){
    int a=5,b=10,c=15;
    int *arr[3]={&a,&b,&c};
    printf("%d",*arr[*arr[1]-8]);
}
Explanation:
Member of an array cannot be address of auto variable because array gets memory at load time while auto variable gets memory at run time.

16.What will be output when you will execute following c code?
#include
void main(){
    int arr[][3]={{1,2},{3,4,5},{5}};
    printf("%d %d %d",sizeof(arr),arr[0][2],arr[1][2]);
}
Explanation:
If we will not write size of first member of any array at the time of declaration then size of the first dimension is max elements in the initialization of array of that dimension.
So, size of first dimension in above question is 3.
So size of array = (size of int) * (total number of elements) = 2 *(3*3) = 18
Default initial value of rest elements are zero.  So above array will look like:
{
{1,2,0}
{3,4,5},
{5,0,0}
}         

17.What will be output when you will execute following c code?
#include
void main(){
    int xxx[10]={5};
    printf("%d %d",xxx[1],xxx[9]);
}
Explanation:
If we initialize any array at the time of declaration the compiler will treat such array as static variable and its default value of uninitialized member is zero.

18.What will be output when you will execute following c code?
#include
#define WWW -1
enum {cat,rat};
void main(){
    int Dhoni[]={2,'b',0x3,01001,'\x1d','\111',rat,WWW};
    int i;
    for(i=0;i<8 i="" span="">
         printf(" %d",Dhoni[i]);
}
Explanation:
Dhoni[0]=2
Dhoni[1]=’b’ =98  //ASCII value of character ‘b’ is 98.
Dhoni[2]=  0x3  =  3  //0x represents hexadecimal number. Decimal value of hexadecimal 3 is also 3.
Dhoni[3]=01001 = 513 //Number begins with 0 represents octal number.
Dhoni[4]  = ‘\x1d’ = 29 //’\x1d’ is hexadecimal character constant.
Dhoni[5] = ‘\111’ = 73 //’\111’ is octal character constant.
Dhoni[6] =rat = 1  //rat is enum constant
Dhoni[7] = WWW = -1  //WWW is macro constant.


19.What will be output when you will execute following c code?
#include
void main(){
    long double a;
    signed char b;
    int arr[sizeof(!a+b)];
    printf("%d",sizeof(arr));
}
Explanation:
Size of data type in TURBO C 3.0 compiler is:
S.N.
Data type
Size(In byte)
1
char
1
2
int
2
3
double
8
Consider on the expression: !a + b
! Operator always return zero if a is non-zero number other wisie 1. In general we can say ! operator always returns an int type number. So
!a +b
=! (Any double type number) + Any character type number
= Any integer type number + any character type number
= Any integer type number
Note: In any expression lower type data is always automatically type casted into the higher data type. In this case char data type is automatically type casted into the int type data.
So sizeof (!a +b) = sizeof(Any int type number)  = 2
So size of array arr is 2 and its data type is int. So
sizeof(arr) = size of array * sizeof its data type = 2* 2= 4


20.What will be output when you will execute following c code?
#include
void main(){
    char array[]="Ashfaq \0 Kayani";
    char *str="Ashfaq \0 Kayani";
    printf("%s %c\n",array,array[2]);
    printf("%s %c\n",str,str[2]);
    printf("%d %d\n",sizeof(array),sizeof(str));
}
Explanation:
A character array keeps the each element of an assigned array but a character pointer always keeps the memory address of first element. 
As we know %s in prints the characters of stream until it doesn’t any null character (‘\0’).  So first and second printf function will print same thing in the above program.  But size of array is total numbers of its elements i.e. 16 byte (including ending null character). While size of any type of pointer is 2 byte (near pointer).

Operating System Interview Questions :

Kernel Synchronization :
1. What are the differences between mutex and semaphore?
2. What is a race condition and How to avoid a race conditon?
3. What is a critial region?
4. What are atomic operations?

RTOS:
1. What are the differences between general purpose OS and and RTOS?
2. What are the characteristics of an RTOS?
3. What is the difference between a hard real time system and a soft real time system?
4. What is priority inversion and how to solve that problem?
5. What is priority inheritence?

Process management:
1. how to manipulate the current process
2. what are kernel thread.
3. how threads are implemented in linux kernel.
4. What are different state of a process in lunix.
5. what is difference between process and thread.
6. generally what resources are shared between threads.
7. what is process descriptor
8. what is task_struct.
9. what is therad_info structure for.
10. what was the need of thread_info structure.
11. difference betwen fork() and vfork()
12. what is process context.
13. what is zombie process.
14. how parent less process is handles in linux.

Process Scheduling
1. what is process scheduling
2. what is cooperative multitasking and pre-emptive multitasking.
3. what is yielding.
4. what is limitation of cooperative multitasking.
5. I/O bound versus Processor bound process.
6. what is process priority.
7. What kind of priority is maintained in linux.
8. what is nice value.
9. what is virtual run time.
10. what are the available scheduling classes in linux.
11. which type os scheduling used in linux.
12. how next task is picked for scheduling.
13. what is scheduler entry point in linux.
14. what is waitqueus.
15. How context switching is handled in linux.
16. what is user preemption and kernel preemption

Syscalls:
1. what is syscalls.
2. how system calls are implemented in linux.
3. what happens when process in userspace calls a syscall.
4. what is the need of verifying parameter in definition of syscall.
5. what is system calls context.
6. why it is not recommended to writing new syscall.
 
Interrupts and interrupt handlers
1. what is interrupt and Types of interrupts e.g Software interrupts, Hardware interrupts, Edge Triggering and Level triggering ?
2. what is interrupt handler or ISR.
3. what is top halves and bottom halves.
4. How interrupt is registered.
5. what are different interrupt handler flags.
6. How interrupt are freed.
7. what are the considerations needs to taken care while writing interrupt handler.
8. what are shared handlers.
9. what is interrupt context.
10. how to disable and enable interrupts.
11. what are different bottom halves techniques in linux.
12. what is tasklets , softirq and workqueus and difference among them.
13. when to choose which bottom halves.
14. how to implements softirq , tasklets and workqueus.
15. how to schedule tasklet.
16. what is ksoftirqd.
17. How to disable bottom halves.
18. How locking between bottom halves handled.
19. Why we need preemption.
20. Explain about the interrupt mechanims in linux?
21. What are the APIs that are used to register an interrupt handler?
22. How do you register an interrupt handler on a shared IRQ line?
23. Explain about the flags that are passed to request_irq().
24. Explain about the internals of Interrupt handling in case of Linux running on ARM.
25. What are the precautions to be taken while writing an interrupt handler?
26. What is request_threaded_irq()
27. If same interrupts occurs in two cpu how are they handled?
28. How to synchronize data between 'two interrupts' and 'interrupts and process'.
29. How are nested interrupts handled?
30. How is task context saved during interrupt.
31. How to disable and enable interrupts ?
32. What are the different bottom-half mechanisms in Linux? Softirq, Tasklet and Workqueues and When to choose which bottom halves ? 
33. Explain about the concurrent work queues.
34. How to schedule tasklet or bottom half ?
35. How to disable bottom halves ?
36. What is ksoftirqd ?
37. How locking between bottom halves handled ?
38. diff b/w interrupt, signal,isr and callback ?
40 What happens if interrupt handler goes to sleep?
41. What happens if interrupt handler uses semaphores
41. How to protect variable between two interrupt handlers?
42. How to protect variable between task and interrupt handler?
43. What is the difference between interruptible and uninterruptible task states?
How to debug GPIO interrupt functions?
Timer interrrupts vs Dummy loops ?
How does MSI interrupt work in linux driver?
Which processor an interrupt will be generated on?
ARM interrupt service procedure vs function call procedure
Retrieving pid of tasklet
How do I write to a __user memory from within the top half of an interrupt handler?
Why can interrupt handler has sleep functionality?
Are the Interrupt Stack and the Kernel Stack the same stack?

Why interrupt handler cannot use user stack ?
What is a user thread and a kernel thread?
Number of kernel threads = cores?
Maximum number of threads per process in Linux?
cat /proc/sys/kernel/threads-max
There is also a limit on the number of processes (an hence threads) that a single user may create, see ulimit/getrlimit
Linux implements max number of threads per process indirectly!!
number of threads = total virtual memory / (stack size*1024*1024)
ulimit -s

Kernel Synchronization:
1. what is synchronization and various synchronization techniques in linux and Why do we need synchronization mechanisms in Linux kernel?
2. what is critical section
3. what is race condition and deadlock and hung task.
4. why we need to take care of synchronization
5. What are the differences between spinlock and mutex?
6. what is deadlocks.
7. what is atomic operations.
8. what is spin locks.
9. what is reader-writer spin lock.
10. what is semaphore.
11. what is binary semaphore.
12. what is difference between semaphore and spin lock.
13. when to choose what among spin lock and semaphore.
14. what is difference between semaphore and mutex.
15. what is preemption disabling and what is the use of this.
16. What is lockdep?
17. Which synchronization mechanism is safe to use in interrupt context and why?
18. Explain about the implementation of spinlock in case of ARM architecture.
19. Explain about the implementation of mutex in case of ARM architecture.
20. Explain about the notifier chains.
21. Explain about RCU locks and when are they used?
22. Explain about RW spinlocks locks and when are they used?
23. Which are the synchronization technoques you use 'between processes', 'between processe and interrupt' and 'between interrupts'; why and how ?

Process Management and Process Scheduling:
1. What are the different schedulers class present in the linux kernel?
2. How to create a new process?
3. What is the difference between fork( ) and vfork( ) and execv?
4. Which is the first task what is spawned in linux kernel?
5. What are the processes with PID 0 and PID 1? PID 0 - idle task and PID 1 - init .
6. How to extract task_struct of a particular process if the stack pointer is given?
7. How does scheduler picks particular task?
8. How is timeout managed?
9. How does load balancing happens?

Timers and Time Management:
1. what is tick rate and jiffies and HZ.
2. what are the various way of applying delay in linux.
3. what is blocking and non blocking call
4. what is Real time clock (RTC).
5. how busy looping is implemented in linux.
6. What is the initial value of jiffies when the system has started? and how to check it ?
7. Explain about HR timers and normal timers?
8. On what hardware timers, does the HR timers are based on?
9. How to declare that a specific hardware timers is used for kernel periodic timer interrupt used by the scheduler?
10. How software timers are implemented?

Memory management:
1. how memory is managed in linux.
2. what are pages.
3. what are different memory zones in linux.
4. how to allocated pages.
5. how to freeing page.
6. what us kmalloc and what are action modifier we can pass while using kmalloc.
7. what is zone modifier in linux.
8. what is vmalloc
9. What are the differences between malloc,zmalloc, vmalloc and kmalloc? Which is preferred to use in device drivers?
10. What are the differences between slab allocator and slub allocator?
11. What is boot memory allocator?
12. How do you reserve block of memory?
13. What is virtual memory and what are the advanatages of using virtual memory?
14. What's paging and swapping?
15. Is it better to enable swapping in embedded systems? and why?
16. What is the page size in Linux kernel in case of 32-bit ARM architecture?
17. What is page frame?
18. What are the different memory zones and why does different zones exist?
19. What is high memory and when is it needed?
20 Why is high memory zone not needed in case of 64-bit machine?
21. How to allocate a page frame from high memory?
22. In ARM, an abort exception if generated, if the page table doesn't contain a virtual to physical map for a particular page. How exactly does the MMU know that a virtual to physical map is present in the pagetable or not?

Virtual file system: 
1. what is virtual file system and what is the need of it in linux.
2. are are different object types in VFS.
3. what are the operations possible on inode and superblock objects.

1. What is the need for Virtual Memory ?
2. What is the difference between the term 'Virtual Memory' and 'Virtual Address Space' ?
3. Can an user space application view the physical address Or Can an user space application access the physical address space ?
4. Is it possible for two different application to have a same virtual address but point to different physical memory ?
5. What are the functionalities performed by _start ?
6. What is the difference between Code section, Data section, ro Data section & BSS section ?
7. What is the expansion of BSS and What is the need for BSS ?
8. What is the size of the Kernel space and that of User space ? Who decides the size of it . Is it dependent/done by Processor or MMU ?
9. Tell one of the etry point to kernel ?
10. Explain the system call mechanism such that the flow is from User space to Kernel space & returning back to User space ?
11. What is the use of SYSENTER ? Does it get executed in Userspace ?
12. What is the use of SYSEXIT ? Does it get executed in Kernelspace ?
13. What is the role of __sys_open ?
14. What is the use of ABI (Application Binary Interface) document ? Who provides that manual ?
15. How do you see the size of an executable file in Linux ?
16. What is the probable size of normal vmlinux ? What kind of sizes have you come across in normal linux and embedded linux scenarios ?
17. What is vmlinux.lds ?
18. Why do you find all addresses to start after '0xC0000000' if you do 'readelf -a vmlinux' ? Can you access those addresses ?
19. What is a FDT (File Descriptor Table) ?
20. Explain the relation between File Descriptor table, Symbol File table, iNode table and harddrive/phy memory ?
21. What command is used to setup/create the relation between the device and inode ?
22. What command/API is used to create an inode for a file ?
23. What is the use of 'file_operations' ? How have you used it ?
24. What is the use of /proc/PID/maps ?
25. What is task_struct ?
26. Explain the relation between file struct,File Descriptor Table(FDT), task_struct, MM_struct, vm_area_struct, Heap, Page Global Directory(PGD), Page table(PT) & user page .
27. What is the use of ioctl fuction ?
28. Explain one level page table address translation between VA and PA with an example ?
29. Explain multi level page table address translation between VA and PA with an example ?
30. Is it better to have less level of page table address translation or more levels of page table address translation ? What is the impact on performance w.r.t memory size and memory access ?
31. What is the difference between malloc and vmalloc ?
32. What is PAE (Physical Address Extension) ?
33. What is Dual Mapping ? Can a user virtual address and kernel virtual address map to the same physical address ?


Process Address Space:
1. what is process address space.
2. what is memory descriptor in linux and which structure represents it.
3. how to allocate and destroy a memory descriptor
4. does kernel thread has any association with mm_struct.
5. what is VMA and what are various VMA operations possible in linux kernel.
6. how to manipulate memory area in linux.
7. what mmap and do_mmap().
8. what is page tables.
 
Linux Device Driver :
1. What is device driver and what is the need of it.
2. what are different kind of devices.
3. what is module in linux.
4. how mudules are loaded in linux.
5. difference between insmod and modprobe.
6. how parameters are shared between driver modules.
7. what are IOCTLS.
8. what is syscalls.
9. what are the benefits of syscalls.
10. how character driver is registered in linux.
11. what is init and exit function of a driver.
12. how and when init and exit function of driver get called.
13. what is probe function.
14. when probe is get called.
15. what is platform devices.
16. what is device tree.
17. what are the benefits of device tree over board files.
18. what is sysfs and procfs.
19. how logs are printed in linux kernel and what are the logs level available in linux.
20. what is copy_to_user and copy_from_user.
21. what do you mean by kernel configuration and what are the various way of configuring kernel.
22. what is menuconfig.
23. what is ioremap
24. what is seagmentation fault.
25. what are the various ways od debugging linux kernel.
26. how linux kernel boots.
27. what is zimage and bzimage.
28. what are different booting arguments in linux.
29. how parameter are passed from boot loader to kernel.
30. what is ATAGS.
31. from which file kernel execution starts.
32. what is bootloader.
33. what is primary and secondary bootloader.
34. why we need two bootloader.
35. difference between poll and select.
36. what is priority inheritance and priority inversion.
37. what are different type of kernel.
38. what is DMA.
39. what is cache coherency.
40. what is copy on write.
41. what is highmem and lowmem.
42. what happens if we pass invalid address from userspace by using ioctls.
43. what are different ipc mechanism in linux.
44. what are sockets.
45. how page fault is handled in linux.
46. difference between memory based io and port based io.
47. what is I2c and SPI.
48. how physical to virtual translations works in linux.
49. what is thrashing, segmentation and fragmentation.
50. what is preempt_count and what is the need of that.
51. What is mknod and it's usage ?
52. In how many ways we can allocate device number ?
53. How can we allocate device number statically and dynamically and how to free device number?

Linux Kernel Modules:
1. Explain about the Linux Device Model (LDM)?
2. Explain about about ksets, kobjects and ktypes. How are they related?
3. How to make a module as loadable module?
4. How to make a module as in-built module?
5. Explain about Kconfig build system?
6. Explain about the init call mechanism.
7. What is the difference between early init and late init?
8. What is process kernel stack and process user stack? What is the size of each and how are they allocated?
9. Why do we need seperate kernel stack for each process?
10. What all happens during context switch?
11. What is thread_info? Why is it stored at the end of kernel stack?
12. What is the use of preempt_count variable?
13. What is the difference between interruptible and uninterruptible task states?
14. How processes and threads are created? (from user level till kernel level)
15. How is virtual run time (vruntime) calculated?
16. Difference between uart_register_driver and platform_driver_register?
17. How to do a single dma transaction in kernel?
18. Translating virtual address to physical address in kernel space?
19. Can we have same major number for more than one device file ?
20. What is minor  number and it's usage ?
21. What is range of major and minor numbers?
22. How to retrieve major and minor number from dev_t type ?
23. How can i use my own major and minor number for a device file ?
24. How to see  statically assigned major numbers ?
25. how interrupt id and ISR is mapped?
26. How to pin a interrupt to a CPU in driver
27. How many maximum different CPU-Cores can be used to processing of one IP-packet?
28. What are the different modes in ARM.
29. What is the difference between IRQ & FIQ.
30. how the synchronisation works in single processor system(spinlock_irq_save).
31. how external devices access the physical address.
32. what is basic difference in insmod & modprobe.
33. What is the difference between Platform driver and normal device driver..?
34. What happens to the idle thread when a core is taken offline logically?
35. What is meant by system call?
36. What is the difference between programs and Kernel Modules?
37. What is the difference between user space and kernel space?
38. What is the importance of  /proc and /sys File system ? 
39. What is the difference between printf() and printk() ?
40. How a user mode is transferred to kernel mode?
41. How system call causes change from user to kernel space
42. Which RTOS worked on. Difference between various OS/RTOS
43. Measure of performance of OS. Define performance
44. What are the various code optimization techniques used
45. memory leak deduction and various ways of handling
46. How to proceed if system is sluggish
47. How to determine if some high prio task is hogging CPU
48. Important things to look for in code reviews
49. Understanding of schematics
50. Why driver code in not written in C++/Java
51. How to debug while system is running
52. Run Time optimization
53. what is repeate sequence in I2C?
54. How this signal will look on CRO?
55. How many lines required for SPI communication?
56. Do you need to change Clock polarity and phase for SPI?
57. Who has control of SPI clock?
58. Explain board bring up.
59. how will you verify I2C communication?How will you know if there was a software or hw problem?
60. How will you know if the I2C lines are noisy?
61. Have you worked in crash dump?
62. How will you solve memory crash, what steps would you take if a crash occurs?
63. Data sharing between ISR and threads?
64. what is NAND and NOR flash, diff between them?
65. What monitoring tools have you used like I2C sniffer
66. who schedules the scheduler
67. what is cache coherence?
68. Can a scheduler can be locked?
69. At what frequency scheduler looks for threads/processes ready for schedule?
70. what actually does a system does in a tick?
71. When cahche is enabled in a operating system ,DMA is enabled,how does DMA access the cache?
72. Diff btwn SPI & I2C
73. When a signal is raised on a interrupt line what will be passed to processor either interrupt number or anything else?
74. How kernel comes to know which device raised an interrupt when  interrupt  is shared.
75. How can an application can talk to specific device in this below case ?
      having Hard Disk devices
        SATA,SATA1,SATA2
76. if their a devce driver registered for these devices and a single drivere is used to manage thesr devies then how can an application talk to a sepcific device
Ex: if i want to read from SATA1 hard disk and Write to SATA0 and SATA1  hard disk.
How do you establish a sync mechanisam in above hard disk scenarios.
When a Mutex lock is aquired by a low priority task and High priority trys to acquires the lock
      will the low priority task will be pre emitted
The same above scenario is with sema and spinlock
77. How can two slaves can communicate with master in i2c protocol at a time?
78. How can we address different devices from same vendor i2c?
79. What is I2C protocol,I2C- dummy write,repeated start,arbitration,synchronization between masters
80. How to know whether a interrupt is an edge triggered or level triggered from registering an interrupt handler?
81. what is  i2c bus error
82. What are the different data transfer modes?
83. What are the different types of device descriptors?
84. How many END point descriptors can be present per device?
85. DO you know container macros? In all most all kernel drivers it is used?
86. What is the clock frequency used in your I2C driver designed?
87. What is the start bit condition in I2C?
88. How the master knows what is the start condition ?
89. while in between I2C communication what happens if clocks happends to be dragged low which is not as per i2c standard?
90. What if the slave device is not responding or no acknowledge bit is sent by slave device?
91. how to get physically contiguousness memory allocation if kmalloc is giving logical contiguousness allocations?
92. what is the entry points in kernel?
93. How to write a makefile to build a customized kernel
94. How to debug crash, what is the first line you see when you see a crash/oops message, explain crash console
95. How do you build only a static (.a) library for kernel modules.
96. Kernel thread vs user space thread and kernel process vs user space process and What was the need of thread_info structure?
97. Thread switching and process switching in linux kernel ?
98. How context switching is handled in linux?
99 zombiee and orphon process and How parent less process is handles in linux ?
100. What is page fualt and how it is handled in linux kernel?
101. What is local static and global static with example? 
102. Device tree  vs board file?
103. what is ioctl and What happens if you pass a invalid user space address in an ioctl?
104. Tell me any issue in which you debugged and found that there is some issue in hardware?
105. pull up / pull down register?
106. Maximum size you can allocate using kmalloc?
107. What message you will get if memory is not availeble?
108. What kind of priority is maintained in linux ?
109. What is user preemption and kernel preemptio
110. Why is interrupt disabled between spin_lock and spin_unlock in Linux?
111. sleep-free kernel functions ?
112. What is the exact definition of 'process preemption'?
113. nested interrupt is allowed in linux, but the size of interrupt stack is limited,is there any chance that too many nested interrupts cause stack overflow which crashes the whole system!
114. how it differs from user thread ?.
what is the relationship between the two threads ?.
how can i implement kernel threads ?.
Why must all user threads be mapped to a kernel thread?
What kind of hardware do the newer kernels support?
How do I identify which interrupt line shown in /proc/interrupts list is shared?
How does the Linux kernel handle shared IRQs?
What is the relationship between fork() and pthread_atfork() in Linux?
What is the relationship between System Call and Software Interrupt in Linux?
How does the fork() system call in Linux work?
user/kernel interface (system calls, procfs/sysfs, ioctl) :
synchronization between contexts (how would you synchronize access to a shared memory area used from an interrupt handler and a workqueue on a SMP preemptive kernel).
are you familiar with the Linux kernel development process? Do you have any patch accepted in the mainline?
What are good ways to debug memory corruption in C under Linux?
How do I debug a kernel module in which a NULL pointer appears?
How to let kernel not run the printk with KERN_DEBUG
How do I include the device tree with my kernel?
How to attach file operations to sysfs attribute in platform driver?
How size of virtual memory is decided and calculated in Linux ?
How to remove packet from UDP read buffer in kernel?
How can I bind my own serial device with a driver?
How does Linux Kernel know where to look for driver firmware?
How to create a device in /dev automatically upon loading of the kernel module for a device driver?
sudo mknod -m 0666 /dev/msio c 22 0
How to use netlink socket to communicate with a kernel module?
How to implement a Linux Device Driver for Data Acquisition Hardware?
How to find owner socket of sk_buff in Linux kernel?
Why Socket Connection Blocked and TCP Kernel Keeps Retransmitting [ACK] packets


Linux Kernel Debugging
1. What is Oops and kernel panic and how to understand the panic stack?
2. Does all Oops result in kernel panic?
3. What are the tools that you have used for debugging the Linux kernel?
4. What are the log levels in printk?
4. Can printk's be used in interrupt context?
6. How to print a stack trace from a particular function?
7. What's the use of early_printk( )?
8. Explan about the various gdb commands and features of gdb ?

Power Management in Linux:
1. Explain about cpuidle framework.
2. Explain about cpufreq framework.
3. Explain about clock framework.
4. Explain about regulator framework.
5. Explain about suspened and resume framwork.
6. Explain about early suspend and late resume.
7. Explain about wakelocks.

Miscellaneous:
1. How are the atomic functions implemented in case of ARM architecture?
2. How is container_of( ) macro implemented? 
3. Explain about system call flow in case of ARM Linux.
4. What 's the use of __init and __exit macros?
5. How to ensure that init function of a partiuclar driver was called before our driver's init function is called (assume that both these drivers are 	 built into the kenrel image)?
6. What's a segementation fault and what are the scenarios in which segmentation fault is triggered?
7. If the scenarios which triggers the segmentation fault has occurred, how the kernel identifies it and what are the actions that the kernel takes?

Linux Boot Sequence:
1. Explain about the Linux boot sequence in case of ARM architecture?
2. How are the command line arguments passed to Linux kernel by the u-boot (bootloader)?
3. Explain about ATAGS?
4. Explain about command line arguments that are passed to linux kernel and how/where they are parsed in kernel code?
5. Explain about device tree.

Below is the interview questions asked in an interview in Vihaan Networks for the position of Embedded Engineer having  skills of Linux Device Driver , Linux Kernel Programming, Embedded C programming , BSP, RTOS , Linux Kernel Debugging , I2C, SPI , Bootloader etc.
1.	What is breakpoints?
2.	How software and hardware breakpoints are implemented?
3.	What is volatile constant ?
4.	What is the need of volatile constant in embedded systems?
5.	How you will analyze Linux Kernel   crash dumps ?
6.	How pagefault is handled in linux kernel?
7.	What is sempahore and mutex?
8.	What is the difference  in semaphore and Mutex?
9.	What is the difference  b/w spinlock and semaphore?
10.	When to use Semaphore and Mutex?
11.	What is the difference  between constant and macro?
12.	What is difference  between inline function and macro?
13.	Questions Related to i2c
14.	Question Related to DMA
15.	Tell about Process address space of a c program?
16.	Difference  between local static and global static? 
17.	How compiler maintain the scope of local static or global static variable?
18.	Why can't we go for sleep while handling interrupt?
19.	How nested interrupts are handled in ARM?
20.	Different modes in ARM ?
21.	What are the benefits using FIQ?
22.	Tell me the Linux kernel Booting sequence? 
23.	How you will find out the issues if your device is not booting?
24.	What is reset vector
25.	pull up and pull down register?
26.	Edge triggered and level triggered Interrupt?
27.	Maximum size you can allocate using kmalloc?
28.	What message you will get if memory is not available?
29.	What is the significance of spinlock on uniprocessor system?


I2C and SPI :
Hey dudes, the following interesting questions related to I2C and SPI protocol can be used for  discussion.

1. Can devices be added and removed while the system is running (Hot swapping) in I2C ?
2. What is the standard bus speed in I2C ?
3. How many devices can be connected in a standard I2C communication ?
4. What are the 2 roles of nodes in I2C communication ?
5. What are the modes of operation in I2C communication ?
6. What is bus arbitration ?
7. Advantages and limitations of I2C communication ?
8. How many wires are required for I2C communication ? What are the signals involved in I2C ?
9. What is START bit and STOP bit ?
10. How will the master indicate that it is either address / data ? How will it intimate to the slave that it is going to either read / write ?
11. Is it possible to have multiple masters in I2C ?
12. In write transaction, the Master monitors the last ACK and issues STOP condition - True/False ?
13. In read transaction, the master doesnot acknowledge the final byte it receives and issues STOP condition - True/False ?
14. What is SPI communication ?
15. How many wires are required for SPI communication ?
16. What are the 4 logic signals specified by SPI bus ?
17. Does SPI slave acknowledge the receipt of data ?
18. SPI has higher throughput than I2C - True / False ?
19. Is it better to use I2C or SPI for data communication between a microprocessor and DSP ?
20. Is it better to use I2C or SPI for data communication from ADC ?
21. Duplex communication is possible by simultaneously using MOSI and MISO during each SPI clock cycle - True / False ?
22. Is it possible to connect SPI slaves in daisy chain ?
23. What is the role of shift register in Master and Slave devices in SPI ?
24. How will the master convey that it is stopping the transmission of data ?
25. What is bit banging ?
What is the difference between RS232 and UART?
What makes SPI faster than I2C protocol ?
What is the difference between Synchronous and Asynchronous?
How many i2c slaves can a i2c master support?

Kernel :
1. How are FLIHs and SLIHs termed in Linux ?
2. What is the main drawback for not considering Linux as realtime ?
3. What is the type of scheduler used in Linux Kernel 2.5 ?
4. What are the types of scheduler used in Linux Kernel 2.6 to 2.6.23 and after Linux kernel 2.6.23 ?
5. CFS scheduler in Linux is based on red-black tree - True / False ?
6. O(1) scheduler in Linux is based on run queues - True / False ?
7. Is the architecture of linux kernel monolithic / microkernel ?
8. How will you trace the system calls made into the kernel of lInux ?
9. Tell about the Linux Kernel Compilation method ?
10. What is 'make mrproper' and how is it different from 'make clean' ?
11. What is Kmalloc and how does it differ from normal malloc ? or Why can't we use malloc in kernel code ?
12. Does the scheduler assign a zombie state to a process ?
13. Brief up 'vmalloc' vs 'kmalloc' ?
14. Brief up 'malloc' vs 'kmalloc' ?
15. How modules begin and end in LInux ? Tell the difference between Modules and Program ?
16. What is mmap ?
17. What are the advantages of mmap over read ?
18. Most of Unix kernels are monolithic - True / False ?
19. Why is microkernel slower than monolithic kernel ?
20. What are the advantges of microkernel over monolithic kernel ?
21. What is a 'Module' ?
22. What are the main advantages of using a 'Module' ?
23. Once linked in, the object code of a 'module' is equivalent to the object code of the statically linked kernel - True / False ?
24. What are the limitations of hard links / What are advantages of soft links ?
25. Unix Kernels are Reentrant - True / False ?
26. What is Kernel Control Path ?
27. What is the drawback in using semaphore for synchronization ? How does spinlock help in overcoming it ?
28. What does a semaphore consist of ? and What does a spinlock consist of ?
29. Why spinlocks are useless in uniprocessor systems ?
30. What are the two kinds of system events ?

Microprocessor
This is a collection of microprocessor(general) based questions that can be discussed.

1. What are the two famous architecture of CPU ?
2. What is the difference between Harvard and Von Neuman architecture ?
3. What is the use of instruction cache ?
4. Is it good to have more instruction cache or data cache ?
5. What is the use of data cache ?
6. What is the use of TLB ?
7. What do you mean by Cache Hit or Cache Miss ? What is cache hit rate ?
8. What is the difference between read miss and write miss ?
9. How does cache hit or cache miss determine the selection of processor ?
10. What is cache line or cache block ?
11. What is write-back or copy-back cache ?
12. What is the need for cache coherence protocol ?
13. What are the 3 kinds of cache misses ? or Which of the below causes the most delay and why ? Instruction read miss, Data read miss, and Data write miss .
14. What is boundary alignment and what is the use of it ?
15. What will happen if the data being fetched exceeds the cache line size ? or
if the data is not being aligned at the beginning of cache block ?
16. How can grouping of data can improve the cache based operations from application-side ?
17. What is cache prefetch ?
18. Brief up on pipelined versus Run-to-Completion processor software architecture ?
19. Why multicore processors are preferred to improve performance rather than trying to make a single processor based system faster ?
20. Does memory access speed varies at various stages ? Which is the fastest memory that you can directly deal with from a processor or Which type of memory of a CPU has almost zero percent latency ?
21. What is temporal locality and spatial locality ?
22. What are the applications of temporal locality and spatial locality ? or where are they applied in a CPU architecture ?
23. What is the use of Shadow Registers in ARM architecture ?
24. How will you calculate the idle time off a processor ?
25. How will you identify the endianness of a processor programatically ?
26. What is Memory Overlay ?
27. Tell about Bank Switching ?
28. What are the Disadvantages of Bank Switching ?
29. Why is the size of L1 cache smaller than that of the L2 cache in most of the processors ?
30. When should one use polling method and when should one use interrupt based method ? Are there scenarios in which both can be used ?
31. What could be the better way to determine the exact locations in which the prefetch instruction should be used ?
32. Considering that a processor runs at 100 MHz and the data is coming to the processor from an external device/peripheral at the rate of 1000 Mbit/s (8 Bits/Clockcycle @ 125 MHz), which is the best way to handle traffic that comes at a higher speed to the processor ?
33. Consider that there are 100 plus ways of interrupts occuring from various sensors. There are chances that all can occur at the same time too. How can the software be designed to handle it efficiently ?
34. What is Write-Back Cache ?
35. What is Write-Through Cache ?
36. What is cache coherency ?
37. What is Clock Cycles Per Instruction (CPI) ?
38. What is IPC(Instructions per cycle) ?
39. Tell about the 'nested interrupt handler' , 'reentrant interrupt handler' and ' prioritized direct interrupt handler' ?
40. What is Memory Banking ? Explain w.r.t 8051 architecture
41. What is Primary Memory and What is Secondary Memory ?
42. What is the advantage of MMU ?
43. How do you determine the direction of stack growth ?
44. What is the debugger that you have used ?
45. Have you used any emulator. If yes, how have you used it ?
46. Can you tell a scenario that was very difficult to solve / fix ?
47. Have you worked on optimization w.r.t memory usage ? What techniques have you followed to optimize ?
47. Have you worked on optimization w.r.t throughput / speed ? What techniques have you followed to optimize ?
48. What kind of co-processors have you used ?

Multicore processor
Initially multicore processors were used mainly in telecom industry. But, nowadays, these multicore processors have made inroads into almost every technology/industry. Here are a few basic multicore processor based questions that can be discussed upon..

1. Will increasing the number of cores, increase the throughput of your system ?
2. What are the general methods of communication between the cores ?
3. When is it better to use single core processor compared to multi-core processor ?
4. If the CPU in a multi-core processor updates the data in the cache, copies of data in caches associated with other cores will become stale. How is the multicore processor designed to handle this scenario ?
5. What is 'Run to Completion' software architecture ?
6. What is a 'Pipelined' software architecture ?
7. What is the difference between 'Run to Completion' and 'Pipelined' software architecture ?
8. How is the debugging and testing environment in the case of multithreaded/multiprocessing applications ?
9. At what point does adding more processors or computers to the computation pool slow things down instead of speeding them up?
10. Is there an optimal number of processors for any given parallel program?
11. How Many Processes or Threads are enough for an application ?

Operating System
Earlier, i listed few of the good and highly interesting RTOS queries for discussion. Here, i am listing general Operating System based interview questions that can be discussed upon.

1. What is an interrupt Vector ?
2. How CPUs find the ISR and distinguish between the various devices ?
Is it possible for two devices to share an interrupt request line but have different ISR for those two devices ?
3. What is page fault ?
4. Which hardware unit of processor detects the page fault ?
5. Difference between Monolithic kernel, Micro kernel and Hybrid kernel ?
6. What is Interrupt Descriptor Table (IDT) ?
7. Main Difference between a process and thread ?
8. Threads are lightweight. Why and How ?
9. STACK growth is in downward direction in the case of 80x86 processor - True/False.
10. What is the difference between Multiprogramming and Multiprocessing ?
11. What is parallel programming ?
12. What is a time slice ?
13. What is the difference between multiprogramming and multiprocessing ?
14. What is parallel programming ?
15. What is ABI (Application Binary Interface ) ?
16. What is the layout of a program image in main memory ?
17. What are the types of IPC mechanisms ?
18. Tell about shared memory ? Does it provide locking mechanism ? When is it typically used ?
19. What are the types of synchronization problems and what are the resources that can cause such problems ?
20. What is data race ?
21. What is Indefinite Postponement / Indefinite blocking or starvation ?
22. What is Deadlock ?
23. What are the synchronization relationships that are present in a multithreaded or mulitprogramming applications ?
24. How Many Processes or Threads Are Enough for an application ?
25. How does memory segmentation help in memory protection ?

 RTOS
RTOS has become very important as it is concerned with time critical events. Okay, let me list down few of the famous RTOS questions that can be discussed here.

1. What is priority inversion ?
2. What are the solutions for priority inversion ?
3. What is priority inheritance ?
4. What is priority ceiling ?
5. What is deadlock ?
6. What is the famous diners problem ?
7. What is mutex ?
8. What is spinlock ?
9. Where are spinlocks used ?
10. What do you mean by atomic operations ?
11. what is a semaphore ?
12. What are the types of semaphore ?
13. What is binary semaphore ?
14. What is a counting semaphore ?
15. What is message queue ?
16. What is the role of a scheduler ? How does it function ?
17. What is the difference between a normal OS and RTOS ?
18. What is preemption ?
19. What is preemptive multi-tasking/time-sharing ? What is its difference with co-operative multi-tasking/time-sharing ?
20. Threads are described as lightweight because switching between threads does not involve changing the memory context - True/False ?
21.What are the factors considered for a RTOS selection ?
22. What is the use of the method of temporarily masking / disabling interrupts ? When is it used ? What should be taken care while doing this method ?
23. Since, disabling/masking of interrupts can be done whent the critical section is ONLY SHORT,What method can be used if the critical section is longer than few source lines or if it involves few lengthy loopings ?
24. Difference between semaphores and disabling/masking of interrupts method ?
25. Binary semaphore is equivalent to Mutex - True/False. How ?
26. How can you avoid deadlocks incase of semaphore based designs ?
27. What is Message passing method ? What is its advantages ?
28. Tell about the design of Interrupt Handler and Scheduler in RTOS ?
29. What is interrupt latency ?
30. Even if we never enables interrupts in the code, the processor automatically disables them often during hardware access - True/False ? In this case how to reduce interrupt latency ?
31. When should we re-enable the interrupts in an ISR and why ?
32. How do you measure the latency of your system ?
33. What are First Level Interrupt handlers and Second level Interrupt handlers ?
34. What could be the typical design/implementation of FLIH and SLIH ?
35. Reentrant interrupt handlers might cause a stack overflow from multiple preemptions by the same interrupt vector - True / False ?
36. What kind of memory allocation procedure is good for embedded systems ?
37. Is there any RTOS that has non-preemptive scheduling ?
38. What is reentrant code ?
39. What is preemptive multitasking ?
40. What does timeslice refer to ?
41. If the time slice is too short then the scheduler will consume too much of processing time - True / False
42. What is I/O bound ? What is CPU bound ?
43. What is non-preemptive multitasking ?
44. CFS uses 'nanosecond' granularity accounting, the atomic units by which individual process share the CPU instead of previous notion of 'timeslice' - True/False .
45. When will you use binary semaphore ?
46. When will you choose busy-wait instead of context switch ?
47. What are the possible scenarios in which context switching of threads can occur ?
48. Can you use mutex/semaphore inside an ISR ?
49. Explain a scenari that could cause deadlock ? What is the best solution for a deadlock ?
50. Will the performance of your application improve if it has only a single thread and it is running on multiple cores of a processor ?
51. What will happen if there are more threads requesting for CPU resource such as time ?
52. What is Gang Scheduling and how is it useful ?
53. Can you sleep in interrupt handler ?
54. What is the main drawback for not considering Linux as realtime / RTOS ?
55. What is the drawback in using semaphore for synchronization ? How does spinlock help in overcoming it ?
56. What does a semaphore consist of ? and What does a spinlock consist of ?
57. Why spinlocks are useless in uniprocessor systems ?
58. What is timeslice ?
59. What is the difference between multiprogramming and multiprocessing ?
60. What is parallel programming ?
61. What are the types of IPC mechanisms ?
62. What are the types of synchronization problems and what are the resources that can cause such problems ?
63. What is data race ?
64. What is Indefinite Postponement / Indefinite blocking or starvation ?
65. What are the synchronization relationships that are present in a multithreaded or mulitprogramming applications ?
66. How Many Processes or Threads Are Enough for an application ?
67. Tell the advantages and disadvantages of Co-operative multitasking.
67. When should we use mutex and when should we use semaphore ?

 Boot loader
Here are boot loader related questions that are of great interest and that can be used for our discussions.... Check it out !

1. What are the various boot loaders that you have worked on ?
2. Where is the boot loader present in an embedded system design ?
3. In general, what does the boot loader do ?
4. What is the role of boot loader in embedded systems ?
5. How will you handle a scenario in which the boot software is erased/corrupted ?
6. How will you handle boot software erasure/corruption scenario if Boot ROM is not available ?
7. What do you mean by bootstrap loader and what does it do ?
8. Is booting different from bootstrapping ?
9. When the computer is powered ON, it does not have OS it in neither ROM nor RAM - True/False ?
10. What is a second-stage boot loader ?
11. Do LILO/GRUB/Syslinux belong to either first stage boot loader(small program) or second-stage boot loaders ?
12. What is network booting ?
13. What is Chain loading or Multi-stage boot loader ?
14. Can you brief up the boot sequence of a normal desktop computer ?
15. Tell about OMAP CPU booting ?
16. What are the most common boot modes of DSP processor ?
17. Give few examples for systems that use Host Port(HPI Boot) for DSP booting ?
18. How will you put U-Boot into the target board ?
19. TFTP is a stripped down version of FTP that does not require authentication - True/False ?
20. Why do you need 2 stage boot process in OMAP processor ?
21. Can you give a highlevel view of Linux Boot process ?
22. What is the role of MBR and its relation with BIOS ?
23. Where is the MBR located ?
24. What is the structure of MBR ?
25. The secondary, or second-stage, boot loader could be more aptly called the kernel loader - True / False
26. What is the relation between GRUB and filesystem while booting ? or Main Difference between LILO and GRUB ?
27. What is the difference between zImage and bzImage ?
28. What is the role of initrd/Initial RAM disk ?
29. What is the role of initrd/Initial RAM disk in Embedded systems ?
30. Can you tell about the major function-level flow for Linux i386 booting ?
31. Does GRUB involve a 3-stage boot loading ? If yes, what are they . Brief it ?

 Networking & Telecom - I
Hey guys, few questions that can keep us discussing for sometime...

1. What is network throughput ?
2. What is bandwidth ?
3. In which layer is network throughput normally measured ?
4. What is Bandwidth-delay product ?
5. What is goodput ?
6. What is maximum bandwidth for a TCP based communication ?
7. What is MTU ?
8. What is MSS ?
9. What is Path MTU discovery ?
10. Which layer of OSI model does fragmentation based on MTU ?
11. What is a LFN (Long Fat Network) ?
12. What is Jumbo Frames ?
13. What is difference between Fast ethernet n/w i/f card and Gigabit ethernet n/w i/f card ?
14. What is the difference between outb and outportb APIs ?
15. What is the need for retransmission mechanism ?
16. What is the need for retransmission mechanism at various layers ?
17. What is socket communication ?
18. What is the use of the following APIs - socket, bind, listen, connect, accept, send, poll, receive ?
19. Have you used 'select' API ?
20. What are the types of sockets ? What is the difference between the following - datagram sockets, stream sockets and raw sockets ?
21. Provide a brief description about TCP Connection Establishment / 3 way handshake method of TCP connection establishment.
22. What is the data structure used in TCP communication ?
23. Tell about TCP and UDP wrt Transport Layer of OSI model ?
24. Why is MTU size 576 bytes ?
25. Explain the communication between DCE(Modem) and DTE(PC) ?
26. What happens as soon as a packet arrives from the network in Linux ?
27. Why is the design of TCP servers mostly such that whenever it accepts a connection, a new process is invoked to handle it . But, why in the case of UDP servers, mostly there is only a single process that handles all client requests ?
28. Why does the client end of a connection use high port number(ephemeral ports) whereas the applications listen on typically small port numbers ?
29. When should you use UDP and When should you use TCP ? Also, give some realtime examples of applications that use TCP or UDP .
30. Difference between TCP and UDP ?
What is the difference between symbol rate and bit rate ?
31. What is BER (Bit error Rate / Bit Error Ratio)?
32. What is Spatial Multiplexing ?
33. What are the advantages of OFDM ?
34. In practice, OFDM signals are generated and detected using the FFT algorithm - True/False
35. What parameters can be changed for OFDM systems / Why should we not change Frequency ?
36. What is a Symbol in OFDM ?
37. What is the purpose of guard bands in OFDM ?
38. What do you mean by Tones in OFDM ?
39. Tell the 2 important tasks to be performed on the Receiver end of OFDM system ?
40. What is Turbo Codes ?
41. What are the advantages of Turbo Coding ?
42. What is Hybrid-ARQ ?
43. What is Frequency Reuse ?
44. What is Delay Spread ?
45. What is Call Processing ?
46. What is Reed-Solomon Error Correction ?
47. What is Reed-Solomon code and its areas of Uses ?
48. What is Shannon and its relation with Channel Capacity ?
49. What is "Channel Access Method" ?
50. What is FHSS - "Frequency-hopping spread spectrum" ?
51. What is TDM ?
52. Applications of TDM ?
53. What is TDMA ?
54. What are the features of TDMA ?
55. Tell few Systems that use TDMA ?
56. Tell about TDMA in 2G and 3G ?
57. Tell about CDMA vs TDMA ?
58. What is TDD ?
59. Examples of TDD systems ?
60. What is FDM ?
61. Applications of FDM ?
62. What is FDMA ?
63. What are the features of FDMA ?
64. What is FDD ?
65. Explain CDMA / IS-95 ?
66. What is spread spectrum and its use ?
67. What is the difference between UMTS and WCDMA ?
68. What does LAC stand for in CDMA ?
69. What is RLP and What is RLC ?
70. What are the basic ways to design the channel code and protocol for an error correcting system ?
71. What is convolutional code ?
72. What is the technology behind Mobile WiMAX ?
73. What is the technology behind LTE ?

 Flash Memory
The below set of queries can be used for discussion on Flash Memory.

1. Why is serial flash memory preferred in embedded systems ?
2. Flash Memory is costlier than byte programmable EEPROM - True / False ?
3. MiniSD, MemoryStick are of NAND flash memory type - True / False ?
4. Flash memory's read access time is less than that of DRAM memory 's read access time - True / False ?
5. Flash memory has infinite number of erase-write cycles - True / False ?
6. NOR flash memory's usage is for random access read - True / False ?
7. NOR flash memory is preferred for XIP - True / False ?
8. NOR flash memory is more expensive than NAND flash memory - True/False ?
9. NAND flash memory's usage is for replacing the HDD and also to save space - True/False ?
10. NAND requires copying of memory contents into memory mapped RAM - True / False ?
11. A completely erased flash memory will have all corresponding bits set to 1 - True / False ?
12. Flash memory erases in both NOR and NAND flash memory is block basis - True / False ?
13. NAND flash memroy is not suitable for micrprocessor/microcontroller ROM - True / False ?
14. NOR memory is suitable for BIOS as it gives random access read/program - True/False ?
15. Why is NAND flash memory not suitable for ROM/Program memory of Microprocessor/Microcontroller ?
16. Erasure time of NOR flash memory is more than that of NAND flash memory - True/False ?
17. Write time of NOR flash memory is more than that of NAND flash memory - True/False ?
18. Why is blockwise erasure faster than that of bytewise erasure ?
19. Flash memory is a specific type of EEPROM - True / False ?
20. NAND flash memory is used for filesystems - True / False ? Why ?
21. In general, Flash Memory erase operation is slower than program operation . And the program operation is slower than read operation - True / False ?
22. In general, SPI interface is used by serial flash memory - True / False ?
23. What are the main areas of application of serial flash in embedded systems ?
24. NAND flash memory has greater storage density and lower cost per bit than NOR flash - True / False ?
25. What is XIP ? Where is it useful ?
26. What are the common Flash Memory problems ?
27. How will you test a Flash Memory ? Have you written any power on self test ?
How will you perform the following test procedures for flash memory -
a. Address bus test
b. Data bus test
c. Control signal test
d. Missing memory device test
28. Is writing to a flash memory straightforward ? How will you set/clear a particular bit of flash memory ?
29. How do you expand program memory space using Bank Switching/Code Banking ? Consider for 8051.
30. What are the disadvantages of Bank switching/Code Banking ? Consider for 8051.
31. Any alternative method to overcome drawbacks of Bank switching ?
32. What is the use of Common area in Code Banking ?
33. What is Overlaying ? Why is it popular in embedded systems ?

 ADC and DAC
Hey geeks, the below is a set of possible ADC/DAC basic questions that can be discussed.

1. What are the factors you consider for the selection of ADC ?
2. What do you mean by Resolution of ADC ?
3. How do you determine the number of bits of ADC is required for you ?
4. Which factor determines the number of iterations in SAR done to approximate the input voltage ?
5. What are the 2 methods of ADC interface ?
6. Can you brief up the steps involved in ADC interface with 8051 or any microprocessor for the EOC based method ?
7. Can you brief up the steps involved in ADC interface with 8051 or any microprocessor for the Interrupt based method ?
8. How do you select the particular channel of a ADC . For example, can you tell for ADC0809 ?
9. When will you make the OE high in case of ADC0809 ?
10. What will happen if SC and EOC are tied together in ADC0809 ?
11. What is sampling rate/frequency ?
12. What is the use of interpolation formula ? Are you aware of any interpolation formula ?
13. What is sample and hold ?
14. Are there any Megasample / Gigasample converters ? Where are they used ?
15. What is aliasing ?
16. What is Nyquist-Shannon theorem ?
17. Is it good to sample at a rate that is higher than that of Nyquist Frequency ?
18. What is quantization error and when does it occur ? What is the unit of measurement of it ?
19. How can dithering improve digitization of slowly varying signal ?
20. Which type of ADC implementation is good or should be chosen, if we need lot of channels ?

 ARM Processor
Hey All,
These are few very simple and general ARM processor questions that can be discussed -

1. What are the types of CORTEX-M series ?
2. How do you select a specific CORTEX-M processor ?
3. What is Trustzone System IP block ?
4. What is the use of T604 ? Have you used it ?
5. Have you come across LINARO ? Have you been involved in LINARO ?
6. What is pipeline shutdown ?
7. what are the kinds of protection available for SRAMS ?
How to use the single bit or double bit fault correction ?
8. What is interrupt pipelining ?
9. Explain the architecture of the CORTEX series ARM that you have used .
10. What is the use of the AMBA interface and where is it present in the architecture ?
11. What is branch prediction ?
12. What is out of order execution ? Have you considered it in selection of processor ?
13. If the pipleline is wider , the instruction throughput is high - True/False ?
14. What is the use of Neon Floating point engine ?
15. In what scenarios can neon do better than normal core ?
16. Is power dissipation more in neon compared to normal core ?
17. Incase of multimedia applications, what is the approximate number of times by which the throughput
is increased compared to normal core ?
18. Is Neon available with Cortex M or Cortex A series ?
19. Have you used RVDS ? Have you used gcc arm toolchain ? Which of these two tools is better ?
20. What is the use of --vectorize option ?
21. Have you used Palladium emulator ? Is it JTAG based ?
22. Have you used XDS510 emulator ?
23. What is Coresight System Trace Macrocell(STM) ?
24. What is the difference between 'intrusive trace' and 'non-intrusive trace' mechanisms ?
25. Which of the following is intrusive - printf, lttng, strace, ftrace, ltrace ?
26. Can you explain the flow from User application and the role of STM driver ?
27. What are the advantages and disadvantages of LTTng ?
28. What is hardware assisted instrumentation ?
29. What is the advantage of hardware assisted instrumentation over software instrumentation ?
30. What is PTM ?
31. What is TPIU ?
32. What is ITM ?
33. What is ETM ?
34. Low latency instrumentation is required for ISR tracing, Bootcode tracing . How is low latency
tracing achieved ?
35. STM cannot trace instructions. It traces only system level calls - True / False.
36. ETM is for data/program instructions & for cache/DMA level instructions - True / False.
37. In Kinetis, can SRAM be configured to act as either NVRAM or EEPROM ? Have you configured or tried it ?
38. How many power modes are there in Kinetis ? Can you tell the wakeup/recovery time for every mode ?
Which mode has the fastest recovery time ? Which mode has the lowest current consumption ?
39. Cortex M4 has Run , Sleep and Deep sleep modes - True / False ?
40. Is 32-pin Cortex M4 compatible with 256 pin Cortex M4 processor ?
41. What is I2S interface ?
42. What are the features of Cortex M4 ?
43. Tell about the Exception Handling in ARM processor. What does the ARM Core do automatically for every exception ?
44. Can you tell about DSP in ARM7TDMI or DSP in STRONGARM or DSP in ARM9E ?
45. Why should you design the DSP algorithm in general ARM architecture so that saturation is not required ?
46. Tell about AIF(Arm Image Format) and AOF(Arm Object Format) ?
47. What are the Memory initialization directives ?
48. What is the use of 'SWI' in ARM assembly ?
49. How to Represent a Digital Signal in ARM ?
50. Give Example of STMFD w.r.t Stack Operation push/pop ?
51. Tell about Extended Multiply Instructions in ARM
52. Tell about the NORMAL Multiply Instructions in ARM
53. Tell about ADR's relation with LDR and the Advantage of using LDR together with '=' ?
54. When does the Processor Stall in ARM and what is the pipeline hazard in ARM?
55. What is called 'pipeline bubble' in ARM ?
56. What is Saturating Arithmetic ? Explain
57. Tell the 2 software methods available to remove interlocks following load instructions
58. Tell about 'Load Scheduling By Preloading' and 'Load Scheduling by unrolling' ?
59. How will you flush the instuction Cache in ARM processor ?
60. List the issues when porting C code to the ARM processor ?
61. What are the advantages of writing in Assembly in ARM processor?
62. Explain this -> "AREA |.text|, CODE, READONLY"
63. What is the use of the 'EXPORT' directive ?
64. What is the use of various directives ?
65. How to build using command line tools w.r.t ARM ?
66. Write a simple square.s program in ARM assembly called from a C file ?
67. What will you change that program when calling ARM code from C compiled as Thumb ?
68. How will you allow Thumb C code to call the ARM assembly Code ?
69. What is the use of 'RN' directive in ARM assembly ?
70. What imports the libraries like printf automatically in the assembly side of ARM ?
71. What is the DCB directive and its relation with strings ?
72. What is ARMulator ? Where and How have you used it ?
73. How will you handle the Register Shortage problem in ARM ?
74. Relation between CPSR flags, S Suffix Instructions and Comparison Instructions ?
75. What is Conditional Execution in ARM ?
76. What is single issue multiple data (SIMD) processing ?
77. What is a Coprorcessor / CP15 in ARM ?
78. What does the 'B' mean in LDRB or What is the difference between LDR and LDRB in ARM ?
79. What is the use of Write-Back ?
80. When should i use '!' in ARM programming and where is it Not Allowed to be used in ARM programming ?
81. Tell about 'Single Data Transfer' and 'Multiple Data Transfer' in ARM
82. How will you manually Enable / Disable an interrupt in ARM Processor ?
83. Tell about MRS and MSR instructions ?
84. Can you tell a 32-bit branch instruction and the way you used it ?
85. When have you used Thumb instructions in ARM processor ?
86. Write a program to mask bytes in ARM assembly ?
87. ARM7 family of processors does not use any branch prediction scheme. Neither
ARM9 nor ARM9E family implements branch prediction - True / False
88. The ARM11 micro-architecture uses two techniques to predict branches - True / False
89. What is Translation Lookaside Buffer (TLB) ?
90. What are the types of addressing modes in ARM ?
91. Can you brief up the evolution of ARM architecture ?
92. Why ARM7TDMI alone highlights the features that it supports in its naming and why not other ARM architectures ?
93. When will you choose to use ARM and when will you choose to use Thumb instructions ?
94. Can you explain the operation of ARM7 pipeline for simple instructions ?
95. Can you tell about function performed by this instruction - ADD r3, r5, r12 ?

 Linux and Linux Device driver
Linux is one of the very common Operating Systems and hope many would like to have some linux discussion. Here is a collection of questions for our linux and linux device driver related discussion...

1. What is the difference in features between kernel 2.2, 2.4 and 2.6 ?
2. What are Static and Shared libraries ?
3. What is dynamic linking ? What is static linking ?
4. What are the advantages of Dynamic linking or Shared libraries ?
5. Does gcc search for both static and shared libraries ? Which is searched initially by gcc compiler ?
6. What should be done for Shared library based linking in gcc ?
7. What should be done for static library based linking in gcc ?
8. What is object file and what are symbols ?
9. Can you tell the memory layout based on Data,BSS,HEAP and STACK ?
10. What are the ways in which linux kernel can be compiled ?
11. How will get the driver added into the kernel ? What are Kconfig files ?
12. What is a kernel module ?
13. What is the difference between insmod and modprobe ?
14. How will you list the modules ?
15. How do you get the list of currently available drivers ?
16. How will you Access userspace memory from kernel ? What are the various methods ?
17. What is the use of ioctl(inode,file,cmd,arg) ApI ?
18. What is the use of the poll(file, polltable) API ?
19. What is the use of file->private_data in a device driver structure ?
20. What is a device number ?
21. What are the two types of devices drivers from VFS point of view ?
22. What are character devices ?
23. How does the character device driver adds and remove itself from the kernel ?
What is the use of register_chrdev and unregister_chrdev ?
24. What is the role of interrupts in a device driver ? How are interrupts handled in device driver ?
25. How will you make interrupt handlers as fast as possible ?
26. What are the types of softirqs ?
27. Difference between Timer Softirq and Tasklet Softirq ?
28. What are tasklets ? How are they activated ? when and How are they initialized ?
29. What is task_struct and how are task states maintained ?
30. What is rwlock and spinlock ? Briefly explain about both of them ?
31. When will you use rwlock instead of spinlock ?
32. Can spinlock/rwlock be used in Interrupt handler ?
33. Tell about the Memory Layout of a Process in Linux .
34. How will you trace the system calls made into the kernel of lInux ?
35. What is mmap ? MMAP & malloc ? MMAP & brk ? MMAP adv & dis-adv.
36. Tell the relation between Malloc and MMAP
37. Advantages of MMAP over Read ?
38. Tell the role of brk() in malloc / Tell the relation between heap and brk?
39. Example of using MMAP and MUNMAP in C ?
40. Tell about the method/steps in Linux Kernel Compilation.
41. What is Kmalloc and how does it differ from normal malloc ? or Why can't we use malloc in kernel code ?
42. What happens as soon as a packet arrives from the network in Linux ?
43. What is a stack frame, stack pointer & frame pointer ?
44. What is a profiler ? Which one have you used ?
45. How do you determine the direction of stack growth ?

 Networking - I
Let me share few networking related queries that can be used for our discussion ...

1. What is the use of Ethernet ?
Ethernet is a link layer protocol in TCP/IP stack and the most widely used LAN technology that provides a framework for data transmission to other devices on the same network segment.

2. How is the destination MAC address obtained ?
Destination MAC address is fetched via  ARP

3. Why is TCP called as connection oriented protocol ?
As the communication session is established by means of 3 way handshake ahead of transferring data, it is termed as connection oriented protocol. Here the client initiates the creation of logical pipes through which the messages shall be sent or received. These pipes shall be deleted at the end of connection.

4. Why is UDP called as connection less protocol ?
As the communication session is not established ahead of transferring data, it is termed as connection less protocol.

5. Why is TCP termed as Heavy weight protocol ?
TCP is heavy weight because it performs handshake for connection establishment, ordering of packets, handling reliability & congestion control. That is, TCP does lots of processing to provide reliable service and hence termed as heavy weight protocol.

6. What applications use TCP ?
SSH, HTTP, FTP, Telnet, SMTP, IMAP/POP, NFS

7. What applications use UDP ?
Tunneling/VPN, TFTP, SNMP, Media streaming, Games, local broadcast , RTP

8. Why are realtime applications using UDP even though it is unreliable ?
It is used in realtime applications where it is ok even if data is lost

9. Explain any error detection mechanism in TCP ?
Error detection is viable through sequence numbers. Duplicate packets are discarded based on SN at receiver. The lost packets are re-transmitted based on ACKs.

10. What is flow control in TCP ?
In order for the receiver and transmitter to be sync on the rate of data transmission, TCP uses sliding window protocol, where the receiver intimates the sender about the amount of data that it is willing to buffer for the connection via the receive window field. The sender can accordingly send data only up to the extent.

11. What is the use of MSS in TCP ?
It is used to represent the largest amount of data that the receiver shall receive in a single segment.   

12. What is sliding window algorithm ?
TCP uses sliding window protocol, where the receiver intimates the sender about the amount of data that it is willing to buffer for the connection via the receive window field. The sender can accordingly send data only up to the extent.
       
13. Bandwidth utilization is good in TCP or UDP ?
TCP

14. Why is connect system call invoked by client ?
Connect system call helps in connecting the socket to the address of the server thereby enabling the establishment of connection.

15. Why is bind system call optional for either UDP or TCP client ?
connect system call is optional for UDP client as UDP is a connectionless protocol.

16. What is socket ?
 Socket represents an endpoint of a connection.

17. What is a raw socket and when will we use it ?
Raw socket receives or sends raw datagram without including any link layer headers. That is, it allows direct sending and receiving of internet protocol packets without any protocol specific transport layer formatting.

18. Once the segments arrive on the receiver, who does the re-assembly in the case of TCP protocol ?
IP layer handles the re-assembly.

19. Is fragmentation applicable for UDP. If yes, who does the fragmentation ?
No.

20. Is fragmentation applicable for TCP. If yes, who does the fragmentation ?
Yes. The IP layer does the fragmentation.

21. What is the need for fragmentation in TCP ?
Fragmentation is done according the MTU of the device so that the data can be transmitted.

22. What determines the size for fragmentation in TCP ?
MTU determines the size for fragmentation.

23. What is the use of SYN field ?
The presence of SYN field conveys that sequence number is the initial sequence number(ISN). Only the first packet sent from either end shall have this SYN flag set .

24. What is the use of SN field ?
SN field carries the sequence number.
If SYN flag is set, it carries the initial sequence number (ISN).
If SYN flag is clear, then it is the accumulated sequence number of the first data byte of this segment for the current session.

25. What is the use of SACK field ?
SACK enables selective ACK which allows the client to inform on the range of packets received in order and the unreceived packets by which the server shall re-transmit only the packets that were not received by the client.

26. What is the use of Window field ?
Represents the size of the receive window.

27. When will the PSH flag bet set in TCP ?
This tells the receiver to push the data out immediately to the receiving application, rather than waiting for additional data to enter the buffer.

28. Is accept a blocking or non-blocking system call and what is the use of it ?
Accept is a blocking call.  It shall block until the connection request from client.

29. What is a concurrent server architecture ?
There will be one listening socket and multiple connected socket points at the server at any time.

30. What API is used for converting ipv4 address to NBO and vice versa ?
htons(), htonl(), ntohl(), ntohs()
   
31. What is the need for IP protocol, if ethernet can send data using the destination MAC address ?
IP header carries the source ip and destination IP that is required for addressing and routing.

32. What is the use of router, switch, bridge ? List differences between router, switch & bridge.
Router acts as a default gateway on the network segment if the packet has to go to another network. Router maintains table based on IP address & port. Router uses IP layer. Router overwrites the src MAC address with its own MAC address while sending it out.

Switch is a bridge configured to work like a hub in star topology. The received frames are processed & forwarded to the appropriate port using the forwarding table that is based on MAC address & port. Switch uses the data link layer. Switch does not overwrite the src MAC address.

Bridge is a layer 2 device which forwards to all other ports. It does not overwrite the src MAC address.
    
33. What is the use of TTL field ?
TTL determines the maximum number of hops that a packet can take while traveling in the network. While traversing through the network, the routers are expected to decrement the TTL value by 1 before forwarding the packet.

34. Who sets the congestion notification flag ?
The router in the network shall set the ECN flag incase of congestion in network.

35. Is it possible to have connection between multiple socket end points ?
A socket is one endpoint of a communication link between two programs running on the network. Endpoint is a combination of a port number and IP address. Every TCP connection shall be uniquely identified by two endpoints.
   
36. What are the limitations of ethernet ?
There is distance limitation on the maximum distance between devices on ethernet network. Transmission failure can happen as distance increases due to line noise or reduced signal strength or other degradation. Also, ethernet network face congestion problems as they increase in size.    

37. Is it true that data sent over ethernet is automatically broadcasted to every device in the network ?
Yes.

38. What is the difference between CSMA and CSMA/CD ? Why CSMA is not enough ?
CSMA - Broadcast and sense the collision
CSMA/CD - Operates by detecting the occurrence of a collision. Once collision is detected, CSMA CD immediately terminates the transmission so that the transmitter does not have to waste lot of time in continuing.
   
39. What is a Jam signal ? What is back-off period ?
Whenever a collision is detected, the detecting station broadcasts a collision or jam signal to alert other stations that a collision has occurred. Accordingly, every station will wait for a random amount of time.

40. What is the need for MII ?
Originally defined as a standard interface to connect fast ethernet MAC block to PHY chip. This has later been extended as GMII, RGMII, SGMII, XGMII etc..

41. What is the ethernet supported by CAT5 . What is the ethernet supported by CAT5e cable ?
CAT5 supports both traditional and fast ethernet. CAT5e supports Gigabit ethernet.

42. How can you overcome the limitations of ethernet cable ?
Hub can help in overcoming the limitations of ethernet cable.

43. What are the types of ethernet frame formats ? Are they compatible with each other ?
Ethernet II, IEEE 802.3, IEEE 802.2 LLC, IEEE 802.2 SNAP. The different frame types have different format and MTU values, but can coexist on the same physical medium.   

44. What is the role of LLC and MAC layer in ethernet ?
LLC interacts with the upper network layer. It is responsible for handling layer 3 protocols (mux/de-mux) and link services like reliability(error management mechanisms such as ARQ) and flow control. MAC layer interacts with the lower PHY layer. It is responsible for framing and media access control for broadcast media.

45. What is carrier sensing ?
This is a media access control protocol where the transmitter determines whether another transmission is in progress before initiating transmission.

46. What is CSMA-CA ?
Carrier sensing is done but nodes attempt to avoid collisions by transmitting only when the channel is sensed to be idle.
   
47. What is the use of preamble and FCS in Ethernet frame ?
The preamble of ethernet packet allows devices to synchronize the receiver clocks. FCS is a error detecting code added to a frame that helps in discarding the damaged frame in a communication protocol if the FCS number calculated by the destination node mismatches with the FCS number sent by the source node.

48. What are the types of CSMA access modes ?
The types of CSMA access nodes are Persistent, Non-persistent, P-persistent and O-persistent.

49. What is port mirroring ? where is port mirroring used ?
Port mirroring sends a copy of network packets seen on one port to a network monitoring connection on another switch port. It is used in network switch.

50. What is a iterative server ?
Iterative server processes one client request at a time in a sequential manner.

 IPv6

Lets discuss regarding IPv6. Feel free to post your queries or answers..

1. What is IPv6 ?
    It is the protocol with capabilities to replace/upgrade IPv4.

2. Difference between IPv6 and IPv4 addresses ?
    a. IPv4 uses decimal number as numbering format for ip address
        IPv6 uses hexadecimal number as numbering format for ip address
    b. IPv4 is 32-bit numeric address
        IPv6 is 128-bit address in hexadecimal
    c. IPv4 uses class-based addressing
        IPv6 uses classless addressing

3. What is the need for IPv6 ?
     a. Limitation in address space offered by IPv4
     b. Absence of security features on its own in IPv4
     c. Limitation in data prioritization / QoS offered by IPv4

4.How will you port an application from IPv4 to IPv6 ?
   The system calls should be updated with appropriate arguments as per IPv6.

5. How will you represent an IPv6 address ?
    It shall be represented as 8 groups of 4 hexadecimal digits separated by colons.

6. How could the IPv4 address exhaustion could be handled ?
    There are various approaches like Subnetting/CIDR, NAT/PAT, Use of Private networks & DHCP

7. What changes are made in header for IPv6 ?
    All unnecessary information and options that are present in IPv4 are moved to the end of IPv6 header

8. What is the size of IPv6 header ?
     IPv6 header has a fixed header size of 40 bytes, whereas the IPv4 header has a variable length due to options field.

9. Which fields are same in IPv4 and IPv6 ?
    Version field, Type of Service (IPv4) is similar as Traffic Class(IPv6), Total
    length(IPv4) is somewhat similar as Payload length(IPv6), TTL (IPv4) is same as Hop
    Limit(IPv6), Protocol(IPv4) is somewhat similar as Next Header(IPv6)

10.What is the additional field in IPv6 that is absent in IPv4 ?
     Flow label for sequencing of packets

11. Which fields have been eliminated/deleted in IPv6 from that of IPv4 ?
      Header checksum, Header length & Fragmentation fields are eliminated. The Options field is moved into payload

12. What are the new features with IPv6 ?
      a. Stateless auto configuration
             i) No need for DHCP
            ii) New host can assign its own host address
      b. New IP security protocols
             i) Authentication of source
           iii) Encryption of payload
      c. Jumbo payload option that can carry packet upto 4GB

13. What ways IPv6 devices can be deployed ?
      a. By Tunneling IPv6 over IPv4
      b. Using Dual stack router that supports both IPv4 and IPv6
      c. Using a NAT device for translation between IPv4 and IPv6

C Programming Interview Questions:
Volatile variable in-depth (definition, use case, impact, when to avoid, etc)
Priority inversion, priority inheritance, priority ceiling
Difference btwn Process and Thread
What is Process preemption
call back functions?
How can you avoid accessing of an array beyond its limits?
If passing name is an call by value, then array name is passed is it also call by value?
how can you determine whether your memory is in protected or un-protected mode
C program to swap every 2 bits in a 8 bit binary number
Write a program to find how many bit to toggle in 2 binary numbers so that they become equal
Write a program for to get the number of bits toggle in 2 binary numbers and toggle them to make the numbers equal
How you Decide the stack size for the function or thread
Memory Layout
How to decrease the time of booting processes
What is the functionality of PROBE function
How to detect whether a device is not detected?
How to find if their is in repeating node in linked list
Find a word from string
A thread is created by processes, how the process comes to know the completion of that created thread 
In a big array consists of 1's & 0's ,write an efficient programe to keep all 1's to right side and 0's to other side
What is Thrashing
Deadlock - example
MM - Segmentation, paging, swapping
Paging vs swapping
Different segments in a program
Does linux use segmentation
What is DMA. Modes - cycle stealing/burst (blk transfer)/transparent
Cache coherency during dma. Which component handles it
Physical Virtual and logical addresses
difference between exceptions and signals and interrupt.
In a Process Address Space what if stack or heap collide?
Delete a particular node in a linked list having argument passed as address of a node.
   without Header pointer known and other implementation with header pointer known
Write program to Insert element in static array
what all Debugging techniques you know?
Determine the minimum stack size required for given prog by end of main function?
how to debug your driver if u had any buffer issues
What is shared lib and static library? And how to create it ?
Difference between #define and CONST, which one will you chose in programming?
Difference between typedef and #define?
can we add two pointers
tell me the logic how can you find depth of a stack?
Can Volatile be applied to pointer?
why size of data types is restricted?
difference b/w macro and a constant variable

malloc vs calloc
Memory barriers; Why are they required
struct alignment and packing.
Pass by value and ref
size of void pointer
What is re-entrancy


What is structure padding?
How to write own malloc call
What is the difference between inline and macro?
Write program toreset bit in register if address of register is given
 reset (int address, int bit)
How to know size of memory allocated by malloc using pointer?
Diff between mutex and semaphore? Can semaphore be used for data synchronisation purpose?


http://cinterviewquestionandanswer.blogspot.in/2014/01/c-interview-question.html
Bitwise operation :
Bit manipulationWrite the logic for setting nth bit.
Write the logic for clearing  nth bit.
Write the logic for toggling  nth bit.
Write the logic for setting nth to mth bits, where n > m.
Write the logic for clearing nth to mth bits, where n > m.
Write the logic for toggling nth to mth bits, where n > m.
Program for finding number of 1s and 0s in a 32-bit number.
Program for finding whether a number is power of 2 or not.
Program for finding whether a number is even or odd.
Write a function to swap even bits with consecutive odd bits in a number.
Write a function to swap odd bits in a number.
Write a function to swap even bits in a number.
Write a function to find out the number of 1s in a number.
Write a function to check whether the number of 1s present in a number are even or odd.
Write a function for finding the first lowest bit set in a number.
Write a function for finding the higest bit set in a number.
Write a function for reversing the bits in a number.
Write the code for extracting nth to mth bits, where n < m.
Write the code for toggling nth to mth bits, where n < m.
Write the code for setting nth to mth bits, where n < m.
Write the code for clearing nth to mth bits, where n < m
Write a piece of code for sizeof() implementation.
Explain about container_of() and offsetof() implementations.
How to implement bit-wise operations without using bit-wise operators?

Check if a number is multiple of 9 using bitwise operators
Count strings with consecutive 1\92s
Gray to Binary and Binary to Gray conversion
Find the maximum subset XOR of a given set
Given a set, find XOR of the XOR\92s of all subsets.
Sum of Bitwise And of all pairs in a given array
Find Next Sparse Number
Find the maximum subarray XOR in a given array
Find XOR of two number without using XOR operator
Write a program to add one to a given number. You are not allowed to use operators like \91+\92, \91-\91, \91*\92, \91/\92, \91++\92, \91\96\91 ?
Multiply two integers without using multiplication, division and bitwise operators, and no loops
Check if a number is a power of another number
Check perfect square using addition/subtraction
Count numbers having 0 as a digit
Number of perfect squares between two given numbers
Write an Efficient C Program to Reverse Bits of a Number
Calculate square of a number without using *, / and pow()


Linklist:
Data Structures Write a program for reversing a singly linked list?
Write a program for a singly linked list (insert, delete, count, search etc functions).
Write a program for a doubly linked list (insert, delete, count, search etc functions).
Write a program for a circular singly linked list (insert, delete, count, search etc functions).
Write a program for a circular doubly linked list (insert, delete, count, search etc functions).
Write a program for binary tree implementation.
You are given a pointer to a node (not the tail node) in a singly linked list. Delete that node from the linked list. 
How to check whether a linked list is circular or not?
How would you find a loop in a singly linked list?
Write a c program for reversing a singly linked list.
Given two singly linked list, find if they are intersecting. Do this in single iteration. Also find the intersecting node in O(n) time and O(1) space. By intersection I mean intersection by reference not by value.

Write a c program to get the intersection point of two singly linked lists.
Find loop in linked list and remove the loop
implement Stack and Queue using Linked List
Repeatedly Delete N nodes after M nodes of a Linked list
Reverse every k nodes of a linked list
Reverse a Linked List using Recursion
Remove Duplicates from a Linked List
Print Linked List Elements in Reverse order
Merge a linked list into another linked list at alternate positions
Move last node to front in linked list
Swap every two nodes in a linked list
Frequency of a given number in a Linked List
Delete alternate nodes of a Linked List
Rotate linked list by K nodes
Reverse a singly linked list
Write a function to get the intersection point of two Linked Lists (Y Shape)
Write a program to detect loop in a Linked List
Insert nodes into a linked list in a sorted fashion
Write a C program to return the nth node from the end of a linked list

Find the size of a structure with out size of operator.
why stack is always in higher location.
what is the difference between global and static
have u debug any issues using jtag/ any other debugger.if yes, how can we get the call stack in the debugger.
Write a function to find whether machine is little endian or big endian.?
Write a program to find occurrence of particular key in given string?
write a program to move all 0's to one side and 1's on ther side of array?
Write a program to find largest element in an array?
Write a program to find second largest element from array?
Write a program to count total number of vowel,consonant present in given string?
Write a program to check weather  string is palindrome or not?
Write a program to implement strncpy function using recursion
Write a program to implement strlen(), strcpy(),strncpy(), strrev(),strcmp() function"?
Write a program to find size of variable without using sizeof operator?
Can we increment the base address of array? Justify your answer.
What is difference between array and pointer?
Write a program to find weather machine is 32 bit or 64 bit?
What is memory leakage? How can we avoid it?
What is NULL , void, dangling pointer?
Can we use const keyword with volatile variable?
What does keyword const means?
Can we declare main() function as static?
Storage class static and extern and register in details.
Can we declare static variable in header file?
Where a const volatile variable is used?

1) what are the compilation steps? Explain
ans:- there are 4 compilation steps they are 1.preprocessor 2.compiler 3.assembler 4.linker.
1.preprocessor:-read the source code and resolve all preprocessor directives.
gcc -E first.c -o first.i
 vim first.i
2.compiler:-transulates preprocessor code into assembly language.
gcc -S -v first.i -o first.s
vim first.s
3.assembler:-converts the assembler language in to binary language(or ) machine instructions.
gcc -C -v first.s -o first.o
objdump -D first.o
4.linker:-applies the build process i.e., the linker links all the relocatable binary files and libraries.
gcc first.o -o first
objdump -D first

write a program to print size of integer variable without using sizeof operator
write a program to find repeated character in a given string? code should be generic?
Implement string reverse program without using temporary buffer and strrev function?
how do you transfer data from userspace to kernel space?
What is generic system call that is used to transfer data from user space to kernel space?
write a program to copy a string from source to destination without using strcpy?
what is difference between mutex and semaphores
which one is faster array or linklist ?
how you cna tell whether your system is little or big indian ?
Write a program to implement memcpy() on your own 
Difference between library call and a system call

C - I
Here is a list of 50 interesting C interview questions that can be discussed upon...

1. In order to assign attributes to the pointer itself, rather than to the pointed-to object, you put the attributes after the asterisk. like ' char *const p = &c; ' - True/False

2. What is the output of the below code ?
char **p ="Hello";
printf("%s",**p);
return 0;

3. There is a char * pointer that points to some ints, and what should be done to step over it ?

4. What changes has to be done to get the ouput as "9 8 7 6 5" by the same recursive call method ?
int main(void) {
int i=9;
printf("%d \t",i--);
if(i)
main();
return 0;
}

5. What is the output in the below program ?
void main() {
int z = 12;
printf("%d",printf("Mr.123\\"));
printf(\94%d\94,printf(\94%d%d%d\94,z,z,z));
}

6. You can't 'shift' an array - True/False

7. Is it possible to do like this in C ?
char s[8];
s="ABCD1234";

8. bit-fields do not provide a way to select bits by index value - True/False

9. Does 'char *a' allocate some memory for the pointer to point to ?

10. A null pointer is does not to point to any object or function - True/False
An uninitialized pointer might point anywhere - True/False

11. The address of operator will never yield a null pointer - True/False
malloc returns a null pointer when it fails - True/False

12. char y[] is not identical to char *y - True / False . Explain the reason for either true/false.

13. What would be output of the below code ?
char x[] = "abcde";
char *y= "abcde";
printf("%c \n", x[3]);
printf("%c \n", y[3]);

14. Is it possible to have char x[5] in one file a declaration extern char * in other file ?

15. What is dangling pointer ?

16. Why does the below code cause segmentation fault ?
int* z = NULL;
*z = 1;

17. What are the two problems in the below code ?
char *s1 = "Hello, ";
char *s2 = "world!";
char *s3 = strcat(s1, s2);

18. What is the problem with the below code ?
i) char a[] = "Hello";
char *p = "Hello";
My program crashes if I try to assign a new value to p[i].

ii) char *a = "abcdef";
*a = 'X';

19. Some compilers have a switch to control if string literals are writable or not - True/False

20. Three attributes can be assign to a pointer: const / volatile / restrict - True/False

21. What are the problems in below code. How will you fix it ?
char *check(int n)
{
char box[20];
sprintf(box, "%d", n);
return box;
}

22. What is malloc's internal bookkeeping information and how does it play a role in mis-directing the location of the actual bug ?

23. Where would you use 'const int' instead of #define and where should you use #define instead of 'const int' ?

24. Keyword 'const' refers to read-only -> True/False

25. What is the output of the below code
#define MY_CALCULATOR 2+5+6
printf("%d \n" 3 * MY_CALCULATOR);

26. How does declaring function parameters as 'const' help in better,safer code ?

27. Which of the following is correct . Why does point no 'i' gives output sometime & sometimes it does not give output ?
i. char *a = malloc(strlen(str));
strcpy(a, str);
ii. char *a = malloc(strlen(str) + 1);
strcpy(a, str);

28. How do the below get expanded ? Which one is the preferred method & Why ?
#define mydef struct s *
typedef struct s * mytype;
mydef d1,d2;
mytype t1,t2;

29. i. const values cannot be used in initializers - True/False
ii. const values cannot be used for array dimensions - True/False

30. Is char x[3] = "wow"; legal ?
Why does it work sometimes ?

31. How will the below code corrupt stack ?
void checkstackcorruption (char *var)
{
char z[12];
memcpy(z, var, strlen(var));
}
int main (int argc, char **argv)
{
checkstackcorruption (argv[1]);
}

32. Is the below method of usage of realloc() correct ?
void *z = malloc(10);
free(z);
z = realloc(z, 20);

33. What does the below mean ?
int (*)[*];

34. The rank of any unsigned integer type shall equal the rank of the corresponding
signed integer type, if any - True/False

35. The rank of long long int shall be greater than the rank of long int which shall be greater than int - True/False

36.No two signed integer types shall have the same rank, even if they have the same
representation - True/False

37. sprintf function is equivalent to fprintf, except that the output is written into an array - True/False

38. Incase of both sprintf and fprintf , A null character is written at the end of the characters written and that is not counted as part of the returned value - True/False

39. Arithmetic underflow on a negative number results in negative zero - True/False

40.Negative zero and positive zero compare equal under default numerical comparison - True/False

41. 'type cast' should not be used to override a const or volatile declaration - True/False

42. 'sizeof' yields the size of an array in bytes - True / False

43. How will you determine the number of elements in an array using sizeof operator ?

44. What is l-value & r-value ?

45. What is the output of the below code ?
char (*x)[50];
printf("%u, %u,%d\n",x,x+1,sizeof(*x));

46.How will you declare & initialize pointer to a register located at phys addrs 600000h ?

47. What is NPC ?

48. Can we compare a pointer and integer ?

49. Why does *ps.i do not work in the below code ?
struct rec
{
int i;
float f;
char c;
};
int main()
{
struct rec *ps;
ps=(struct rec *) malloc (sizeof(struct rec));
*ps.i=10;
free ps;
return 0;
}

50. The term 'Pointer to pointer' is different from the term 'double pointer' - True/False

 C - II
I have enlisted the questions related to C that can be used for discussion !

1. Will the Free API (after calling Malloc) return the Memory back to the OS or the Application ?

2. How to do array assignment ?

3. What could be the gud way to check 'Close enough' equality using Floats ?

4. What is the Problem of Floating Points with '==' operator in C . On what is that dependent upon ?

5. Tell about the size of 'empty structs' in C ?

6. Why does C language permits an extra comma in initializer list

7. What does the below do ? z = x++ +( y += x++) ;

8. What is nested union ? How is it useful ?

9. How wil you pass unions to functions or pointers to unions ?

10. What is the Behaviour of realloc for NULL argument ?

11. Write a Macro to swap 2 bytes

12. Write a Macro to swap 2 bytes

13. Write small program to Set a Bit, Clear a Bit, Toggle a Bit, Test a Bit (or Demonstrate simple Bit Manipulation in C)

14. Use #define to Set Bit, Clr Bit, Toggle and Test Bit of a volatile status register (Port) - Bit Manipulations to set/clear a bit of a particular Port Register 

 Multithreading
Hi,

Here are few possible queries that can be discussed about multithreaded programming in linux !

1. Can a child process be called as a thread ?
2. Are there multiple ways to create a thread ?
3. Is it possible for the thread to be alive if we terminate the process ? Is it possible for a child process to be alive if we terminate the parent process ? 
4. What is the memory layout of a process ?
5. What is the difference between multithreading and multiprocessing ?
6. What is the memory layout of a process with 2 threads ? What is the memory layout a process with 2 child process ?
7. If we declare a variable in the thread handler of 1st thread, will it be accessible accessible to 2nd thread ?
8. If we declare one variable locally in process and another globally in process, which one will be accessible to its threads ? Will those variable be available in child process also ?
9. Is it better to design a multi-threaded application or multi-process application ?
10. When should we need to go for multi-thread design and when should we go for a multi-process design ?
11. What is TLS ?
12. Who schedules the processes and who schedules the threads ?
13. Why process considered to be heavy weight ?
14. What are the contents of PCB ? What are the contents of TCB ?
15. How to ensure that thread1 gets terminated before thread2 ?
16. What will happen if we do not reap the zombie process ?
17. What is the use of zombie process ?
18. What are the various ways to terminate a zombie process ?
19. What is the difference between wait() and waitpid() system calls ?
20. Can two zombie process communicate with each other ?
21. How do you decide on the granularity of the lock ?
22. Is it good to have big lock or small lock ?
23. What will happen if a resource is improperly locked ?
24. What is atomicity ?
25. Where are atomic operations useful ?
26. What is spinlock ?
27. What is the use of PID ?
28. What is a process, thread ? What are the differences between process and thread?
29. If there are 2 sequential fork() calls, how many child process will be there ?
30. What is the use of reentrant function in multi-threaded environment ?
31. What is the advantage of using pthreads or POSIX threads ?
32. What are the various thread models and tell the scenario in which the particular thread model is useful / beneficial ?
33. What are the advantages & dis-advantages of 1:N user level threading (thread model)?
34. What is the difference between userspace threads and kernel space threads ?
35. Will a crash of a thread impact the other thread of the process ?
36. What is the difference between pthread_create() and fork() ?
37. What information is shared between a child process and the parent process ?
38. If a parent has 2 threads , will the child process also inherit or have a copy of those 2 threads ?
39. Why a faulty pointer does not crash a process but that of a thread can corrupt the process / other threads of the process ?
40. What is co-operative multitasking and what is pre-emptive multitasking ?
41. How do avoid race conditions in multi-threading
42. What will happen if you call a sleep() in a process or thread ?
43. Will a parent process be given higher priority compared to child process by the linux scheduler ?
44. What is vfork ?
45. What is the common mode of communication between a parent process and child process ? What are the modes of communication between threads ?
46.  Is child process light weight compared to parent process ?
47. What does a fork() call return ?
48. How to terminate a process by programming method ?
49. What are the software models for mulithreaded programming ?
50. What steps are performed during a context switch of a thread and what steps are performed during a context switch of a process ?

 Multicore processor
Initially multicore processors were used mainly in telecom industry. But, nowadays, these multicore processors have made inroads into almost every technology/industry. 
Here are a few basic multicore processor based questions that can be discussed upon..

1. Will increasing the number of cores, increase the throughput of your system ?
2. What are the general methods of communication between the cores ?
3. When is it better to use single core processor compared to multi-core processor ?
4. If the CPU in a multi-core processor updates the data in the cache, copies of data in caches associated with other cores will become stale. How is the multicore processor designed to handle this scenario ?
5. What is 'Run to Completion' software architecture ?
6. What is a 'Pipelined' software architecture ?
7. What is the difference between 'Run to Completion' and 'Pipelined' software architecture ?
8. How is the debugging and testing environment in the case of multithreaded/multiprocessing applications ?
9. At what point does adding more processors or computers to the computation pool slow things down instead of speeding them up?
10. Is there an optimal number of processors for any given parallel program?
11. How Many Processes or Threads are enough for an application ?

Preprocessor

1. Using the #define statement, how would you declare a manifest constant that returns the number of seconds in a year? Disregard leap years in your answer.

#define SECONDS_PER_YEAR (60UL * 60UL * 24UL * 365UL)

I\92m looking for several things here:

(a)    Basic knowledge of the #define syntax (i.e. no semi-colon at the end, the need to parenthesize etc.).

(b)    A good choice of name, with capitalization and underscores.

(c)    An understanding that the pre-processor will evaluate constant expressions for you. Thus, it is clearer, and penalty free to spell out how you are calculating the number of seconds in a year, 
rather than actually doing the calculation yourself.

(d)    A realization that the expression will overflow an integer argument on a 16 bit machine \96 hence the need for the L, telling the compiler to treat the expression as a Long.

(e)    As a bonus, if you modified the expression with a UL (indicating unsigned long), then you are off to a great start because you are showing that you are mindful of the perils of signed and unsigned types \96
 and remember, first impressions count!

2. Write the \91standard\92 MIN macro. That is, a macro that takes two arguments and returns the smaller of the two arguments.

#define MIN(A,B)       ((A) <=  (B) ? (A) : (B))

The purpose of this question is to test the following:

(a)    Basic knowledge of the #define directive as used in macros. This is important, because until the inline operator becomes part of standard C, 
macros are the only portable way of generating inline code. Inline code is often necessary in embedded systems in order to achieve the required performance level.

(b)    Knowledge of the ternary conditional operator.  This exists in C because it allows the compiler to potentially produce more optimal code than an if-then-else sequence. 
Given that performance is normally an issue in embedded systems, knowledge and use of this construct is important.

(c)    Understanding of the need to very carefully parenthesize arguments to macros.

(d)    I also use this question to start a discussion on the side effects of macros, e.g. what happens when you write code such as :

least = MIN(*p++, b);

3. What is the purpose of the preprocessor directive #error?

Either you know the answer to this, or you don\92t. If you don\92t, then see reference 1. This question is very useful for differentiating between normal folks and the nerds. 
It\92s only the nerds that actually read the appendices of C textbooks that find out about such things.  Of course, if you aren\92t looking for a nerd, the candidate better hope she doesn\92t know the answer.
Infinite Loops

4. Infinite loops often arise in embedded systems. How does one code an infinite loop in C?

There are several solutions to this question. My preferred solution is:

while(1)

{

\85

}

Another common construct is:

for(;;)

{

\85

}

Personally, I dislike this construct because the syntax doesn\92t exactly spell out what is going on.  Thus, if a candidate gives this as a solution, 
I\92ll use it as an opportunity to explore their rationale for doing so.  If their answer is basically \96 \91I was taught to do it this way and I have never thought about it since\92 \96 
then it tells me something (bad) about them. Conversely, if they state that it\92s the K&R preferred method and the only way to get an infinite loop passed Lint, then they score bonus points.

A third solution is to use a goto:

Loop:

\85

goto Loop;

Candidates that propose this are either assembly language programmers (which is probably good), or else they are closet BASIC / FORTRAN programmers looking to get into a new field.
Data declarations

5. Using the variable a, write down definitions for the following:

(a) An integer

(b) A pointer to an integer

(c) A pointer to a pointer to an integer

(d) An array of ten integers

(e) An array of ten pointers to integers

(f) A pointer to an array of ten integers

(g) A pointer to a function that takes an integer as an argument and returns an integer

(h)    An array of ten pointers to functions that take an integer argument and return an integer.

The answers are:

(a)    int a;                 // An integer

(b)    int *a;               // A pointer to an integer

(c)    int **a;             // A pointer to a pointer to an integer

(d)    int a[10];          // An array of 10 integers

(e)    int *a[10];        // An array of 10 pointers to integers

(f)     int (*a)[10];     // A pointer to an array of 10 integers

(g)    int (*a)(int);     // A pointer to a function a that takes an integer argument and returns an integer

(h)    int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer

People often claim that a couple of these are the sorts of thing that one looks up in textbooks \96 and I agree. While writing this article, 
I consulted textbooks to ensure the syntax was correct. However, I expect to be asked this question (or something close to it) when in an interview situation. Consequently,
 I make sure I know the answers \96 at least for the few hours of the interview.  Candidates that don\92t know the answers (or at least most of them) are simply unprepared for the interview. 
 If they can\92t be prepared for the interview, what will they be prepared for?
Static

6. What are the uses of the keyword static?

This simple question is rarely answered completely.  Static has three distinct uses in C:

(a)    A variable declared static within the body of a function maintains its value between function invocations.

(b)    A variable declared static within a module[1], (but outside the body of a function) is accessible by all functions within that module. 
It is not accessible by functions within any other module.  That is, it is a localized global.

(c)    Functions declared static within a module may only be called by other functions within that module. That is, the scope of the function is localized to the module within which it is declared.

Most candidates get the first part correct.  A reasonable number get the second part correct, while a pitiful number understand answer (c). 
 This is a serious weakness in a candidate, since they obviously do not understand the importance and benefits of localizing the scope of both data and code.
Const

7. What does the keyword const mean?

As soon as the interviewee says \91const means constant\92, I know I\92m dealing with an amateur. Dan Saks has exhaustively covered const in the last year,
 such that every reader of ESP should be extremely familiar with what const can and cannot do for you. If you haven\92t been reading that column, suffice it to say that const means \93read-only\94. 
 Although this answer doesn\92t really do the subject justice, I\92d accept it as a correct answer. (If you want the detailed answer, then read Saks\92 columns \96 carefully!).

If the candidate gets the answer correct, then I\92ll ask him these supplemental questions:

What do the following incomplete[2] declarations mean?

const int a;

int const a;

const int *a;

int * const a;

int const * a const;

The first two mean the same thing, namely a is a const (read-only) integer.  The third means a is a pointer to a const integer (i.e., the integer isn\92t modifiable, but the pointer is).
 The fourth declares a to be a const pointer to an integer (i.e., the integer pointed to by a is modifiable, but the pointer is not). The final declaration declares a to be a const pointer to a const integer 
 (i.e., neither the integer pointed to by a, nor the pointer itself may be modified).

If the candidate correctly answers these questions, I\92ll be impressed.

Incidentally, one might wonder why I put so much emphasis on const, since it is very easy to write a correctly functioning program without ever using it.  There are several reasons:

(a)    The use of const conveys some very useful information to someone reading your code. In effect, declaring a parameter const tells the user about its intended usage.  
If you spend a lot of time cleaning up the mess left by other people, then you\92ll quickly learn to appreciate this extra piece of information. (Of course, programmers that use const,
 rarely leave a mess for others to clean up\85)

(b)    const has the potential for generating tighter code by giving the optimizer some additional information.

(c)    Code that uses const liberally is inherently protected by the compiler against inadvertent coding constructs that result in parameters being changed that should not be.  In short, they tend to have fewer bugs.

Volatile

8. What does the keyword volatile mean? Give three different examples of its use.

A volatile variable is one that can change unexpectedly.  Consequently, the compiler can make no assumptions about the value of the variable.  
In particular, the optimizer must be careful to reload the variable every time it is used instead of holding a copy in a register.  Examples of volatile variables are:

(a)    Hardware registers in peripherals (e.g., status registers)

(b)    Non-stack variables referenced within an interrupt service routine.

(c)    Variables shared by multiple tasks in a multi-threaded application.

If a candidate does not know the answer to this question, they aren\92t hired.  I consider this the most fundamental question that distinguishes between a \91C programmer\92 and an \91embedded systems programmer\92. 
 Embedded folks deal with hardware, interrupts, RTOSes, and the like. All of these require volatile variables. Failure to understand the concept of volatile will lead to disaster.

On the (dubious) assumption that the interviewee gets this question correct, I like to probe a little deeper, to see if they really understand the full significance of volatile. In particular, I\92ll ask them the following:

(a) Can a parameter be both const and volatile? Explain your answer.

(b) Can a pointer be volatile? Explain your answer.

(c) What is wrong with the following function?:

int square(volatile int *ptr)

{

return *ptr * *ptr;

}

The answers are as follows:

(a)    Yes. An example is a read only status register. It is volatile because it can change unexpectedly. It is const because the program should not attempt to modify it.

(b)    Yes. Although this is not very common. An example is when an interrupt service routine modifies a pointer to a buffer.

(c)    This one is wicked.  The intent of the code is to return the square of the value pointed to by *ptr. However, since *ptr points to a volatile parameter, the compiler will generate code that looks something like this:

int square(volatile int *ptr)

{

int a,b;

a = *ptr;

b = *ptr;

return a * b;

}

Since it is possible for the value of *ptr to change unexpectedly, it is possible for a and b to be different. Consequently, this code could return a number that is not a square!  The correct way to code this is:

long square(volatile int *ptr)

{

int a;

a = *ptr;

return a * a;

}
Bit Manipulation

9. Embedded systems always require the user to manipulate bits in registers or variables. Given an integer variable a, write two code fragments. The first should set bit 3 of a. 
The second should clear bit 3 of a. In both cases, the remaining bits should be unmodified.

These are the three basic responses to this question:

(a) No idea. The interviewee cannot have done any embedded systems work.

(b) Use bit fields.  Bit fields are right up there with trigraphs as the most brain-dead portion of C.  Bit fields are inherently non-portable across compilers, and as such guarantee that your code is not reusable.  
I recently had the misfortune to look at a driver written by Infineon for one of their more complex communications chip. 
 It used bit fields, and was completely useless because my compiler implemented the bit fields the other way around. The moral \96 never let a non-embedded person anywhere near a real piece of hardware![3]

(c) Use #defines and bit masks.  This is a highly portable method, and is the one that should be used.  My optimal solution to this problem would be:

#define BIT3       (0x1 << 3)

static int a;

void set_bit3(void) {

a |= BIT3;

}

void clear_bit3(void) {

a &= ~BIT3;

}

Some people prefer to define a mask, together with manifest constants for the set & clear values.  This is also acceptable.  
The important elements that I\92m looking for are the use of manifest constants, together with the |= and &= ~ constructs.
Accessing fixed memory locations

10. Embedded systems are often characterized by requiring the programmer to access a specific memory location. 
On a certain project it is required to set an integer variable at the absolute address 0x67a9 to the value 0xaa55. The compiler is a pure ANSI compiler. Write code to accomplish this task.

This problem tests whether you know that it is legal to typecast an integer to a pointer in order to access an absolute location.  
The exact syntax varies depending upon one\92s style. However, I would typically be looking for something like this:

int *ptr;

ptr = (int *)0x67a9;

*ptr = 0xaa55;

A more obfuscated approach is:

*(int * const)(0x67a9) = 0xaa55;

Even if your taste runs more to the second solution, I suggest the first solution when you are in an interview situation.
Interrupts

11. Interrupts are an important part of embedded systems. Consequently, many compiler vendors offer an extension to standard C to support interrupts. 
Typically, this new key word is __interrupt. The following code uses __interrupt to define an interrupt service routine. Comment on the code.

__interrupt double compute_area(double radius) {

{

double area = PI * radius * radius;

printf(\93\nArea = %f\94, area);

return area;

}

This function has so much wrong with it, it\92s almost tough to know where to start.

(a)    Interrupt service routines cannot return a value. If you don\92t understand this, then you aren\92t hired.

(b)    ISR\92s cannot be passed parameters. See item (a) for your employment prospects if you missed this.

(c)    On many processors / compilers, floating point operations are not necessarily re-entrant. In some cases one needs to stack additional registers, in other cases, one simply cannot do floating point in an ISR.
 Furthermore, given that a general rule of thumb is that ISRs should be short and sweet, one wonders about the wisdom of doing floating point math here.

(d)    In a similar vein to point (c), printf() often has problems with reentrancy and performance.  If you missed points (c) & (d) then I wouldn\92t be too hard on you.
  Needless to say, if you got these two points, then your employment prospects are looking better and better.
Code Examples

12. What does the following code output and why?

void foo(void)

{

unsigned int a = 6;

int b = -20;

(a+b > 6) ? puts(\93> 6\94) : puts(\93<= 6\94);

}

This question tests whether you understand the integer promotion rules in C \96 an area that I find is very poorly understood by many developers. 
 Anyway, the answer is that this outputs \93> 6\94.  The reason for this is that expressions involving signed and unsigned types have all operands promoted to unsigned types. 
 Thus \9620 becomes a very large positive integer and the expression evaluates to greater than 6. This is a very important point in embedded systems where unsigned data types 
 should be used frequently (see reference 2).  If you get this one wrong, then you are perilously close to not being hired.

13. Comment on the following code fragment?

unsigned int zero = 0;

unsigned int compzero = 0xFFFF;       /*1\92s complement of zero */

On machines where an int is not 16 bits, this will be incorrect. It should be coded:

unsigned int compzero = ~0;

This question really gets to whether the candidate understands the importance of word length on a computer.  In my experience, 
good embedded programmers are critically aware of the underlying hardware and its limitations, whereas computer programmers tend to dismiss the hardware as a necessary annoyance.

By this stage, candidates are either completely demoralized \96 or they are on a roll and having a good time.  If it is obvious that the candidate isn\92t very good, then the test is terminated at this point. 
However, if the candidate is doing well, then I throw in these supplemental questions.  These questions are hard, and I expect that only the very best candidates will do well on them. In posing these questions, I\92m looking more at the way the candidate tackles the problems, rather than the answers. Anyway, have fun\85

Dynamic memory allocation.

14. Although not as common as in non-embedded computers, embedded systems still do dynamically allocate memory from the heap.  What are the problems with dynamic memory allocation in embedded systems?

Here, I expect the user to mention memory fragmentation, problems with garbage collection, variable execution time, etc. 
This topic has been covered extensively in ESP, mainly by Plauger.  His explanations are far more insightful than anything I could offer here, so go and read those back issues!
 Having lulled the candidate into a sense of false security, I then offer up this tidbit:

What does the following code fragment output and why?

char *ptr;

if ((ptr = (char *)malloc(0)) == NULL) {

puts(\93Got a null pointer\94);

}

else {

puts(\93Got a valid pointer\94);

}

This is a fun question.  I stumbled across this only recently, when a colleague of mine inadvertently passed a value of 0 to malloc, and got back a valid pointer! 
After doing some digging, I discovered that the result of malloc(0) is implementation defined, so that the correct answer is \91it depends\92. 
I use this to start a discussion on what the interviewee thinks is the correct thing for malloc to do.  Getting the right answer here is nowhere near as important 
as the way you approach the problem and the rationale for your decision.
Typedef

15. Typedef is frequently used in C to declare synonyms for pre-existing data types.  It is also possible to use the preprocessor to do something similar. For instance, consider the following code fragment:

#define dPS  struct s *

typedef  struct s * tPS;

The intent in both cases is to define dPS and tPS to be pointers to structure s.  Which method (if any) is preferred and why?

This is a very subtle question, and anyone that gets it right (for the right reason) is to be congratulated or condemned (\93get a life\94 springs to mind). The answer is the typedef is preferred. Consider the declarations:

dPS p1,p2;

tPS p3,p4;

The first expands to

struct s * p1, p2;

which defines p1 to be a pointer to the structure and p2 to be an actual structure, which is probably not what you wanted. The second example correctly defines p3 & p4 to be pointers.
Obfuscated syntax

16. C allows some appalling constructs.  Is this construct legal, and if so what does this code do?

int a = 5, b = 7, c;

c = a+++b; 

This question is intended to be a lighthearted end to the quiz, as, believe it or not, this is perfectly legal syntax. 
 The question is how does the compiler treat it? Those poor compiler writers actually debated this issue, and came up with the \93maximum munch\94 rule,
 which stipulates that the compiler should bite off as big a (legal) chunk as it can.  Hence, this code is treated as:

c = a++ + b;

Thus, after this code is executed, a = 6, b = 7 & c = 12;

If you knew the answer, or guessed correctly \96 then well done.  If you didn\92t know the answer then I would not consider this to be a problem.  
I find the biggest benefit of this question is that it is very good for stimulating questions on coding styles, the value of code reviews and the benefits of using lint.

Well folks, there you have it.  That was my version of the C test.  I hope you had as much fun doing it as I had writing it.  
If you think the test is a good test, then by all means use it in your recruitment.  Who knows, I may get lucky in a year or two and end up being on the receiving end of my own work.

1. What is Storage class? Explain with example  
The storage class determines the part of memory where storage is allocated for an object (particularly variables and functions) and how long the storage allocation continues to exist. In C program, there are four storage classes: automatic, register, external and static.

         Auto
            They are declared at the start of a program\92s block such as in the curly braces ( { } ).  Memory is allocated automatically upon entry to a block and freed automatically upon exit from the block.
            Automatic variables may be specified upon declaration to be of storage class auto.  However, it is not required to use the keyword auto because by default, storage class within a block is auto.
        Register
        Automatic variables are allocated in the main memory of the processor; accessing these memory location for computation will take long time.
            when we required to optimize the execution time, move the critical variable to processor register. this can be done by using the register key word.
            when storage class is register, compiler is instructed to allocate a register for this variable.
            scope of the register variable is same as auto variable.
        NOTE: Allocation of register is not guaranteed always, it depends on number register available in processor and number register used for manipulation. if you define 4 variable as register storage class and and processor has only 2 register for variable allocation, then compiler will allocate 2 variable in registers and treat the remaining 2 variable as auto variable. therefore usage of register keyword should should be justified and cross checked with disassembly weather register is allocated or not.
        Extern
            For using the external global variable from other files extern keyword is used.
            any file can access this global variable and lifetime over entire program run.
        Static
            static variable have lifetime over entire program run.
            scope of this variable is limited based on the place of declaration.
            if static variable is defined in a file and not inside any function, then scope of the variable is limited within that file.
            if static variable is defined inside a function, then the scope of the variable is limited within that function.
            we can use this variable any file and any function indirectly by accessing through pointer.

2. what is qualifiers?   
 
Qualifiers defines the property of the variable. Two qualifiers are const and volatile. The const type qualifier declares an object to be unmodifiable. The volatile type qualifier declares an item whose value can legitimately be changed by something beyond the control of the program in which it appears, such as a concurrently executing thread / interrupt routine.

3. What are volatile variables? Where we should use?

A volatile variable is one that can change unexpectedly. Consequently, the compiler can make no assumptions about the value of the variable. In particular, the optimizer must be careful to reload the variable every time it is used instead of holding a copy in a register. Examples of volatile variables are:

    Hardware registers in peripherals (for example, status registers)
    Non-automatic variables referenced within an interrupt service routine
    Variables shared by multiple tasks in a multi-threaded applications

4. What does the keyword const mean? What do the following declarations mean?

const int a;
int const a;
const int *a;
int * const a;
int const * a const;

The first two mean the same thing, namely a is a const (read-only) integer.

The third means a is a pointer to a const integer (that is, the integer isn\92t modifiable, but the pointer is).

The fourth declares a to be a const pointer to an integer (that is, the integer pointed to by a is modifiable,but the pointer is not).

The final declaration declares a to be a const pointer to a const integer
(that is, neither the integer pointed to by a, nor the pointer itself may be modified).

5. Can a parameter be both const and volatile ? Explain.

Yes. An example is a read-only status register. It is volatile because it can change unexpectedly. It is const because the program should not attempt to modify it

6. Can a pointer be volatile ? Explain.

   Yes, although this is not very common. An example is when an interrupt service routine modifies a pointer to a buffer

7. What\92s wrong with the following function?

int square(volatile int *ptr)
{
return *ptr * *ptr;

}

This one is wicked. The intent of the code is to return the square of the value pointed to by *ptr . However, since *ptr points to a volatile parameter, the compiler will generate code that looks something like this:

int square(volatile int *ptr)
{
int a,b;
a = *ptr;
b = *ptr;
return a * b;
}

}
Because it\92s possible for the value of *ptr to change unexpectedly, it is possible for a and b to be different. Consequently, this code could return a number that is not a square! The correct way to code this is:

long square(volatile int *ptr)
{
int a;
a = *ptr;
return a * a;
}

8. Data Declarations

a) int a; // An integer
b) int *a; // A pointer to an integer
c) int **a; // A pointer to a pointer to an integer
d) int a[10]; // An array of 10 integers
e) int *a[10]; // An array of 10 pointers to integers
f) int (*a)[10]; // A pointer to an array of 10 integers
g) int (*a)(int); // A pointer to a function a that takes an integer argument and
returns an integer
h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer
argument and return an integer

10. What are Dangling pointers and Wild Pointers

Dangling Pointer :

Dangling pointers in computer programming are pointers that do not point to a valid object of the appropriate type. Dangling pointers arise when an object is deleted or deallocated, without modifying the value of the pointer, so that the pointer still points to the memory location of the deallocated memory.

Examples of Dangling Pointers

int main()
{
     int *p;
     p = (int *) malloc (sizeof (int));

    free(p);
    *p=10;

}

In the above piece of code we are using *p after we free the memory to it.
Such usage is called dangling pointer usage.

int main()
{
int *p = NULL;
{
int a = 10;
p = &a;
}
/*address of a is out of scope and pointer p is now called the dangling pointer, we should initialize the p to NULL before coming out or initialize the pointer to some known value before using it again*/
\85
}

int* fun1()
{
int a = 10;
return(&a); /*in this line we are returning the pointer of variable \91a\92 which is out scope.*/
}

Wild Pointers:

Wild pointers are created by omitting necessary initialization prior to first use. Thus, strictly speaking, every pointer in programming languages which do not enforce initialization begins as a wild pointer. This most often occurs due to jumping over the initialization, not by omitting it. Most compilers are able to warn about this.

{

int* a;

/* a is wild pointer, it is not initialized and it may have some garbage value*/

}

correct way is

{

int* a = NULL;

}

10. When should unions be used? Why do we need them in Embedded Systems  programming?

Unions are particularly useful in Embedded programming or in situations where direct access to the hardware/memory is needed. Here is a trivial example:

typedef union
{
    struct {
        unsigned char byte1;
        unsigned char byte2;
        unsigned char byte3;
        unsigned char byte4;
    } bytes;
    unsigned int dword;
} HW_Register;
HW_Register reg;

Then you can access the reg as follows:

reg.dword = 0x12345678;
reg.bytes.byte3 = 4;

Endianism and processor architecture are of course important.

Another useful feature is the bit modifier:

typedef union
{
    struct {
        unsigned char b1:1;
        unsigned char b2:1;
        unsigned char b3:1;
        unsigned char b4:1;
        unsigned char reserved:4;
    } bits;
    unsigned char byte;
} HW_RegisterB;
HW_RegisterB reg;

With this code you can access directly a single bit in the register/memory address:

x = reg.bits.b2;

Low level system programming is a reasonable example.

unions are used to breakdown hardware registers into the component bits. So, you can access an 8-bit register into the component bits.

This structure would allow a control register to be accessed as a control_byte or via the individual bits. It would be important to ensure the bits map on to the correct register bits for a given endianness.

typedef union {
    unsigned char control_byte;
    struct {
        unsigned int nibble  : 4;
        unsigned int nmi     : 1;
        unsigned int enabled : 1;
        unsigned int fired   : 1;
        unsigned int control : 1;
    }
} ControlRegister;

11. Why is sizeof(\91a\92) not 1?
Perhaps surprisingly, character constants in C are of type int, so sizeof(\91a\92) is sizeof(int) (though it\92s different in C++).
Result:
In Turbo C output is: 2
In Turbo C++ output is: 1
 

12. why n++ executes faster than n+1? 

The expression n++ requires a single machine instruction such as INR to carry out the increment operation whereas, n+1 requires more instructions to carry out this operation.
13. Volatile explanation revisited !

Another use for volatile is signal handlers. If you have code like this:

quit = 0;
while (!quit)
{
    /* very small loop which is completely visible to the compiler */
}

The compiler is allowed to notice the loop body does not touch the quit variable and convert the loop to a while (true) loop. Even if the quit variable is set on the signal handler for SIGINT andSIGTERM; the compiler has no way to know that.

However, if the quit variable is declared volatile, the compiler is forced to load it every time, because it can be modified elsewhere. This is exactly what you want in this situation.

Courtesy: http://stackoverflow.com/questions/246127/why-is-volatile-needed-in-c
14. Data Alignment & Structure Padding

Data Alignment: Data alignment means putting the data at a memory offset equal to some multiple of the word size, which increases the system\92s performance due to the way the CPU handles memory

Data Structure Padding: To align the data, it may be necessary to insert some meaningless bytes between the end of the last data structure and the start of the next, which is data structure padding

Here is a structure with members of various types, totaling 8 bytes before compilation:

struct MixedData
{
    char Data1;
    short Data2;
    int Data3;
    char Data4;
};

After compilation the data structure will be supplemented with padding bytes to ensure a proper alignment for each of its members:

struct MixedData  /* After compilation in 32-bit x86 machine */
{
    char Data1; /* 1 byte */
    char Padding1[1]; /* 1 byte for the following 'short' to be aligned on a 2 byte boundary 
assuming that the address where structure begins is an even number */
    short Data2; /* 2 bytes */
    int Data3;  /* 4 bytes - largest structure member */
    char Data4; /* 1 byte */
    char Padding2[3]; /* 3 bytes to make total size of the structure 12 bytes */
};

The compiled size of the structure is now 12 bytes. It is important to note that the last member is padded with the number of bytes required so that the total size of the structure should be a multiple of the largest alignment of any structure member (alignment(int) in this case, which = 4 on linux-32bit/gcc)

In this case 3 bytes are added to the last member to pad the structure to the size of a 12 bytes (alignment(int) \D7 3).

struct FinalPad {
  float x;
  char n[1];
};

In this example the total size of the structure sizeof(FinalPad) = 8, not 5 (so that the size is a multiple of 4 (alignment of float)).

struct FinalPadShort {
  short s;
  char n[3];                                                                                
};

In this example the total size of the structure sizeof(FinalPadShort) = 6, not 5 (not 8 either) (so that the size is a multiple of 2 (alignment(short) = 2 on linux-32bit/gcc)).

It is possible to change the alignment of structures to reduce the memory they require (or to conform to an existing format) by reordering structure members or changing the compiler\92s alignment (or \93packing\94) of structure members.

struct MixedData  /* after reordering */
{
    char Data1;
    char Data4;   /* reordered */
    short Data2;
    int Data3;  
};

The compiled size of the structure now matches the pre-compiled size of 8 bytes. Note that Padding1[1] has been replaced (and thus eliminated) by Data4 and Padding2[3] is no longer necessary as the structure is already aligned to the size of a long word.

The alternative method of enforcing the MixedData structure to be aligned to a one byte boundary will cause the pre-processor to discard the pre-determined alignment of the structure members and thus no padding bytes would be inserted.

While there is no standard way of defining the alignment of structure members, some compilers use #pragma directives to specify packing inside source files. Here is an example:

#pragma pack(push)  /* push current alignment to stack */
#pragma pack(1)     /* set alignment to 1 byte boundary */

struct MyPackedData
{
    char Data1;
    long Data2;
    char Data3;
};

#pragma pack(pop)   /* restore original alignment from stack */

This structure would have a compiled size of 6 bytes on a 32-bit system. The above directives are available in compilers from Microsoft, Borland, GNU and many others.

Another example:

struct MyPackedData
{
    char Data1;
    long Data2 __attribute__((packed));
    char Data3;
};

Courtesy: http://en.wikipedia.org/wiki/Data_structure_alignment
http://www.geeksforgeeks.org/structure-member-alignment-padding-and-data-packing/
http://stackoverflow.com/questions/381244/purpose-of-memory-alignment
http://stackoverflow.com/questions/6968468/padding-in-structures-in-c

1.  Write a macro for set and reset, swap.

#define SET_BIT( _X_, _NO_ ) ( 1<<(_X_-1)) | _NO_
#define RESET_BIT( _X_, _NO_ ) ~( ( 1<<(_X_-1) ) ) & _NO_
#define SWAP_BIT( _X_, _NO_ ) ( 1<<(_X_-1)) ^ _NO_

2.  How to find give no is 2 power of n?

if ( ( no & ( no-1 ) ) == 0 )
printf( \93Given number is 2 Power of N\n\94 );
else
printf( \93Given number is not 2 Power of N\n\94 );

3. Swap two numbers without using third variable.
   A = B / A       (now, A will have value val b/ val a and B will have value val b)
   B =  B / A       (now, A will have value val b/ val a and B will have value val a)
   A = A * B       (now, A will have value val b  and B will have value val a)
Above method overflow should be take care
 
   A = A + B;
   B = A \96 B;
   A = A \96 B;
 
   A = A ^ B;
   B = A ^ B;
   A = A ^ B;

4. Program to Reverse Bits \96 16 bits
int main( void )
{
        int a= 0xFF00, i, rev=0;
        for( i = 0; i < 16; ++i )
        {
               if( a & ( 1 << i ) )
               {
                       rev |= ( 0x8000 >> i );
               }
        }
        printf( \93Input is 0x%04x\n\94, a );
        printf( \93Reverse Bit Is 0x%04x\n\94, rev );
        return 0;
}
 
5. Program for String Reverse
 
int main(void)
{
        char    S[] = "Vijay C Programming";
        int     i, j;
 
        for( i=0, j=strlen(S)-1; i<((strlen(S))/2); ++i, --j )
        {
             S[i]  ^= S[j] ^=  S[i]  ^= S[j];
        }
        printf( "Reverse Is : %s\n", S );
 
        return 0;
}

 6. How to find the given number is little endian or big endian?
#include <stdio.h>
int main()
{
unsigned int n = 1;
char *p;
p = (char*)&n;
if (*p == 1)
printf(\93Little Endian\n\94);
else if (*(p + sizeof(int) \96 1) == 1)
printf(\93Big Endian\n\94);
else
printf(\93Surprise output!!!!\n\94);
return 0;
}

7. Program to Nibble and bit swapping
int main( void )
{
  unsigned char a = 40, b=20;
  a = ( a>>4 ) | ( a<<4 );
  b = ( ( b & 0xAA ) >> 1 ) | ( ( b & 0x55 ) << 1 );
  clrscr();
  printf( \93After Nibble Swap %d\n\94, a );
  printf( \93Bit swapping %d\n\94, b );
  getch();
  return 0;
}

8. C program to count the number of set bits in an unsigned integer 

/*
Program to count no. of bits in an unsigned integer
*/
void main( void )
{
unsigned int a = 15;
int count = 0;

while( a )
{
++count;
a = a & ( a \96 1 );
}

clrscr();
printf( \93Count is %d\n\94, count );
getch();
}

9. Program to Reverse a single linked list
Node *Reverse (Node *p)
{
  Node *pr = NULL;
  while (p != NULL)
  {
  Node *tmp = p->next;
  p->next = pr;
  pr = p;
  p = tmp;
  }
  return pr;
}

10. Finding Loop in a single linked list.

(1) If the linked list is read only, take two pointer approach( p1, p2). Both pointing to beginning of linked list. Now increment p1 by 1 and p2 by 2 and compare both. if they are equal there is a cycle. Repeat this untill p2 points to null.
(2) If you have the condition not to modify the node but you can change the links, then reverse the linked list. If you reach the head node then there is a cycle.

11. Finding middle of the single linked list in a single traversal.

Step 1:
Take two pointers P1 and P2, both pointed to the first element.
Step 2:
Increment P1 by 1 and P2 by two.
Step 3:
Whenever P2 reaches to the end, P1 will be at the middle of the list, just return P1->data.

12. quick way to determine endianness of your machine?
#include <stdio.h>
int main()
{
   unsigned int i = 1;
   char *c = (char*)&i;
   if (*c)   
       printf("Little endian");
   else
       printf("Big endian");
   getchar();
   return 0;
}
 
13. 2D Memory Allocation using C
int **p;
int i;int rows = 4,columns = 3;p = (int **)malloc(sizeof(int *)*rows);for(i=0;i<rows;i++)
{
p[i] = (int *)malloc(sizeof(int)*columns);
}

14. How to convert a byte array to word array in C?

const byte input[] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
unsigned long output[sizeof(input) / sizeof(unsigned long)];
memcpy(output, input, sizeof(input));  

Word to byte:

unsigned char bytes[sizeof(int)];
intn = 123;
*(int *)bytes = n;

15.Program for printing UINT32 number as string

static char print_nibble (int nibble)
{
if (nibble <= 9)
{
return ( (char)nibble + \910\92);
}
else
{
return ( (char)nibble + \91A\92 \96 10);
}
}

void PrintUINT32(int hex)
{
char     strng[10];
int i;

for (i=0; i<8; i++)
{
strng[i] = print_nibble( (hex >> (28-(4*i)) ) & 0x0000000FU);
}
strng[8] = 0x00;

printf(\93%s \n\94,strng);
}
16.Byte Swap program

function swap16(val) { return ((val & 0xFF) << 8) | ((val >> 8) & 0xFF); }

function swap32(val) { return ((val & 0xFF) << 24) | ((val & 0xFF00) << 8) | ((val >> 8) & 0xFF00) | ((val >> 24) & 0xFF); }
17. Searching for duplicates in array

Simple algorithm
int yes = 1, i, j;
for (i = 0; i < n; ++i)
{
   for (j = i + 1; j < n; ++j) if (arr[i] == arr[j])
   {
       printf("Found a duplicate of %d\n", arr[i]);
       yes = 0;
       break;
   }
   if (!yes) break;
}
if (yes) printf("No duplicates");

Efficient Algorithim


void rmdup(int *array, int length)
{
    int *current , *end = array + length - 1;

    for ( current = array + 1; array < end; array++, current = array + 1 )
    {
        while ( current <= end )
        {
            if ( *current == *array )
            {
                *current = *end--;
            }
            else
            {
                current++;
            }
        }
    }
}
 

1. What is difference between the Process and the thread ?

Process:

    An executing instance of a program is called a process. Some operating systems use the term \91task\91 to refer to a program that is being executed.
    A process is always stored in the main memory also termed as the primary memory or random access memory.Therefore, a process is termed as an active entity. It disappears if the machine is rebooted.
    Several process may be associated with a same program.
    On a multiprocessor system, multiple processes can be executed in parallel.On a uni-processor system, though true parallelism is not achieved, a process scheduling algorithm is applied and the processor is scheduled to execute each process one at a time yielding an illusion of concurrency.
    Example: Executing multiple instances of the \91Calculator\92 program. Each of the instances are termed as a process.

Thread:

    A thread is a subset of the process.It is termed as a \91lightweight process\92, since it is similar to a real process but executes within the context of a process and shares the same resources allotted to the process by the kernel
    Usually, a process has only one thread of control \96 one set of machine instructions executing at a time.
    A process may also be made up of multiple threads of execution that execute instructions concurrently.
    Multiple threads of control can exploit the true parallelism possible on multiprocessor systems.
    On a uni-processor system, a thread scheduling algorithm is applied and the processor is scheduled to run each thread one at a time.
    All the threads running within a process share the same address space, file descriptor, stack and other process related attributes.
    Since the threads of a process share the same memory, synchronizing the access to the shared data withing the process gains unprecedented importance.

The major difference between threads and processes is:

    Threads share the address space of the process that created it; processes have their own address space.
    Threads have direct access to the data segment of its process; processes have their own copy of the data segment of the parent process.
    Threads can directly communicate with other threads of its process; processes must use interprocess communication to communicate with sibling processes.
    Threads have almost no overhead; processes have considerable overhead.
    New threads are easily created; new processes require duplication of the parent process.
    Threads can exercise considerable control over threads of the same process; processes can only exercise control over child processes.
    Changes to the main thread (cancellation, priority change, etc.) may affect the behavior of the other threads of the process; changes to the parent process does not affect child processes.

2. Why can\92t we use malloc in kernel code ?

You can\92t use libraries in the kernel. None whatsoever.

This means that ANY function you\92re calling in the kernel needs to be defined in the kernel. Linux does not define a malloc, hence you can\92t  use it.There is a memory allocator and a family of memory allocation functions. Read the kernel docs on the memory allocator for more information.

Incidentally, there are a few functions the kernel defines which are in the standard C library as well; this is for convenience.
3. What is the major difference between kmalloc and vmalloc?

kmalloc allocates physically contiguous memory, memory which pages are laid consecutively in physical RAM. vmalloc allocates memory which is contiguous in kernel virtual memory space (that means pages allocated that way are not contiguous in RAM, but the kernel sees them as one block).

kmalloc is the preffered way, as long as you don\92t need very big areas. The trouble is, if you want to do DMA from/to some hardware device, you\92ll need to use kmalloc, and you\92ll probably need bigger chunk. The solution is to allocate memory as soon as possible, before memory gets fragmented.

Main reason for kmalloc being used more than vmalloc in kernel is performance. when big memory chunks are allocated using vmalloc, kernel has to map the physically non-contiguous chunks (pages) into a single contiguous virtual memory region. Since the memory is virtually contiguous and physically non-contiguous, several virtual-to-physical address mappings will have to be added to the page table. And in the worst case, there will be (size of buffer/page size)number of mappings added to the page table.

This also adds pressure on TLB (the cache entries storing recent virtual to physical address mappings) when accessing this buffer. This can lead to thrashing.

You only need to worry about using physically contiguous memory if the buffer will be accessed by a DMA device on a physically addressed bus (like PCI). The trouble is that many system calls have no way to know whether their buffer will eventually be passed to a DMA device: once you pass the buffer to another kernel subsystem, you really cannot know where it is going to go. Even if the kernel does not use the buffer for DMA today, a future development might do so.

vmalloc is often slower than kmalloc, because it may have to remap the buffer space into a virtually contiguous range. kmalloc never remaps, though if not called with GFP_ATOMIC kmalloc can block.

kmalloc is limited in the size of buffer it can provide: 128 KBytes. If you need a really big buffer, you have to use vmalloc or some other mechanism like reserving high memory at boot.
 4. What is mmap?

In computing, mmap is a POSIX-compliant Unix system call that maps files or devices into memory. It is a method of memory-mapped file I/O. It naturally implements demand paging, because initially file contents are not entirely read from disk and do not use physical RAM at all. The actual reads from disk are performed in \93lazy\94 manner, after a specific location is accessed. After the memory is not to be used, it is important to munmap the pointers to it.
5. In the linux kernel, what does the probe() method, that the driver provides, do? How different is it from the driver\92s init function, i.e. why can\92t the probe() functions actions be performed in the driver\92s init function ?

Different device types can have probe() functions. For example, PCI and USB devices both have probe() functions.

Shorter answer, assuming PCI: The driver\92s init function calls pci_register_driver() which gives the kernel a list of devices it is able to service, along with a pointer to the probe() function. The kernel then calls the driver\92s probe() function once for each device.

This probe function starts the per-device initialization: initializing hardware, allocating resources, and registering the device with the kernel as a block or network device or whatever it is.That makes it easier for device drivers, because they never need to search for devices or worry about finding a device that was hot-plugged. The kernel handles that part and notifies the right driver when it has a device for you to handle.
6. What is the difference beteween kernel modules and kernel drivers

A kernel module is a bit of compiled code that can be inserted into the kernel at run-time, such as with insmod or modprobe.

            A driver is a bit of code that runs in the kernel to talk to some hardware device. It \93drives\94 the hardware. Most every bit of hardware in your computer has an associated driver[*]. A large part of a running kernel is driver code; the rest of the code provides generic services like memory management, IPC, scheduling, etc.

A driver may be built statically into the kernel file on disk. (The one in /boot, loaded into RAM at boot time by the boot loader early in the boot process.) A driver may also be built as a kernel module so that it can be dynamically loaded later. (And then maybe unloaded.)

Standard practice is to build drivers as kernel modules where possible, rather than link them statically to the kernel, since that gives more flexibility. There are good reasons not to, however:

    Sometimes a given driver is absolutely necessary to help the system boot up. That doesn\92t happen as often as you might imagine, due to the initrd feature.
    Statically built drivers may be exactly what you want in a system that is statically scoped, such as an embedded system. That is to say, if you know in advance exactly which drivers will always be needed and that this will never change, you have a good reason not to bother with dynamic kernel modules.

Not all kernel modules are drivers. For example, a relatively recent feature in the Linux kernel is that you can load a different process scheduler.

[*] One exception to this broad statement is the CPU chip, which has no \93driver\94 per se. Your computer may also contain hardware for which you have no driver.

Courtesy: http://unix.stackexchange.com/questions/47208/what-is-the-difference-between-kernel-drivers-and-kernel-modules

7. What is Spinlock and what is difference between Mutex and Spinlock?

When you use regular locks (mutexes, critical sections etc), operating system puts your thread in the WAIT state and preempts it by scheduling other threads on the same core. This has a performance penalty if the wait time is really short, because your thread now has to wait for a preemption to receive CPU time again.

Spin locks don\92t cause preemption but wait in a loop (\93spin\94) till the other core releases the lock. This prevents the thread from losing it\92s quantum and continue as soon as the lock gets released. The simple mechanism of spinlocks allow a kernel to utilize it in almost any state.

Courtesy: http://stackoverflow.com/questions/1957398/what-exactly-are-spin-locks

Difference:

In theory, when a thread tries to lock a mutex and it does not succeed, because the mutex is already locked, it will go to sleep, immediately allowing another thread to run. It will continue to sleep until being woken up, which will be the case once the mutex is being unlocked by whatever thread was holding the lock before. When a tread tries to lock a spinlock and it does not succeed, it will continuously re-try locking it, until it finally succeeds; thus it will not allow another thread to take its place (however, the operating system will forcefully switch to another thread, once the CPU runtime quantum of the current thread has been exceeded, of course).

Read more@

Courtesy: http://stackoverflow.com/questions/5869825/when-should-one-use-a-spinlock-instead-of-mutex

What is the purpose of WFI and WFE instructions and the event signals ?

We have 2 instructions for entering low-power standby state where most clocks are gated: WFI and
WFE. 

They differ slightly in their entry and wake-up conditions, with the main difference being that
WFE makes use of the event register, the SEV instruction and EVENTI, EVENTO signals.

WFI is targeted at entering either standby, dormant or shutdown mode, where an interrupt is required to wake-up the processor. 

A usage for WFE is to put it into a spinlock loop. Where a CPU wants to access a shared resource
such as shared memory, we can use a semaphore flag location managed by exclusive load and store
access. If multiple CPUs are trying to access the resource, one will get access and will start to
use the resource while the other CPUs will be stuck in the spinlock loop. To save power, you can
insert the WFE instruction into the loop so the CPUs instead of looping continuously will enter
STANDBTWFE. Then the CPU who has been using the resource should execute SEV instruction after it
has finished using the resource. This will wake up all other CPUs from STANDBYWFE and another CPU
can then access the shared resource. 

The reason for having EVENTI and EVENTO is to export a pulse on EVENTO when an SEV instruction is
executed by any of the CPUs. This signal would connect to EVENTI of a second Cortex-A5 MPCore
cluster and would cause any CPUs in STANDBYWFE state to leave standby. So these signals just
expand the usage of WFE mode across multiple clusters. If you have a single cluster, then you do
not need to use them.

Courtesy: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka15473.html

What is the differance b/w platform driver and device driver or kernel driver ?
http://www.atmel.com/Images/doc32098.pdf


1. What are storage class specifier?

Ans: Please refer this link : http://cinterviewquestionandanswer.blogspot.in/2014/01/storage-class-specifier.html


2. What is static variable?
 Ans :

There are 3 main uses for the static.

1. If you declare within a function: It retains the value between function calls.

2. If it is declared for a function name: By default function is extern..so it will be visible from other files if the function declaration is as static..it is invisible for the outer files.

3. Static for global variables: By default we can use the global variables from outside files If it is static global..that variable is limited to with in the file.

3. What is difference between static and extern?
Ans:
"The static storage class is used to declare an identifier that is a local variable either to a function or a file and that exists and retains its value after control passes from where it was declared. This storage class has a duration that is permanent. A variable declared of this class retains its value from one call of the function to the next. The scope is local. A variable is known only by the function it is declared within or if declared globally in a file, it is known or seen only by the functions within that file. This storage class guarantees that declaration of the variable also initializes the variable to zero or all bits off.
The extern storage class is used to declare a global variable that will be known to the functions in a file and capable of being known to all functions in a program. This storage class has a duration that is permanent. Any variable of this class retains its value until changed by another assignment. The scope is global. A variable can be known or seen by all functions within a program. ."

 4. What is difference between static local and static global variable?
Ans:
Static global  :
Static variable has scope only in the file in which it is declared. it can't be accessed in any other file but its value remains intact if code is running in some other file means lifetime is in complete program .
Static local:
static local variable has scope in that function in which it is declared means it can't be used in other functions in the same file also, means scope is limited to the function in which it is declared while its life time is also through out the program.

5. Can we declare static variable in header file?
Ans:
You can\92t declare a static variable without defining it as well (this is because the storage class modifiers static and extern are mutuallyexclusive). A static variable can be defined in a header file, but this would cause each source file that included the header file to have its own private copy of the variable, which is probably not what was intended.

6. Can we declare main() function as static?
Ans:
No. The C spec actually says somewhere in it  that the main function cannot be static.
The reason for this is that static means "don't let anything outside this source file use this object". The benefit is that it protects against name collisions in C when you go to link (it would be bad bad bad if you had two globals both named "is_initialized" in different files... they'd get silently merged, unless you made them static). It also allows the compiler to perform certain optimizations that it wouldn't be able to otherwise. These two reasons are why static is a nice thing to have.
Since you can't access static functions from outside the file, how would the OS be able to access the main function to start your program? That's why main can't be static.
Some compilers treat "main" specially and might silently ignore you when you declare it static.

7. Draw memory layout of C program?
Ans : 
Refer This link:   http://cinterviewquestionandanswer.blogspot.in/2014/01/memory-layout-of-c-programs.html

8.What is volatile variable means?
volatile has nothing to deal with storage class.
volatile just tells the compiler or force the compiler to "not to do the optimization" for that variable. so compiler would not optimize the code for that variable and reading the value from the specified location, not through interal register which holds the previous value.
So, by declaring variable as volatile.. it gives garrantee that you will get the latest value, which may be alterred by an external event.
your code may be work fine if haven't declare that variable as volatile, but there may be chance of not getting correct value sometimes.. so to avoid that we should declare variable as volatile.
volatile is generally used when dealing with external events, like interrupts of hardware related pins.

Example. reading adc values.

const voltile means you can not modify or alter the value of that variable in code. only external event can change the value.
controller pins are generally defines as volatile. may be by declaring variable as volatile controller will do "read by pin" not "read by latch"... this is my assumtion. may be wrong...
but still there is lots of confusion when to choose variable as volatile..
A variable should be declared volatile whenever its value could change unexpectedly. In practice, only three types of variables could change:
Memory-mapped peripheral registers
Global variables modified by an interrupt service routine
Global variables within a multi-threaded application

9. What does keyword const means?
Ans:
The const qualifier explicitly declares a data object as something that cannot be changed. Its value is set at initialization. You cannot use const data objects in expressions requiring a modifiable lvalue. For example, a const data object cannot appear on the lefthand side of an assignment statement
int const volatile var


10. What do the following declaration means?

const int a;
int const a;
const int *a;
int * const a;
int const * a const;

11. Can we use const keyword with volatile variable?
Ans:
Yes. The const modifier means that this code cannot change the value
of the variable, but that does not mean that the value cannot be
changed by means outside this code. For instance, in the example  the timer structure was accessed through a volatile const pointer. The function itself did not change the value of the timer, so it was declared const. However, the value was changed by hardware on the computer, so it was declared volatile. If a variable is both const and volatile, the two modifiers can appear in either order.

 Pointer String and array question :

1. What are pointers?
Ans:
A pointer is a variable whose value is the address of another variable, i.e., direct address of the memory location. Like any variable or constant, you must declare a pointer before you can use it to store any variable address. The general form of a pointer variable declaration is:

type *var-name;

Here, type is the pointer's base type; it must be a valid C data type and var-name is the name of the pointer variable. The asterisk * you used to declare a pointer is the same asterisk that you use for multiplication. However, in this statement the asterisk is being used to designate a variable as a pointer. Following are the valid pointer declaration:

int    *ip;    /* pointer to an integer */
double *dp;    /* pointer to a double */
float  *fp;    /* pointer to a float */
char   *ch     /* pointer to a character */

The actual data type of the value of all pointers, whether integer, float, character, or otherwise, is the same, a long hexadecimal number that represents a memory address. The only difference between pointers of different data types is the data type of the variable or constant that the pointer points to.

2. What is dangling pointer?
Ans:
A dangling pointer points to memory that has already been freed. The storage is no longer allocated. Trying to access it might cause a Segmentation fault.
Common way to end up with a dangling pointer:

char* func()
{
   char str[10];
   strcpy(str,"Hello!");
   return(str); 
}
//returned pointer points to str which has gone out of scope. 

You are returning an address which was a local variable, which would have gone out of scope by the time control was returned to the calling function. (Undefined behaviour)
Another common dangling pointer example is an access of a memory location via pointer, after free has been explicitly called on that memory.

int *c = malloc(sizeof(int));
free(c);
*c = 3; //writing to freed location!


3. What is NULL pointer?
Ans:
Null pointer is special reserved value of a pointer. A pointer of any type has such a reserved value. Formally, each specific pointer type (int*, char*) has its own dedicated null-pointer value. Conceptually, when a pointer has that null value it is not pointing anywhere.

4. What is void Pointer?
Ans:
Void pointer or generic pointer is a special type of pointer that can be pointed at objects of any data type. A void pointer is declared like a normal pointer, using the void keyword as the pointer\92s type.

Pointers defined using specific data type cannot hold the address of the some other type of variable i.e., it is incorrect in C++ to assign the address of an integer variable to a pointer of type float.

Example:

float *f; //pointer of type float
int i;  //integer variable
f = &i; //compilation error

The above problem can be solved by general purpose pointer called void pointer.

Void pointer can be declared as follows:

void *v // defines a pointer of type void

The pointer defined in this manner do not have any type associated with them and can hold the address of any type of variable.

Example:

void *v;
int *i;
int ivar;
char chvar;
float fvar;
v = &ivar; // valid
v = &chvar; //valid
v = &fvar; // valid
i = &ivar; //valid
i = &chvar; //invalid
i = &fvar; //invalid  

5. What is memory leakage? How can we avoid it?
Ans :
Memory leak occurs when programmers create a memory in heap and forget to delete it.
Memory leaks are particularly serious issues for programs like daemons and servers which by definition never terminate.

/* Function with memory leak */
#include 

void f()
{
   int *ptr = (int *) malloc(sizeof(int));

   /* Do some work */

   return; /* Return without freeing ptr*/
}

To avoid memory leaks, memory allocated on heap should always be freed when no longer needed.

/* Function without memory leak */
#include ;

void f()
{
   int *ptr = (int *) malloc(sizeof(int));

   /* Do some work */

   free(ptr);
   return;
}


6. What is the size of pointer in 32 bit machine?
Ans:
Sizeof  of pointer in 32 bit machine is always 4 bytes.

7. Write a program to find weather machine is 32 bit or 64 bit?
Ans:
int main()
{
    int *p = NULL;
    if(sizeof(p) == 4)
        printf("Machine is 32 bit\n");
    else
        printf("Machine is 64 bit\n");
    return 0;
}

8. What is array?
Ans:
In C programming, one of the frequently arising problem is to handle similar types of data. For example: If the user want to store marks of 100 students. This can be done by creating 100 variable individually but, this process is rather tedious and impracticable. These type of problem can be handled in C programming using arrays.
An array is a sequence of data item of homogeneous value(same type).

9. What is difference between array and pointer?
Ans:
An array is an array and a pointer is a pointer, but in most cases array names are converted to pointers.
Here is an array:
int a[7]
a contains space for seven integers, and you can put a value in one of them with an assignment, like this:
a[3] = 9;
Here is a pointer:
int *p;
p doesn't contain any spaces for integers, but it can point to a space for an integer. We can for example set it to point to one of the places in the array a, such as the first one:
p = &a[0];
What can be confusing is that you can also write this:
p = a;
This does not copy the contents of the array a into the pointer p (whatever that would mean). Instead, the array name a is converted to a pointer to its first element. So that assignment does the same as the previous one.
Now you can use p in a similar way to an array:
p[3] = 17;
The reason that this works is that the array dereferencing operator in C, "[ ]", is defined in terms of pointers. x[y] means: start with the pointer x, step y elements forward after what the pointer points to, and then take whatever is there. Using pointer arithmetic syntax, x[y] can also be written as *(x+y).
For this to work with a normal array, such as our a, the name a in a[3] must first be converted to a pointer (to the first element in a). Then we step 3 elements forward, and take whatever is there. In other words: take the element at position 3 in the array. (Which is the fourth element in the array, since the first one is numbered 0.)
So, in summary, array names in a C program are (in most cases) converted to pointers. One exception is when we use the sizeof operator on an array. If a was converted to a pointer in this contest, sizeof(a) would give the size of a pointer and not of the actual array, which would be rather useless, so in that case a means the array itself.

10. Can we increment the base address of array? Justify your answer.
Ans: 
No, Because once we initialize the array variable, the pointer points base address only & it's fixed  and constant pointer.

11.  What is the output of program.
int a[5] = {1,2,3,4,5};
int *ptr = (int*) (&a +1);
int *ptr = (int*) (a+1); 

Ans: 

you see, for your program above, a and &a will have the same numerical value,and I believe that's where your whole confusion lies.You may wonder that if they are the same,the following should give the next address after a in both cases,going by pointer arithmetic:

(&a+1) and (a+1)

But it's not so!!Base address of an array (a here) and Address of an array are not same! a and &a might be same numerically ,but they are not the same type. a is of type int* while &a is of type int (*)[5],ie , &a is a pointer to (address of ) and array of size 5.But a as you know is the address of the first element of the array.Numerically they are the same as you can see from the illustration using ^ below.
But when you increment these two pointers/addresses, ie as (a+1) and (&a+1), the arithmetic is totally different.While in the first case it "jumps" to the address of the next element in the array, in the latter case it jumps by 5 elements as that's what the size of an array of 5 elements.
 


12. What is output of the program?
int main()
{
            int arr[10];
            int *ptr = arr;
            ptr++;
            arr++;
            return 0;
}

Ans:  
The statement arr++ will give you lvalue error. Because hear you are trying to increment base address of array and by default base address of array is constant pointer(constant value) so,
arr  =  arr+1;
i.e according to rule on LHS of assignment operator there always should be lvalue i.e variable not constant.

13. What is string?
Ans:
The string in C programming language is actually a one-dimensional array of characters which is terminated by a null character '\0'. Thus a null-terminated string contains the characters that comprise the string followed by a null.

14. What is difference between these two,

char ptr[] = "string";
char *ptr = "string";

Ans:

The two declarations are not the same.
First one is the array of character i.e. string and second one is the string literals.
char ptr[] = "string"; declares a char array of size 7 and initializes it with the characters s ,t,r,i,n,g and \0. You are allowed to modify the contents of this array.
char *ptr = "string"; declares ptr as a char pointer and initializes it with address of string literal "string" which is read-only. Modifying a string literal is an undefined behavior. What you saw(seg fault) is one manifestation of the undefined behavior.


15. Write a program to find size of variable without using sizeof operator?
Ans:

#define sizeof(var)     ( (char*)(&var+1) - (char*) (&var))

int main()
{
    int val;
    printf("size of = %d\n", SIZEOF(val));
    return 0;
}

16. Write a program to find sizeof structure without using size of operator?
Ans:

#define SIZEOF(var)     ( (char*)(&var+1) - (char*) (&var))

int main()
{
        struct s {
                int a;
                char b;
                int c;
        };
        struct s obj[1];

    printf("size of = %ld\n", SIZEOF(obj));
    return 0;
}

17. What is the output of following program?

int main()
{
      char str[] = "vishnu";
      printf("%d %d\n",sizeof(str),strlen(str));
}

Ans:
7 6
Here char str[] = " 'v'. 'i' ,'s','h','n',u','\0' ";
so sizeof operator always count null character whereas strlen skip null character.

18. Write a program to implement strlen(), strcpy(),strncpy(), strrev(),strcmp() function"?

Ans:

1. strlen:

int my_strlen(const char * str)
{
    int count;
    while(* str != '\0') {
        count++;
        str++;
    }
    return 0;
}

2. strcpy:

void my_strcpy(char * dest, const char* src)
{
    while(* src != '\0') {
        *dest = *src;
        dest++;
        src++;
    }
    *dest = '\0';
}

3. strrev:

void my_strrev(char *str,size)
{
    int i;
    char temp;
    for(i=0;i<=size/2;i++) {
        temp = str[i];
        str[i] = str[size-i];
        str[size-i] = temp;
    }
}

int main()
{
    char str[10] = "vishnu";
    int len;
    len = strlen(str);
    my_strrev(str,len-1);
    printf("strrev = %s\n",str);
    return 0;
}

4. strcmp :

void my_strcmp(char * dest, const char* src)
{
     while(*str != '\0' && *dest != '\0') {
        str++;
        dest++;
    }
    return (*src - *dest);
}

int main()
{
    char str[10];
    char dest[10];
    int i;
    i = my_strcmp(dest,src);
    if(i == 0 )
        printf("strings are equal\n");
    if(i < 0)
        printf(" string1 is less than string2\n");
    if(i > 0)
        printf("string2 is greter than string1\n");
    return 0;
} 

5. strncpy

void my_strncpy(char * dest, const char* src,int n)
{
    while(*src != '\0' && n != 0) {
        *dest = *src;
        dest++;
        src++;
        n--;
    }
    while(n) {
        *dest = '\0';
        n--;
    }
}

19 . Write a program to implement above function using recursion?

20 . Write a program to check weather  string is palindrome or not?

int main()
{
    char string[25], reverse_string[25] = {'\0'};
    int  i, length = 0, flag = 0;
    fflush(stdin);
    printf("Enter a string \n");
    gets(string);
    for (i = 0; string[i] != '\0'; i++) {
        length++;
    }
   
    for (i = length - 1; i >= 0; i--) {
        reverse_string[length - i - 1] = string[i];
    }
    if(strcmp(string,reverse_string) == 0 )
        printf("%s is palindrome\n");
    else
        printf("%s is not palindrome\n");
    return 0;
}



21 . Write a program to count total number of vowel,consonant present in given string?
Ans:

int main()
{

    char sentence[80];
    int i, vowels = 0, consonants = 0, special = 0;
    printf("Enter a sentence \n");
    gets(sentence);
         for (i = 0; sentence[i] != '\0'; i++) {

        if ((sentence[i] == 'a' || sentence[i] == 'e' || sentence[i] == 'i' || sentence[i] == 'o' || sentence[i] == 'u') || (sentence[i] == 'A' || sentence[i] == 'E' || sentence[i] == 'I' || sentence[i] == 'O' || sentence[i] == 'U')) {
        vowels = vowels + 1;
        }
        else {
            consonants = consonants + 1;
        }
        if (sentence[i] =='t' ||sentence[i] =='\0' || sentence[i] ==' ') {
            special = special + 1;
        }

    }
    consonants = consonants - special;
      printf("No. of vowels in %s = %d\n", sentence, vowels);
    printf("No. of consonants in %s = %d\n", sentence, consonants);
    return 0;

}

22. Write a function to find whether machine is little endian or big endian.?

Ans:
void is_little_or_big(int n)
    {
        int num = 0x01;
        char * ptr = (char*)num;
        if(*ptr == 1)
            printf("little endian\n");
        else
            printf("big endian\n");
    }
    or
   
    void is_little_or_big()
    {
        enum union {
            int a;
            char c[4];
        };
        enum endian obj;
        obj.i = 1;
        if(obj.c[0] == 1)
            printf("Machine is little endian\n");
        else
            printf("machine is big endian\n");
    }
 

Write a program to find occurrence of particular key in given string?

Write a program to move all 0's to one side and 1's on ther side of array?

Write a program to find largest element in an array?

Write a program to find second largest element from array?


Bit Manipulation  :

1. Write a program to count total number of setbit in 32 bit number?

int countset(int num)
{
           int count = 0;
           while (num) {
                    if( ((num) & 1) == 1)
                           count++;
                     num = num >> 1;
              }
             return count;
}
or
unsigned int countsetbit(int num)
{
           int count = 0;
           while(num != 0) {
                      count ++;
                      num = num & (num-1);
              }
             return count;
}

2. Write a program to set n th bit in 32 bit number?

int setbit(int num, int pos)
{
           num = num | 1 << pos;
}

3. Write a program to count total number of reset bit in 32 bit integer?

 int setbit(int num)
{
           int count = 0;
           while (num) {
                    if( ((num) & 1) == 0)
                           count++;
                     num = num >> 1;
              }
             return count;
}


4. Write a program to reset nth bit in 32 bit number?

int resetbit(int num, int pos)
{
           num = num &  ~(1 << pos);
}


5. Write a program to swap nibble of a 1byte data?


6. Write a program to swap two variable using bitwise operator?

void swap(int a, int b)
{
         a = a ^ b;
         b = a ^  b;
         a = a ^ b;
}

7. Write a program to find number is even or odd?

void evnodd(int num)
{
       if( (num) & (1) )
           printf("odd");
      else
           printf("even");
} 

8. Write a program to find number is power of 2 or not?

void  power(int num)
{
       if( !( (num) & (num-1) ) )
           printf("power of 2");
      else
           printf("num is not power of 2");
} 

9 Write a function to swap even bits with consecutive odd bits in a number.
   e.g. bo swapped with b1,b2 sawpped with b3 and so on.

 Given an unsigned integer, swap all odd bits with even bits. For example, if the given number is 23 (00010111), it should be converted to 43 (00101011). Every even position bit is swapped with adjacent bit on right side (even position bits are highlighted in binary representation of 23), and every odd position bit is swapped with adjacent on left side.
If we take a closer look at the example, we can observe that we basically need to right shift (>>) all even bits (In the above example, even bits of 23 are highlighted) by 1 so that they become odd bits (highlighted in 43), and left shift (<<) all odd bits by 1 so that they become even bits. The following solution is based on this observation. The solution assumes that input number is stored using 32 bits.
Let the input number be x
1) Get all even bits of x by doing bitwise and of x with 0xAAAAAAAA. The number 0xAAAAAAAA is a 32 bit number with all even bits set as 1 and all odd bits as 0.
2) Get all odd bits of x by doing bitwise and of x with 0x55555555. The number 0x55555555 is a 32 bit number with all odd bits set as 1 and all even bits as 0.
3) Right shift all even bits.
4) Left shift all odd bits.
5) Combine new even and odd bits and return.


// C program to swap even and odd bits of a given number
#include
unsigned int swapBits(unsigned int x)
{
    // Get all even bits of x
    unsigned int even_bits = x & 0xAAAAAAAA;
    // Get all odd bits of x
    unsigned int odd_bits  = x & 0\D755555555;
    even_bits >>= 1;  // Right shift even bits
    odd_bits <<= 1;   // Left shift odd bits
    return (even_bits | odd_bits); // Combine even and odd bits
}
// Driver program to test above function
int main()
{
    unsigned int x = 23; // 00010111
    // Output is 43 (00101011)
    printf("%u ", swapBits(x));
    return 0;
}
Output:

 43 

 

10. Write a function to set a particular bit.


unsigned int setbit(unsigned inr num,int pos)
{
 num = num | (1 << pos);
 return num;
}
 

11. Write a function to clear a particular bit.

unsigned int clear(unsigned inr num,int pos)
{
 num = num & ~ (1 << pos);
 return num;
}

12. Write a function to toggle particular bit.

unsigned int togglebit(unsigned inr num,int pos)
{
 num = num ^ (1 << pos);
 return num;
}

13. Write a function to swap even bits with consecutive odd bits in a number.
e.g. b0 swapped with b1, b2 swapped with b3 and so on.

unsigned int swap_bits(unsigned int num)
{
  return (num >> 1 & 0x55555555) | (num << 1 & 0xAAAAAAAA);
}

14. Write a function to swap odd bits in a number.
e.g. b1 swapped with b3, b5 swapped with b7 and so on.

unsigned int swap_odd_bits(unsigned int num)
{

 return (num >> 2 & 0x22222222) |

         (num << 2 & 0x88888888) |

         ( num   & 0x55555555) ; 

}

15. Write a function to swap even bits in a number.
e.g. b0 swapped with b2, b4 swapped with b6 and so on.
unsigned int swap_even_bits(unsigned int num)
{
  return (num >> 2 & 0x11111111) |
         (num << 2 & 0x44444444) |
         ( num   & 0xAAAAAAAA);}
16. Write a function to find out the number of 1s in a number.

unsigned int num_of_ones(unsigned int num)
{
 if( (count_ones(num) & 1) 
  return ODD;
 else
  return EVEN;
}

17. Write a function for finding the first lowest bit set in a number.

unsigned int first_lowest_bit(unsigned num)
{
 int count =0;
 while(num) {
  count ++;
  if( (num) & 1 == 1)
   break;
  num = num >> 1;
 }
 return count;
}

18. Write a function for finding the higest bit set in a number.

unsigned int first_highest_bit(unsigned num)
{
 int count =0;
 while(num) {
  count ++;
  if( (num & (1 << 31) ) == 1)
   break;
  num = num << 31;
 return count;
}

19 Write a function for reversing the bits in a number.

unsigned int reverse_bit(unsigned num)
{
 unsigned int NO_OF_BITS = sizeof(num) * 8;
 unsigned int temp,rev=0;
 for(i=0; i <= NO_OF_BITS -1 ;i++) {
  if(temp) {
   rev |= (1 << ((NO_OF_BITS-1)-i);
 }
 return rev;
}

20. Write a code to extract nth to mth bit, where n
(num >> n) & ~(~ 0 << (m-n+1))

21. write a code for toggling nth to m bits,where n < m

num ^ ((~ 0 << n) & ( ~0 >> (31-m)))



22. Write a code for setting nth to mth bit, where n < m

num | ((~0 << n) & (~0 >>(31-m)))
23. write a code for clearing nth to mth bit, where n  < m

num & ~((~0 << n) & (~0 >> (31-m))) 

 

Link List Question:

 

1. How to check whether linked list is circular or not.

Ans:

  

struct node {

    int data;
    struct node *next;
};
struct node *head = NULL;

void checkcircular(struct node *head)
{
    struct node * slow = head;
    struct node * fast = head;
    while( fast && fast->next) {
        if(slow == fast->next->next) {
            printf("Circular\n');
            break;
        }
        else {           
            slow = slow->next;
            fast = fats->next->next;
        }
    }
}


2. How would you find a loop in a singly linked list?

struct node {
    int data;
    struct node *next;
};

struct node *head = NULL:

void detectloop(struct node * head)
{
    struct node * slow = head;
    struct node * fast = head;
    while(slow && fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            printf("Loop detected\n');
            break;
        }
    }
}

3. Write a C function to print the middle of a given linked list.

struct node {
    int data;
    struct node *next;
};

void findmiddle(struct node *head)
{
    struct node * slow = head;
    struct head * fast = head;
    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = slow->next->next;
    }
    printf(" Middle element is %d\n", slow->data);
}


4. Write a c program to get the intersection point of two singly linked lists.

struct node {
    int data;
    struct node *next;
};

struct node * head = NULL:

int count_node(struct node * head)
{
    int count = 0;
    struct node * current = head;
    while (current != NULL) {
        count ++;
        current = current->next;
    }
    return count;
}

struct get_intersection_mod(int d,struct node * head1, struct node * head2)
{
    struct node current1 = head1;
    struct node current2 = head2;
   
    for(i=0;i        cureent1 = current->next;
    }
    while(cuttent1 != NULL && current2 != NULL) {
        if(current1 == current2) {
            printf(" intersection node =%d\n", current1->data);
            break;
        }
        current1 = current1->next;
        current2 = current2->next;
    }
}

void get_intersecton(struct node * head1, struct node * head2)
{
    struct node *current = head1;
    struct node *current = head2;
    int c1, c2;
    c1 = count_node(current1);
    c2 = count_node(current2);
    if(c1 > c2) {
        d= c1 -c2;
        get_intersection_mod(d,head1,head2);
    }
    else {
        d = c2 -c1;
        get_intersection_mod(d, head1,head2);
    }
}

 Spin Lock In Linux Kernel
Why are spin locks good choices in Linux Kernel Design instead of something more common in userland code, such as semaphore or mutex?
 1. When spinlock is used ?
Ans: In the following situations.

    The thread that holds the lock is not allowed to sleep.
    The thread that is waiting for a lock does not sleep, but spins in a tight loop.

When properly used, spinlock can give higher performance than semaphore. Ex: Intrrrupt handler.
2. What are the rules to use spinlocks?
Ans:
Rule - 1: Any code that holds the spinlock, can not relinquish the processor for any reason except to service interrupts ( sometimes not even then). So code holding spinlock can not sleep.
Reason: suppose your driver holding spinlock goes to sleep. Ex: calls function copy_from_user() or copy_to_user(), or kernel preemption kicks in so higher priority process pushed your code aside. Effectively the process relinquishes the CPU holding spinlock.
Now we do not know when the code will release the lock. If some other thread tries to obtain the same lock, it would spin for very long time. In the worst case it would result in deedlock.
Kernel preemption case is handled by the spinlock code itself. Anytime kernel code holds a spinlock, preemption is disabled on the relevant processor. Even uniprocessor system must disable the preemption in this way.
Rule - 2: Disable interrupts on the local CPU, while the spinlock is held.
Reason: Support your driver take a spinlock that control access to the device and then issues an interrupt. This causes the interrupt handler to run. Now the interrupt handler also needs the lock to access the device. If the interrupt handler runs on the same processor, it will start spinning. The driver code also can not run to release the lock. SO the processor will spin for ever.
Rule - 3: Spinlocks must be held for the minimum time possible.
Reason: Long lock hold times also keeps the current processor from scheduling, meaning a higher priority process may have to wait to get the CPU.
So it impacts kernel latency (time a process may have to wait to be scheduled). Typically spinlocks should be held for the time duration, less than that CPU takes to do a contex switch between threads.
Rule -4: if you have semaphores and spinlocks both to be taken. Then take semaphore first and then spinlock.

 Memory Layout of C Programs
A typical memory representation of C program consists of following sections.


1. Text segment
2. Initialized data segment
3. Uninitialized data segment
4. Stack
5. Heap



A typical memory layout of a running process

1. Text Segment:
A text segment , also known as a code segment or simply as text, is one of the sections of a program in an object file or in memory, which contains executable instructions.
As a memory region, a text segment may be placed below the heap or stack in order to prevent heaps and stack overflows from overwriting it.
Usually, the text segment is sharable so that only a single copy needs to be in memory for frequently executed programs, such as text editors, the C compiler, the shells, and so on. Also, the text segment is often read-only, to prevent a program from 
accidentally modifying its instructions.

2. Initialized Data Segment:
Initialized data segment, usually called simply the Data Segment. A data segment is a portion of virtual address space of a program, which contains the global variables and static variables that are initialized by the programmer.
Note that, data segment is not read-only, since the values of the variables can be altered at run time.
This segment can be further classified into initialized read-only area and initialized read-write area.
For instance the global string defined by char s[] = \93hello world\94 in C and a C statement like int debug=1 outside the main (i.e. global) would be stored in initialized read-write area. And a global C statement like const char* string = \93hello world\94 makes the string literal \93hello world\94 to be stored in initialized read-only area and the character pointer variable string in initialized read-write area.
Ex: static int i = 10 will be stored in data segment and global int i = 10 will also be stored in data segment

3. Uninitialized Data Segment:
Uninitialized data segment, often called the \93bss\94 segment, named after an ancient assembler operator that stood for \93block started by symbol.\94 Data in this segment is initialized by the kernel to arithmetic 0 before the program starts executing
uninitialized data starts at the end of the data segment and contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code.
For instance a variable declared static int i; would be contained in the BSS segment.
For instance a global variable declared int j; would be contained in the BSS segment.

4. Stack:
The stack area traditionally adjoined the heap area and grew the opposite direction; when the stack pointer met the heap pointer, free memory was exhausted. (With modern large address spaces and virtual memory techniques they may be placed almost anywhere, but they still typically grow opposite directions.)
The stack area contains the program stack, a LIFO structure, typically located in the higher parts of memory. On the standard PC x86 computer architecture it grows toward address zero; on some other architectures it grows the opposite direction. A \93stack pointer\94 register tracks the top of the stack; it is adjusted each time a value is \93pushed\94 onto the stack. The set of values pushed for one function call is termed a \93stack frame\94; A stack frame consists at minimum of a return address.
Stack, where automatic variables are stored, along with information that is saved each time a function is called. Each time a function is called, the address of where to return to and certain information about the caller\92s environment, such as some of the machine registers, are saved on the stack. The newly called function then allocates room on the stack for its automatic and temporary variables. This is how recursive functions in C can work. Each time a recursive function calls itself, a new stack frame is used, so one set of variables doesn\92t interfere with the variables from another instance of the function.

5. Heap:
Heap is the segment where dynamic memory allocation usually takes place.
The heap area begins at the end of the BSS segment and grows to larger addresses from there.The Heap area is managed by malloc, realloc, and free, which may use the brk and sbrk system calls to adjust its size (note that the use of brk/sbrk and a single \93heap area\94 is not required to fulfill the contract of malloc/realloc/free; they may also be implemented using mmap to reserve potentially non-contiguous regions of virtual memory into the process\92 virtual address space). The Heap area is shared by all shared libraries and dynamically loaded modules in a process.
Examples.
The size(1) command reports the sizes (in bytes) of the text, data, and bss segments. ( for more details please refer man page of size(1) )
1. Check the following simple C program
#include
 
int main(void)
{
    return 0;
}

[narendra@CentOS]$ gcc memory-layout.c -o memory-layout
[narendra@CentOS]$ size memory-layout
text       data        bss        dec        hex    filename
960        248          8       1216        4c0    memory-layout

2. Let us add one global variable in program, now check the size of bss (highlighted in red color).
#include
 
int global; /* Uninitialized variable stored in bss*/
 
int main(void)
{
    return 0;
}

[narendra@CentOS]$ gcc memory-layout.c -o memory-layout
[narendra@CentOS]$ size memory-layout
text       data        bss        dec        hex    filename
 960        248         12       1220        4c4    memory-layout

3. Let us add one static variable which is also stored in bss.
#include
 
int global; /* Uninitialized variable stored in bss*/
 
int main(void)
{
    static int i; /* Uninitialized static variable stored in bss */
    return 0;
}

[narendra@CentOS]$ gcc memory-layout.c -o memory-layout
[narendra@CentOS]$ size memory-layout
text       data        bss        dec        hex    filename
 960        248         16       1224        4c8    memory-layout

4. Let us initialize the static variable which will then be stored in Data Segment (DS)
#include
 
int global; /* Uninitialized variable stored in bss*/
 
int main(void)
{
    static int i = 100; /* Initialized static variable stored in DS*/
    return 0;
}

[narendra@CentOS]$ gcc memory-layout.c -o memory-layout
[narendra@CentOS]$ size memory-layout
text       data        bss        dec        hex    filename
960         252         12       1224        4c8    memory-layout

5. Let us initialize the global variable which will then be stored in Data Segment (DS)
#include
 
int global = 10; /* initialized global variable stored in DS*/
 
int main(void)
{
    static int i = 100; /* Initialized static variable stored in DS*/
    return 0;
}

[narendra@CentOS]$ gcc memory-layout.c -o memory-layout
[narendra@CentOS]$ size memory-layout
text       data        bss        dec        hex    filename
960         256          8       1224        4c8    memory-layout

 C String interview Question
1. What will be output when you will execute following c code?
#include
void main(){
char arr[7]="Network";
printf("%s",arr);
}
Explanation:
Size of a character array should one greater than total number of characters in any string which it stores. In c every string has one terminating null character. This represents end of the string.So in the string \93Network\94 , there are 8 characters and they are \91N\92,\92e\92,\92t\92,\92w\92,\92o\92,\92r\92,\92k\92 and \91\0\92. Size of array arr is seven. So array arr will store only first sevent characters and it will note store null character.
As we know %s in prinf statement prints stream of characters until it doesn\92t get first null character. Since array arr has not stored any null character so it will print garbage value.



2.What will be output when you will execute following c code?
#include
void main(){
    char arr[11]="The African Queen";
    printf("%s",arr);
}
Explanation:
Size of any character array cannot be less than the number of characters in any string which it has assigned. Size of an array can be equal (excluding null character) or greater than but never less than.

3.What will be output when you will execute following c code?
#include
void main(){
    int const SIZE=5;
    int expr;
    double value[SIZE]={2.0,4.0,6.0,8.0,10.0};
    expr=1|2|3|4;
    printf("%f",value[expr]);
}
Explanation:
Size of any array in c cannot be constantan variable.

4.What will be output when you will execute following c code?
#include
enum power{
    Dalai,
    Vladimir=3,
    Barack,
    Hillary
};
void main(){
    float leader[Dalai+Hillary]={1.f,2.f,3.f,4.f,5.f};
    enum power p=Barack;
    printf("%0.f",leader[p>>1+1]);
}
Explanation:
Size of an array can be enum constantan.
Value of enum constant Barack will equal to Vladimir + 1 = 3 +1 = 4
So, value of enum variable p  = 4
leader[p >> 1 +1]
= leader[4 >> 1+1]
=leader[4 >> 2]   //+ operator enjoy higher precedence than >> operator.
=leader[1]  //4>>2 = (4 / (2^2) = 4/4 = 1
=2

5.What will be output when you will execute following c code?
#include
#define var 3
void main(){
    char *cricket[var+~0]={"clarke","kallis"};
    char *ptr=cricket[1+~0];
    printf("%c",*++ptr);
}
Explanation:
In the expression of size of an array can have micro constant.
var +~0 = 3 + ~0 = 3 + (-1)  = 2
Let\92s assume string \93clarke\94 and \93kallis\94 has stored at memory address 100 and 500 respectively as shown in the following figure:
For string \93clarke\94:
For string \93kallis\94:
In this program cricket is array of character\92s pointer of size 2. So array cricket will keep the memory address of first character of both strings i.e. content of array cricket is:
cricket[2] = {100,500}
ptr is character pointer which is pointing to the fist element of array cricket. So, ptr = 100
Now consider on *++ptr
Since ptr = 100 so after ++ptr , ptr = 101
*(++ptr) = *(101) = content of memory address 101. From above figure it is clear that character is l.

6.What will be output when you will execute following c code?
#include
void main(){
    char data[2][3][2]={0,1,2,3,4,5,6,7,8,9,10,11};
    printf("%o",data[0][2][1]);
}
Explanation:
%o in printf statement is used to print number in the octal format.

7.What will be output when you will execute following c code?
#include
void main(){
    short num[3][2]={3,6,9,12,15,18};
    printf("%d  %d",*(num+1)[1],**(num+2));
}
Explanation:
*(num+1)[1]=*(*((num+1)+1))=*(*(num+2))=*(num[2])=num[2][0]=15And**(num+2)=*(num[2]+0)=num[2][0]=15

8.What will be output when you will execute following c code?
#include
void main(){
    char *ptr="cquestionbank";
    printf("%d",-3[ptr]);
}
Explanation:
-3[ptr]=-*(3+ptr)=-*(ptr+3)
=-ptr[3]
=-103  //ASCII value of character \91e\92 is 103

9.What will be output when you will execute following c code?
#include
void main(){
    long  myarr[2][4]={0l,1l,2l,3l,4l,5l,6l,7l};
    printf("%ld\t",myarr[1][2]);
    printf("%ld%ld\t",*(myarr[1]+3),3[myarr[1]]);
    printf("%ld%ld%ld\t" ,*(*(myarr+1)+2),*(1[myarr]+2),3[1[myarr]]); 
}
Explanation:
Think yourself.

10.What will be output when you will execute following c code?
#include
void main(){
    int array[2][3]={5,10,15,20,25,30};
    int (*ptr)[2][3]=&array;
    printf("%d\t",***ptr);
    printf("%d\t",***(ptr+1));
    printf("%d\t",**(*ptr+1));
    printf("%d\t",*(*(*ptr+1)+2));
}
Explanation:
ptr is pointer to two dimension array.
***ptr
=***&array  //ptr = &array
=**array //* and & always cancel to each other
=*arr[0]  // *array = *(array +0) = array[0]
=array[0][0]
= 5
Rests think yourself.

11.What will be output when you will execute following c code?
#include
void main(){
    static int a=2,b=4,c=8;
    static int *arr1[2]={&a,&b};
    static int *arr2[2]={&b,&c};
    int* (*arr[2])[2]={&arr1,&arr2};
    printf("%d %d\t",*(*arr[0])[1],  *(*(**(arr+1)+1)));
}
Explanation:
Consider on the following expression:
*(*arr[0])[1]
=*(*&arr1)[1]  //arr[0] = &arr1
=*arr1[1]   //* and & always cancel to each other
=*&b
=b
=4
Consider on following expression:
*(*(**(arr+1)+1))
= *(*(*arr[1]+1))  //*(arr+1) = arr[1]
= *(*(*&arr2+1))  //arr[1] = &arr2
=*(*(arr2+1))  //*&arr2 = arr2
=*(arr2[1])  //*(arr2+1) = arr2[1]
=  *&c    //arr2[1] = &c
=  c
= 8

12.What will be output when you will execute following c code?
#include
#include
double myfun(double);
void main(){
    double(*array[3])(double);
    array[0]=exp;
    array[1]=sqrt;
    array[2]=myfun;
    printf("%.1f\t",(*array)((*array[2])((**(array+1))(4)))); 
}
double myfun(double d){
       d-=1;
       return d;
}
Explanation:
array is array of pointer to such function which parameter is double type data and return type is double.
Consider on following expression:
(*array)((*array[2])((**(array+1))(4)))
= (*array)((*array[2])((*array[1])(4)))
//*(array+1) = array[1]
= (*array)((*array[2])(sqrt(4))))
//array[1] = address of sqrt function
= (*array)((*array[2])(2.000000)))
= (*array)(myfun(2.000000)))
// array[2] = address of myfunc function
=(*array)(1.000000)
=array[0](1.000000)
=exp(1.000000)

13.What will be output when you will execute following c code?
#include
typedef struct{
    char *name;
    double salary;
}job;
void main(){
    static job a={"TCS",15000.0};
    static job b={"IBM",25000.0};
    static job c={"Google",35000.0};
    int x=5;
    job * arr[3]={&a,&b,&c};
    printf("%s  %f\t",(3,x>>5-4)[*arr]);
}
double myfun(double d){
       d-=1;
       return d;
}
Explanation:
(3,5>>5-4)[*arr]
=(3,5>>5-4)[*arr] //x=5
= (3,5>>1)[*arr] //- operator enjoy higher precedence than >>
= (3,2)[*arr]  //5>>1 = 5/(2^1) = 5 /2 = 2
= 2[*arr]  //In c comma is also operator.
= *(2 + *arr)
= *(*arr + 2)
=*arr[2]
=*(&c) //arr[2] = &c
=c   // *  and & always cancel to each other.
So,
printf("%s  %f\t",c);
=> printf("%s  %f\t", "Google",35000.0);

14.What will be output when you will execute following c code?
#include
union group{
    char xarr[2][2];
    char yarr[4];
};
void main(){
    union group x={'A','B','C','D'};
    printf("%c",x.xarr[x.yarr[2]-67][x.yarr[3]-67]);
}
Explanation:
In union all member variables share common memory space.
So union member variable, array xarray will look like:
{
{\91A\92,\92B\92},
{\91C\92,\92D\92}
}
And union member variable, array yarray will look like:
{
{\91A\92,\92B\92,\92C\92,\92D\92}
}
x.xarr[x.yarr[2]-67][x.yarr[3]-67]
= x.xarr[\91C\92-67][\91D\92-67]
= x.xarr[67-67][68-67]
//ASCII value of \91C\92 is 67 and \91D\92 is 68.
x.xarr[0][1]
=\92B\92

15.What will be output when you will execute following c code?
#include
void main(){
    int a=5,b=10,c=15;
    int *arr[3]={&a,&b,&c};
    printf("%d",*arr[*arr[1]-8]);
}
Explanation:
Member of an array cannot be address of auto variable because array gets memory at load time while auto variable gets memory at run time.

16.What will be output when you will execute following c code?
#include
void main(){
    int arr[][3]={{1,2},{3,4,5},{5}};
    printf("%d %d %d",sizeof(arr),arr[0][2],arr[1][2]);
}
Explanation:
If we will not write size of first member of any array at the time of declaration then size of the first dimension is max elements in the initialization of array of that dimension.
So, size of first dimension in above question is 3.
So size of array = (size of int) * (total number of elements) = 2 *(3*3) = 18
Default initial value of rest elements are zero.  So above array will look like:
{
{1,2,0}
{3,4,5},
{5,0,0}
}         

17.What will be output when you will execute following c code?
#include
void main(){
    int xxx[10]={5};
    printf("%d %d",xxx[1],xxx[9]);
}
Explanation:
If we initialize any array at the time of declaration the compiler will treat such array as static variable and its default value of uninitialized member is zero.

18.What will be output when you will execute following c code?
#include
#define WWW -1
enum {cat,rat};
void main(){
    int Dhoni[]={2,'b',0x3,01001,'\x1d','\111',rat,WWW};
    int i;
    for(i=0;i<8 i="" span="">
         printf(" %d",Dhoni[i]);
}
Explanation:
Dhoni[0]=2
Dhoni[1]=\92b\92 =98  //ASCII value of character \91b\92 is 98.
Dhoni[2]=  0x3  =  3  //0x represents hexadecimal number. Decimal value of hexadecimal 3 is also 3.
Dhoni[3]=01001 = 513 //Number begins with 0 represents octal number.
Dhoni[4]  = \91\x1d\92 = 29 //\92\x1d\92 is hexadecimal character constant.
Dhoni[5] = \91\111\92 = 73 //\92\111\92 is octal character constant.
Dhoni[6] =rat = 1  //rat is enum constant
Dhoni[7] = WWW = -1  //WWW is macro constant.


19.What will be output when you will execute following c code?
#include
void main(){
    long double a;
    signed char b;
    int arr[sizeof(!a+b)];
    printf("%d",sizeof(arr));
}
Explanation:
Size of data type in TURBO C 3.0 compiler is:
S.N.
Data type
Size(In byte)
1
char
1
2
int
2
3
double
8
Consider on the expression: !a + b
! Operator always return zero if a is non-zero number other wisie 1. In general we can say ! operator always returns an int type number. So
!a +b
=! (Any double type number) + Any character type number
= Any integer type number + any character type number
= Any integer type number
Note: In any expression lower type data is always automatically type casted into the higher data type. In this case char data type is automatically type casted into the int type data.
So sizeof (!a +b) = sizeof(Any int type number)  = 2
So size of array arr is 2 and its data type is int. So
sizeof(arr) = size of array * sizeof its data type = 2* 2= 4


20.What will be output when you will execute following c code?
#include
void main(){
    char array[]="Ashfaq \0 Kayani";
    char *str="Ashfaq \0 Kayani";
    printf("%s %c\n",array,array[2]);
    printf("%s %c\n",str,str[2]);
    printf("%d %d\n",sizeof(array),sizeof(str));
}
Explanation:
A character array keeps the each element of an assigned array but a character pointer always keeps the memory address of first element. 
As we know %s in prints the characters of stream until it doesn\92t any null character (\91\0\92).  So first and second printf function will print same thing in the above program.  
But size of array is total numbers of its elements i.e. 16 byte (including ending null character). While size of any type of pointer is 2 byte (near pointer).
	
The information about platform drivers is one on LWN. What we can learn from this page:

    Platform devices are inherently not discoverable, i.e. the hardware cannot say "Hey! I'm present!" to the software. Typical examples are i2c devices, kernel/Documentation/i2c/instantiating-devices states:
	Unlike PCI or USB devices, I2C devices are not enumerated at the hardware level (at run time). Instead, the software must know (at compile time) which devices are connected on each I2C bus segment. 
	So USB and PCI are not platform devices.
    Platform devices are bound to drivers by matching names,
    Platform devices should be registered very early during system boot. Because they are often critical to the rest of the system (platform) and its drivers.

So basically, the question "is it a platform device or a standard device?" is more a question of which bus it uses. To work with a particular platform device, you have to:

    register a platform driver that will manage this device. It should define a unique name,
    register your platform device, defining the same name as the driver.

    Are platform drivers for those devices that are on chip ??

Not true (in theory, but true in practice). i2c devices are not onChip, but are platform devices because they are not discoverable. Also we can think of onChip devices which are normal devices. 
Example: an integrated PCI GPU chip on a modern x86 processor. It is discoverable, thus not a platform device.

    Are normal device drivers for those that are interfaced to the processor chip. before coming across one i2c driver ??

Not true. Many normal devices are interfaced to the processor, but not through an i2c bus. Example: a USB mouse

    What's the difference between OS and Linux device drivers?
    What are the differences between High Level Device Driver and Low Level Device Driver?
    What is the difference between hardware abstraction layer and a device driver?
    What is the difference between library and device drivers? Isn't both the same
    What is the difference between a device driver and an API?
    How do I design user-space device drivers in Linux?
    What's the difference between Unix and Linux device drivers?
    What is the difference between device driver and device controllers?
    What are frequently asked questions in Linux device drivers?
    What is the difference between block drivers and network device drivers?
    What is the difference between user-space and kernel-space device drivers in Linux?
    What are device drivers?
    What's the best way to learn device driver development on Linux?
    What is device driver programming?
    How do I develop Device Drivers?
    What's the prerequisite to learn device drivers?
    Which one is better windows device driver or linux device driver programming for career?
    What is the definition of 'device driver'?
    How to design device driver for your own interfacing device ?
    What is the process of writing a device driver?

How do I make an array of complex number in C?
http://c-faq.com/~scs/cgi-bin/faqcat.cgi?sec=ptrs

 Qualcomm Interview Questions

How many interrupt lines you have been used in your driver development.
UART : 1 (RX)
Ethernet: 2 (RX & TX)
I2C : what is I2C Clock Stretch, Bus line clear.

How do u debug when an process aborted.

How many Exceptions are there in ARM.

what are the methods or functions to raise execute the interrupt process when interrupt occurs.


C-Questions
1) Find the size of a structure with out size of operator.

struct  XYZ{
    int x;
    float y;
    char z;
};

int main(){
    struct XYZ arr[2];
    int sz = (char*)&arr[1] - (char*)&arr[0];
    printf("%d",sz);
    return 0;
}


OS
2) what is the output of the below program
    Function(void)
   {
     fork(); fork(); fork();
    printf("Hello world");
   }
ans: Hello world will be printed for 8 times.

L&T Interview Questions:

1) Timer Interrupts and related drivers.
2) How to delete similar nodes from a linked list, not by traversing every node.
3) ARM Internal Architecture.
4) Power Management Techniques - Experience.
5) Explain me any driver you worked on.
6) Interrupt based driver.
7) Advantages and disadvantages of Polling & Interrupt drivers.
8) Android Frame work.
9) What are the different modes in ARM.
10) How a interrupt will be handled  in Linux.
11) What is the difference between IRQ & FIQ.


Work:
1) Touch screen Device drivers.
2) USB Device driver Experience.
3) Power Management Techniques.



Some more questions:
1.how the synchronisation works in single processor system(spinlock_irq_save).
2.how external devices access the physical address.
3.can we access the variable in all the functions below

func1()
func2()
static int a;
func3()
func4()


func1()
func2()
int a;
func3()
func4()

4.why stack is always in higher location.
5. what is the difference between global and static
6. have u debug any issues using jtag/ any other debugger.
if yes, how can we get the call stack in the debugger.

 Strings Interview Q&A - c language
. What is the difference between a string copy (strcpy) and a memory copy (memcpy)? When should each be used?
The strcpy() function is designed to work exclusively with strings. It copies each byte of the source string to the destination string and stops when the terminating null character (\0) has been moved. On the other hand, the memcpy() function is designed to work with any type of data.
Because not all data ends with a null character, you must provide the memcpy() function with the number of bytes you want to copy from the source to the destination. The following program shows examples of both thestrcpy() and the memcpy() functions:

#include <stdio.h>
#include <string.h>
typedef struct cust_str {
     int  id;
     char last_name[20];
     char first_name[15];
} CUSTREC;
void main(void);
void main(void)
{
     char*   src_string = "This is the source string";
     char    dest_string[50];
     CUSTREC src_cust;
     CUSTREC dest_cust;
     printf("Hello!  I'm going to copy src_string into dest_string!\n");
     /* Copy src_string into dest_string. Notice that the destination
        string is the first argument. Notice also that the strcpy()
        function returns a pointer to the destination string. */
     printf("Done! dest_string is: %s\n",
            strcpy(dest_string, src_string));
     printf("Encore! Let's copy one CUSTREC to another.\n");
     printf("I'll copy src_cust into dest_cust.\n");
     /* First, initialize the src_cust data members. */
     src_cust.id = 1;
     strcpy(src_cust.last_name, "Strahan");
     strcpy(src_cust.first_name, "Troy");
     /* Now, use the memcpy() function to copy the src_cust structure to
        the dest_cust structure. Notice that, just as with strcpy(), the
        destination comes first. */
     memcpy(&dest_cust, &src_cust, sizeof(CUSTREC));
     printf("Done! I just copied customer number #%d (%s %s).",
               dest_cust.id, dest_cust.first_name, dest_cust.last_name);
}

When dealing with strings, you generally should use the strcpy() function, because it is easier to use with strings. When dealing with abstract data other than strings (such as structures), you should use the memcpy()function.
2. How can I remove the trailing spaces from a string?
The C language does not provide a standard function that removes trailing spaces from a string. It is easy, however, to build your own function to do just this. The following program uses a custom function namedrtrim() to remove the trailing spaces from a string. It carries out this action by iterating through the string backward, starting at the character before the terminating null character (\0) and ending when it finds the first nonspace character. When the program finds a nonspace character, it sets the next character in the string to the terminating null character (\0), thereby effectively eliminating all the trailing blanks. Here is how this task is performed:

#include <stdio.h>
#include <string.h>
void main(void);
char* rtrim(char*);
void main(void)
{
     char* trail_str = "This string has trailing spaces in it.               ";
     /* Show the status of the string before calling the rtrim()
        function. */
     printf("Before calling rtrim(), trail_str is '%s'\n", trail_str);
     printf("and has a length of %d.\n", strlen(trail_str));
     /* Call the rtrim() function to remove the trailing blanks. */
     rtrim(trail_str);
     /* Show the status of the string
        after calling the rtrim() function. */
     printf("After calling rtrim(), trail_str is '%s'\n", trail_str);
     printf("and has a length of %d.\n", strlen(trail_str));
}
/* The rtrim() function removes trailing spaces from a string. */
char* rtrim(char* str)
{
int n = strlen(str) - 1;     /* Start at the character BEFORE
                                     the null character (\0). */
     while (n>0)            /* Make sure we don't go out of bounds... */
     {
          if (*(str+n) != ' ')    /*  If we find a nonspace character: */
          {
               *(str+n+1) = '\0'; /* Put the null character at one
                                     character past our current
                                     position. */
               break;             /* Break out of the loop. */
          }
          else      /* Otherwise, keep moving backward in the string. */
               n--;
     }
     return str;                  /* Return a pointer to the string. */
}

Notice that the rtrim() function works because in C, strings are terminated by the null character. With the insertion of a null character after the last nonspace character, the string is considered terminated at that point, and all characters beyond the null character are ignored.


--------------------------------------------------------------
3. How can I remove the leading spaces from a string?
The C language does not provide a standard function that removes leading spaces from a string. It is easy, however, to build your own function to do just this. you can easily construct a custom function that uses thertrim() function in conjunction with the standard C library function strrev() to remove the leading spaces from a string. Look at how this task is performed:

#include <stdio.h>
#include <string.h>
void main(void);
char* ltrim(char*);
char* rtrim(char*);
void main(void)
{
     char* lead_str = "          This string has leading spaces in it.";
     /* Show the status of the string before calling the ltrim()
        function. */
     printf("Before calling ltrim(), lead_str is '%s'\n", lead_str);
     printf("and has a length of %d.\n", strlen(lead_str));
     /* Call the ltrim() function to remove the leading blanks. */
     ltrim(lead_str);
     /* Show the status of the string
        after calling the ltrim() function. */
     printf("After calling ltrim(), lead_str is '%s'\n", lead_str);
     printf("and has a length of %d.\n", strlen(lead_str));
}
/* The ltrim() function removes leading spaces from a string. */
char* ltrim(char* str)
{
     strrev(str);    /* Call strrev() to reverse the string. */
     rtrim(str);     /* Call rtrim() to remove the "trailing" spaces. */
     strrev(str);    /* Restore the string's original order. */
     return str;     /* Return a pointer to the string. */
}
/* The rtrim() function removes trailing spaces from a string. */
char* rtrim(char* str)
{
     int n = strlen(str) - 1;     /* Start at the character BEFORE
                                     the null character (\0). */
     while (n>0)            /* Make sure we don't go out of bounds... */
     {
          if (*(str+n) != ' ')    /* If we find a nonspace character: */
          {
               *(str+n+1) = '\0'; /* Put the null character at one
                                     character past our current
                                     position. */
               break;             /* Break out of the loop. */
          }
          else      /* Otherwise, keep moving backward in the string. */
               n--;
     }
     return str;                  /* Return a pointer to the string. */
}

Notice that the ltrim() function performs the following tasks: First, it calls the standard C library functionstrrev(), which reverses the string that is passed to it. This action puts the original string in reverse order, thereby creating "trailing spaces" rather than leading spaces. Now, the rtrim() function is used to remove the "trailing spaces" from the string. After this task is done, the strrev() function is called again to "reverse" the string, thereby putting it back in its original order.
4. How can I right-justify a string?
Even though the C language does not provide a standard function that right-justifies a string, you can easily build your own function to perform this action. Using the rtrim() function, you can create your own function to take a string and right-justify it. Here is how this task is accomplished:

#include <stdio.h>
#include <string.h>
#include <malloc.h>
void main(void);
char* rjust(char*);
char* rtrim(char*);
void main(void)
{
     char* rjust_str = "This string is not right-justified.                  ";
     /* Show the status of the string before calling the rjust()
        function. */
     printf("Before calling rjust(), rjust_str is '%s'\n.", rjust_str);
     /* Call the rjust() function to right-justify this string. */
     rjust(rjust_str);
     /* Show the status of the string
        after calling the rjust() function. */
     printf("After calling rjust(), rjust_str is '%s'\n.", rjust_str);
}
/* The rjust() function right-justifies a string. */
char* rjust(char* str)
{
     int n = strlen(str);   /* Save the original length of the string. */
     char* dup_str;
     dup_str = strdup(str);  /* Make an exact duplicate of the string. */
     rtrim(dup_str);         /* Trim off the trailing spaces. */
     /* Call sprintf() to do a virtual "printf" back into the original
        string. By passing sprintf() the length of the original string,
        we force the output to be the same size as the original, and by
        default the sprintf() right-justifies the output. The sprintf()
        function fills the beginning of the string with spaces to make
        it the same size as the original string. */
     sprintf(str, "%*.*s", n, n, dup_str);
     free(dup_str);    /* Free the memory taken by
                          the duplicated string. */
     return str;       /* Return a pointer to the string. */
}
/* The rtrim() function removes trailing spaces from a string. */
char* rtrim(char* str)
{
     int n = strlen(str) - 1;  /* Start at the character BEFORE the null
                                  character (\0). */
     while (n>0)            /* Make sure we don't go out of bounds... */
     {
          if (*(str+n) != ' ')    /* If we find a nonspace character: */
          {
               *(str+n+1) = '\0'; /* Put the null character at one
                                     character past our current
                                     position. */
               break;             /* Break out of the loop. */
          }
          else      /* Otherwise, keep moving backward in the string. */
               n--;
     }
     return str;                   /* Return a pointer to the string. */
}

The rjust() function first saves the length of the original string in a variable named n. This step is needed because the output string must be the same length as the input string. Next, the rjust() function calls the standard C library function named strdup() to create a duplicate of the original string. A duplicate of the string is required because the original version of the string is going to be overwritten with a right-justified version. After the duplicate string is created, a call to the rtrim() function is invoked (using the duplicate string, not the original), which eliminates all trailing spaces from the duplicate string.
Next, the standard C library function sprintf() is called to rewrite the new string to its original place in memory. The sprintf() function is passed the original length of the string (stored in n), thereby forcing the output string to be the same length as the original. Because sprintf() by default right-justifies string output, the output string is filled with leading spaces to make it the same size as the original string. This has the effect of right-justifying the input string. Finally, because the strdup() function dynamically allocates memory, thefree() function is called to free up the memory taken by the duplicate string.

----------------------------------------------------------
5. How can I pad a string to a known length?
Padding strings to a fixed length can be handy when you are printing fixed-length data such as tables or spreadsheets. You can easily perform this task using the printf() function. The following example program shows how to accomplish this task:

#include <stdio.h>
char *data[25] = {
     "REGION", "--Q1--",    "--Q2--",   "--Q3--", "  --Q4--",
     "North", "10090.50", "12200.10", "26653.12", "62634.32",
     "South", "21662.37", "95843.23", "23788.23", "48279.28",
     "East", "23889.38", "23789.05", "89432.84", "29874.48",
     "West", "85933.82", "74373.23", "78457.23", "28799.84" };
void main(void);
void main(void)
{
     int x;
     for (x=0; x<25; x++)
     {
          if ((x % 5) == 0 && (x != 0))
               printf("\n");
          printf("%-10.10s", data[x]);
     }
}

In this example, a character array (char* data[]) is filled with this year's sales data for four regions. Of course, you would want to print this data in an orderly fashion, not just print one figure after the other with no formatting. This being the case, the following statement is used to print the data:
printf("%-10.10s", data[x]);
The "%-10.10s" argument tells the printf() function that you are printing a string and you want to force it to be 10 characters long. By default, the string is right-justified, but by including the minus sign (-) before the first 10, you tell the printf() function to left-justify your string. This action forces the printf() function to pad the string with spaces to make it 10 characters long. The result is a clean, formatted spreadsheet-like
output:

REGION      --Q1--   --Q2--     --Q3--    --Q4--
North      10090.50  12200.10  26653.12  62634.32
South      21662.37  95843.23  23788.23  48279.28
East       23889.38  23789.05  89432.84  29874.48
West       85933.82  74373.23  78457.23  28799.84

6. How can I copy just a portion of a string?
You can use the standard C library function strncpy() to copy one portion of a string into another string. Thestrncpy() function takes three arguments: the first argument is the destination string, the second argument is the source string, and the third argument is an integer representing the number of characters you want to copy from the source string to the destination string. For example, consider the following program, which uses thestrncpy() function to copy portions of one string to another:

#include <stdio.h>
#include <string.h>
void main(void);
void main(void)
{
     char* source_str = "THIS IS THE SOURCE STRING";
     char dest_str1[40] = {0}, dest_str2[40] = {0};
     /* Use strncpy() to copy only the first 11 characters. */
     strncpy(dest_str1, source_str, 11);
     printf("How about that! dest_str1 is now: '%s'!!!\n", dest_str1);
     /* Now, use strncpy() to copy only the last 13 characters. */
     strncpy(dest_str2, source_str + (strlen(source_str) - 13), 13);
     printf("Whoa! dest_str2 is now: '%s'!!!\n", dest_str2);
}

The first call to strncpy() in this example program copies the first 11 characters of the source string intodest_str1. This example is fairly straightforward, one you might use often. The second call is a bit more complicated and deserves some explanation. In the second argument to the strncpy() function call, the total length of the source_str string is calculated (using the strlen() function). Then, 13 (the number of characters you want to print) is subtracted from the total length of source_str. This gives the number of remaining characters in source_str. This number is then added to the address of source_str to give a pointer to an address in the source string that is 13 characters from the end of source_str.
Then, for the last argument, the number 13 is specified to denote that 13 characters are to be copied out of the string. The combination of these three arguments in the second call to strncpy() sets dest_str2 equal to the last 13 characters of source_str.
The example program prints the following output:

How about that! dest_str1 is now: 'THIS IS THE'!!!
Whoa! dest_str2 is now: 'SOURCE STRING'!!!

Notice that before source_str was copied to dest_str1 and dest_st2, dest_str1 and dest_str2 had to be initialized to null characters (\0). This is because the strncpy() function does not automatically append a null character to the string you are copying to. Therefore, you must ensure that you have put the null character after the string you have copied, or else you might wind up with garbage being printed.


7. How can I convert a number to a string?
The standard C library provides several functions for converting numbers of all formats (integers, longs, floats, and so on) to strings and vice versa. One of these functions, itoa(), is used here to illustrate how an integer is converted to a string:

#include <stdio.h>
#include <stdlib.h>
void main(void);
void main(void)
{
     int num = 100;
     char str[25];
     itoa(num, str, 10);
     printf("The number 'num' is %d and the string 'str' is %s.\n",
                 num, str);
}

Notice that the itoa() function takes three arguments: the first argument is the number you want to convert to the string, the second is the destination string to put the converted number into, and the third is the base, or radix, to be used when converting the number. The preceding example uses the common base 10 to convert the number to the string.
The following functions can be used to convert integers to strings:
Function Name		Purpose
itoa()	-	Converts an integer value to a string.
ltoa()	-	Converts a long integer value to a string.
ultoa()	-	Converts an unsigned long integer value to a string.
Note that the itoa(), ltoa(), and ultoa() functions are not ANSI compatible. An alternative way to convert an integer to a string (that is ANSI compatible) is to use the sprintf() function, as in the following example:

#include <stdio.h>
#include <stdlib.h>
void main(void);
void main(void)
{
     int num = 100;
     char str[25];
     sprintf(str, "%d", num);
     printf("The number 'num' is %d and the string 'str' is %s.\n",
                 num, str);
}

When floating-point numbers are being converted, a different set of functions must be used. Here is an example of a program that uses the standard C library function fcvt() to convert a floating-point value to a string:

#include <stdio.h>
#include <stdlib.h>
void main(void);
void main(void)
{
     double num = 12345.678;
     char* str;
     int dec_pl, sign, ndigits = 3;    /* Keep 3 digits of precision. */
     str = fcvt(num, ndigits, &dec_pl, &sign);  /* Convert the float
                                                           to a string. */
     printf("Original number:  %f\n", num);     /* Print the original
                                                   floating-point
                                                   value. */
     printf("Converted string: %s\n", str);     /* Print the converted
                                                   string's value */
     printf("Decimal place:    %d\n", dec_pl);  /* Print the location of
                                                   the decimal point. */
     printf("Sign:             %d\n", sign);    /* Print the sign.
                                                   0 = positive,
                                                   1 = negative. */
}

Notice that the fcvt() function is quite different from the itoa() function used previously. The fcvt() function takes four arguments. The first argument is the floating-point value you want to convert. The second argument is the number of digits to be stored to the right of the decimal point. The third argument is a pointer to an integer that is used to return the position of the decimal point in the converted string. The fourth argument is a pointer to an integer that is used to return the sign of the converted number (0 is positive, 1 is negative).
Note that the converted string does not contain the actual decimal point. Instead, the fcvt() returns the position of the decimal point as it would have been if it were in the string. In the preceding example, the dec_pl integer variable contains the number 5 because the decimal point is located after the fifth digit in the resulting string. If you wanted the resulting string to include the decimal point, you could use the gcvt() function (described in the following table).
The following functions can be used to convert floating-point values to strings:
Function		Purpose
ecvt()	-	Converts a double-precision floating-point value to a string without an embedded decimal point.
fcvt()	-	Same as ecvt(), but forces the precision to a specified number of digits.
gcvt()	-	Converts a double-precision floating-point value to a string with an embedded decimal point.
8. How can I convert a string to a number?
The standard C library provides several functions for converting strings to numbers of all formats (integers, longs, floats, and so on) and vice versa. One of these functions, atoi(), is used here to illustrate how a string is converted to an integer:

#include <stdio.h>
#include <stdlib.h>
void main(void);
{
     int num;
     char* str = "100";
     num = atoi(str);
     printf("The string 'str' is %s and the number 'num' is %d.\n",
                 str, num);
}

To use the atoi() function, you simply pass it the string containing the number you want to convert. The return value from the atoi() function is the converted integer value.
The following functions can be used to convert strings to numbers:
Function Name		Purpose
atof()	-	Converts a string to a double-precision floating-point value.
atoi()	-	Converts a string to an integer.
atol()	-	Converts a string to a long integer.
strtod()	-	Converts a string to a double-precision floating-point value and reports any "leftover" numbers that could not be converted.
strtol()	-	Converts a string to a long integer and reports any "leftover" numbers that could not be converted.
strtoul()	-	Converts a string to an unsigned long integer and reports any "leftover" numbers that could not be converted.
Sometimes, you might want to trap overflow errors that can occur when converting a string to a number that results in an overflow condition. The following program shows an example of the strtoul() function, which traps this overflow condition:

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
void main(void);
void main(void)
{
     char* str  = "1234567891011121314151617181920";
     unsigned long num;
     char* leftover;
     num = strtoul(str, &leftover, 10);
     printf("Original string:      %s\n", str);
     printf("Converted number:     %lu\n", num);
     printf("Leftover characters:  %s\n", leftover);
}

In this example, the string to be converted is much too large to fit into an unsigned long integer variable. Thestrtoul() function therefore returns ULONG_MAX (4294967295) and sets the char* leftover to point to the character in the string that caused it to overflow. It also sets the global variable errno to ERANGE to notify the caller of the function that an overflow condition has occurred. The strtod() and strtol() functions work exactly the same way as the strtoul() function shown above. Refer to your C compiler documentation for more information regarding the syntax of these functions.


9. How can you tell whether two strings are the same?
The standard C library provides several functions to compare two strings to see whether they are the same. One of these functions, strcmp(), is used here to show how this task is accomplished:

#include <stdio.h>
#include <string.h>
void main(void);
void main(void)
{
     char* str_1 = "abc";
     char* str_2 = "abc";
     char* str_3 = "ABC";
     if (strcmp(str_1, str_2) == 0)
          printf("str_1 is equal to str_2.\n");
     else
          printf("str_1 is not equal to str_2.\n");
     if (strcmp(str_1, str_3) == 0)
          printf("str_1 is equal to str_3.\n");
     else
          printf("str_1 is not equal to str_3.\n");
}

This program produces the following output:
str_1 is equal to str_2.
str_1 is not equal to str_3.
Notice that the strcmp() function is passed two arguments that correspond to the two strings you want to compare. It performs a case-sensitive lexicographic comparison of the two strings and returns one of the following values:
Return Value		Meaning
<0	-	The first string is less than the second string.
0	-	The two strings are equal.
>0	-	The first string is greater than the second string.
In the preceding example code, strcmp() returns 0 when comparing str_1 (which is "abc") and str_2 (which is "abc"). However, when comparing str_1 (which is "abc") with str_3 (which is "ABC"), strcmp() returns a value greater than 0, because the string "ABC" is greater than (in ASCII order) the string "abc".
Many variations of the strcmp() function perform the same basic function (comparing two strings), but with slight differences. The following table lists some of the functions available that are similar to strcmp():
Function Name		Description
strcmp()	-	Case-sensitive comparison of two strings
strcmpi()	-	Case-insensitive comparison of two strings
stricmp()	-	Same as strcmpi()
strncmp()	-	Case-sensitive comparison of a portion of two strings
strnicmp()	-	Case-insensitive comparison of a portion of two strings
Looking at the example provided previously, if you were to replace the call to strcmp() with a call tostrcmpi() (a case-insensitive version of strcmp()), the two strings "abc" and "ABC" would be reported as being equal.
10. How do you print only part of a string?
The following program shows how to print only part of a string using the printf() function:

#include <stdio.h>
#include <string.h>
void main(void);
void main(void)
{
     char* source_str = "THIS IS THE SOURCE STRING";
     /* Use printf() to print the first 11 characters of source_str. */
     printf("First 11 characters: '%11.11s'\n", source_str);
     /* Use printf() to print only the
        last 13 characters of source_str. */
     printf("Last 13 characters: '%13.13s'\n",
                 source_str + (strlen(source_str) - 13));
}

This example program produces the following output:
First 11 characters: 'THIS IS THE'
Last 13 characters: 'SOURCE STRING'
The first call to printf() uses the argument "%11.11s" to force the printf() function to make the output exactly 11 characters long. Because the source string is longer than 11 characters, it is truncated, and only the first 11 characters are printed. The second call to printf() is a bit more tricky. The total length of thesource_str string is calculated (using the strlen() function). Then, 13 (the number of characters you want to print) is subtracted from the total length of source_str.
This gives the number of remaining characters in source_str. This number is then added to the address of source_str to give a pointer to an address in the source string that is 13 characters from the end ofsource_str. By using the argument "%13.13s", the program forces the output to be exactly 13 characters long, and thus the last 13 characters of the string are printed.


Finding a linked list that is either circular or not circular ?
Try using 2 pointers:

2 pointers travelling at different speeds start from the 
head of the linked list
Iterate through a loop
If the faster pointer reaches a NULL pointer then return
saying that the list is acyclic and not circular
If the faster pointer is ever equal to the slower pointer or the
faster pointer's next pointer is ever equal to the slower pointer
then return that the list is circular

Advance the slower pointer one node
Advance the faster pointer by 2 nodes

Tortoise and hare(rabbit) algorithm:
The above pseudo code is called Tortoise and rabbit algorithm

bool findCircular(Node *head)
{
   Node *slower, * faster;
   slower = head;
   faster = head->next; //start faster one node ahead
   while(true) {
   
     // if the faster pointer encounters a NULL element
     if( !faster || !faster->next)
       return false;
    //if faster pointer ever equals slower or faster's next
    //pointer is ever equal to slow then it's a circular list
     else if (faster == slower || faster->next == slower)
        return true;
     else{
       // advance the pointers
        slower = slower->next;
        faster = faster->next->next;
      }
   }
}


Memory-mapped I/O (MMIO) and port mapped I/O ?

Memory-mapped I/O (MMIO) and port I/O (also called port-mapped I/O or PMIO) are two complementary methods of performing input/output between the CPU and I/O devices in a computer. Another method is using dedicated I/O processors (channels, used in IBM mainframe computers).
Memory-mapped I/O uses the same bus to address both memory and I/O devices, and the CPU instructions used to read and write to memory are also used in accessing I/O devices. In order to accommodate the I/O devices, areas of CPU addressable space must be reserved for I/O rather than memory. This does not have to be permanent, for example the Commodore 64 could bank switch between its I/O devices and regular memory. The I/O devices monitor the CPU's address bus and respond to any CPU access of their assigned address space, mapping the address to their hardware registers.
Port-mapped I/O uses a special class of CPU instructions specifically for performing I/O. This is generally found on Intel microprocessors, specifically the IN and OUT instructions which can read and write a single byte to an I/O device. I/O devices have a separate address space from general memory, either accomplished by an extra "I/O" pin on the CPU's physical interface, or an entire bus dedicated to I/O.
Relative merits of the two I/O methods
The main advantage of using port-mapped I/O is on CPUs with a limited addressing capability. Because port-mapped I/O separates I/O access from memory access, the full address space can be used for memory. It is also obvious to a person reading an assembly language program listing when I/O is being performed, due to the special instructions that can only be used for that purpose.
The advantage of using memory mapped I/O is that, by discarding the extra complexity that port I/O brings, a CPU requires less internal logic and is thus cheaper, faster and easier to build; this follows the basic tenets of reduced instruction set computing. As 16-bit CPU architectures have become obsolete and replaced with 32-bit and 64-bit architectures in general use, reserving space on the memory map for I/O devices is no longer a problem. The fact that regular memory instructions are used to address devices also means that all of the CPU's addressing modes are available for the I/O as well as the memory.
Example
Consider a simple system built around an 8-bit microprocessor. Such a CPU might provide 16-bit address lines, allowing it to address up to 64K bytes (65,535 bytes) of memory. On such a system, perhaps the first 32K of address space would be allotted to Random access memory (RAM), a further 16K to Read only memory (ROM) and the remainder to a variety of other devices such as timers, counters, video display chips, sound generating devices, and so forth. The hardware of the system is arranged so that devices on the address bus will only respond to particular addresses which are intended for them; all other addreses are ignored. This is the job of the address decoding circuitry, and it is this that establishes the memory map of the system. Some very simple decoding circuitry might allow a device to respond to several different addresses, effectively creating virtual copies of the device at different places in the memory map. Of course there is only one real device, so there is no particular advantage in doing this, except to simplify the decoder. The decoding itself may be programmable, allowing the system to reconfigure its own memory map as required. This is commonly done.


http://embedded-thoughts.blogspot.in/2013/02/serial-subsystemuart.html

Qualcomm

1. what is your work in your company?
ans:-i work on the device drivers presently I am working on input subsystem.

2. what is your current project?
Ans: I am working on input sub system right now.

3. what you had done in that project ?
Ans:-my role in that project is to know how the kernel and the hardware is able to communicate and what are the devices that comes under the input subsystem and what are the protocols they are using.

4. explain boot sequence of omap?
ans:- explain in detail about the ROM code,X loader,u-boot and kernel.for more details click here http://omappedia.org/wiki/Bootloader_Project

6. What kind of implementations that your company doing?
ans:here we have to describe about the company presently we are working and should have a good idea about the projects it has undertaken and its clients.

2. what is machine dependent and independent code? Example
Ans:-the code that could run on a particular platform is called machine dependent where as if a code is able to run on any platform then the code is said to be machine independent code.

3. why we use volatile?
Ans:-In computer programming, particularly in the C, C++, and C# programming languages, a variable or object declared with the volatile keyword usually has special properties related to optimization and/or threading. Generally speaking, the volatile keyword is intended to prevent the (pseudo)compiler from applying any optimizations on the code that assume values of variables cannot change \93on their own.\94

4. what is Static variable?
Ans:-In computer programming, a static variable is a variable that has been allocated statically whose lifetime or extent extends across the entire run of the program. This is in contrast to the more ephemeral atomic variables (local variables are generally automatic), whose storage is allocated and deallocated on the call stack; and in contrast to objects whose storage is dynamically allocated in heap memory.

5. write a program to print size of integer variable without using sizeof operator ?
6. write a program to find repeated character in a given string? code should be generic?

7. Implement string reverse program without using temporary buffer and strrev function?
//not using any temp variable and assume we can use only string array and length

8. how do you transfer data from userspace to kernel space?
Ans:- with the help of copy_to_user and copy_from_user.

9. What is generic system call that is used to transfer data from user space to kernel space?
Ans:-ioctl is used along with put_user and get_user to transfer the data from user space to kernel space.

10. write a program to copy a string from source to destination without using strcpy?code should be optimised to only three lines?

Best Questions for Embedded Programmers
Interview Questions:
1. What are static variables?
2. What are volatile variables?
3. What do you mean by const keyword ?
4. What is interrupt latency?
5. How you can optimize it?
6. What is size of character, integer, integer pointer, character pointer?
7. What is NULL pointer and what is its use?
8. What is void pointer and what is its use?
9. What is ISR?
10.What is return type of ISR?
11.Can we use any function inside ISR?
12.Can we use printf inside ISR?
13.Can we put breakpoint inside ISR?
14.How to decide whether given processor is using little endian format or big endian format ?
15.What is Top half & bottom half of a kernel?
16.Difference between RISC and CISC processor.
17.What is RTOS?
18.What is the difference between hard real-time and soft real-time OS?
19.What type of scheduling is there in RTOS?
20.What is priority inversion?
21.What is priority inheritance?
22.How many types of IPC mechanism you know?
23.What is semaphore?
24.What is spin lock?
25.What is difference between binary semaphore and mutex?
26.What is virtual memory?
27.What is kernel paging?
28.Can structures be passed to the functions by value?
29.Why cannot arrays be passed by values to functions?
30.Advantages and disadvantages of using macro and inline functions?
31.What happens when recursion functions are declared inline?
32.#define cat(x,y) x##y concatenates x to y. But cat(cat(1,2),3) does not expand but gives
preprocessor warning. Why?
33.Can you have constant volatile variable? Yes, you can have a volatile pointer?
34.++*ip increments what? it increments what ip points to
35.Operations involving unsigned and signed — unsigned will be converted to signed
36.malloc(sizeof(0)) will return — valid pointer
37.main() {fork();fork();fork();printf("hello world"); } — will print 8 times.
38.Array of pts to functions — void (*fptr[10])()
39.Which way of writing infinite loops is more efficient than others? there are 3ways.

40.Who to know whether system uses big endian or little endian format and how to convert
among them?
41.What is forward reference w.r.t. pointers in c?
42.How is generic list manipulation function written which accepts elements of any kind?
43.What is the difference between embedded systems and the system in which RTOS is running?
44.How can you define a structure with bit field members?
45.How do you write a function which takes 2 arguments - a byte and a field in the byte and
returns the value of the field in that byte?
46.Which parameters decide the size of data type for a processor ?
47.What is job of preprocessor, compiler, assembler and linker ?
48.What is the difference between static linking and dynamic linking ?
49.How to implement a WD timer in software ?


Preprocessor
1. Using the #define statement, how would you declare a manifest constant that
returns the number of seconds in a year? Disregard leap years in your answer.
#define SECONDS_PER_YEAR
(60 * 60 * 24 * 365)UL
The purpose of this question is to test the following:
· Basic knowledge of the #define syntax (for example, no semi-colon at the end, the need
to parenthesize, and so on)
· An understanding that the pre-processor will evaluate constant expressions for you. Thus,
it is clearer, and penalty-free, to spell out how you are calculating the number of seconds
in a year, rather than actually doing the calculation yourself
· A realization that the expression will overflow an integer argument on a 16-bit machinehence
the need for the L, telling the compiler to treat the variable as a Long
· As a bonus, if you modified the expression with a UL (indicating unsigned long), then you
are off to a great start. And remember, first impressions count!

2. Write the "standard" MIN macro-that is, a macro that takes two arguments and
returns the smaller of the two arguments.
#define MIN(A,B)
((A)
<
= (B) ? (A) : (B))
The purpose of this question is to test the following:
· Basic knowledge of the #define directive as used in macros. This is important because

until the inline operator becomes part of standard C, macros are the only portable way of
generating inline code. Inline code is often necessary in embedded systems in order to
achieve the required performance level
· Knowledge of the ternary conditional operator. This operator exists in C because it allows
the compiler to produce more optimal code than an if-then-else sequence. Given that
performance is normally an issue in embedded systems, knowledge and use of this
construct is important
· Understanding of the need to very carefully parenthesize arguments to macros
· I also use this question to start a discussion on the side effects of macros, for example,
what happens when you write code such as:
least = MIN(*p++, b);
3. What is the purpose of the preprocessor directive #error?
Either you know the answer to this, or you don't. If you don't, see Reference 1. This question is
useful for differentiating between normal folks and the nerds. Only the nerds actually read the
appendices of C textbooks to find out about such things. Of course, if you aren't looking for a
nerd, the candidate better hope she doesn't know the answer.
Infinite loops
4. Infinite loops often arise in embedded systems. How does you code an infinite loop
in C?
There are several solutions to this question. My preferred solution is:
while(1)
{
}
Many programmers seem to prefer:
for(;;)
{
}
This construct puzzles me because the syntax doesn't exactly spell out what's going on. Thus, if
a candidate gives this as a solution, I'll use it as an opportunity to explore their rationale for
doing so. If their answer is basically, "I was taught to do it this way and I haven't thought about
it since," it tells me something (bad) about them.
A third solution is to use a goto :
Loop:

...
goto Loop;
Candidates who propose this are either assembly language programmers (which is probably
good), or else they are closet BASIC/FORTRAN programmers looking to get into a new field.
Data declarations
5. Using the variable a, give definitions for the following:
a) An integer
b) A pointer to an integer
c) A pointer to a pointer to an integer
d) An array of 10 integers
e) An array of 10 pointers to integers
f) A pointer to an array of 10 integers
g) A pointer to a function that takes an integer as an argument and returns an integer
h) An array of ten pointers to functions that take an integer argument and return an
integer
The answers are:
a) int a; // An integer
b) int *a; // A pointer to an integer
c) int **a; // A pointer to a pointer to an integer
d) int a[10]; // An array of 10 integers
e) int *a[10]; // An array of 10 pointers to integers
f) int (*a)[10]; // A pointer to an array of 10 integers
g) int (*a)(int); // A pointer to a function a that takes an integer argument and
returns an integer
h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer
argument and return an integer
People often claim that a couple of these are the sorts of thing that one looks up in textbooksand
I agree. While writing this article, I consulted textbooks to ensure the syntax was correct.
However, I expect to be asked this question (or something close to it) when I'm being
interviewed. Consequently, I make sure I know the answers, at least for the few hours of the
interview. Candidates who don't know all the answers (or at least most of them) are simply
unprepared for the interview. If they can't be prepared for the interview, what will they be
prepared for?
Static
6. What are the uses of the keyword static?
This simple question is rarely answered completely. Static has three distinct uses in C:
· A variable declared static within the body of a function maintains its value between
function invocations
· A variable declared static within a module, (but outside the body of a function) is
accessible by all functions within that module. It is not accessible by functions within any
other module. That is, it is a localized global

· Functions declared static within a module may only be called by other functions within
that module. That is, the scope of the function is localized to the module within which it is
declared
Most candidates get the first part correct. A reasonable number get the second part correct,
while a pitiful number understand the third answer. This is a serious weakness in a candidate,
since he obviously doesn't understand the importance and benefits of localizing the scope of
both data and code.
Const
7. What does the keyword const mean?
As soon as the interviewee says "const means constant," I know I'm dealing with an amateur.
Dan Saks has exhaustively covered const in the last year, such that every reader of ESP should
be extremely familiar with what const can and cannot do for you. If you haven't been reading
that column, suffice it to say that const means "read-only." Although this answer doesn't really
do the subject justice, I'd accept it as a correct answer. (If you want the detailed answer, read
Saks' columns-carefully!)
If the candidate gets the answer correct, I'll ask him these supplemental questions:
What do the following declarations mean?
const int a;
int const a;
const int *a;
int * const a;
int const * a const;
The first two mean the same thing, namely a is a const (read-only) integer. The third means a is
a pointer to a const integer (that is, the integer isn't modifiable, but the pointer is). The fourth
declares a to be a const pointer to an integer (that is, the integer pointed to by a is modifiable,
but the pointer is not). The final declaration declares a to be a const pointer to a const integer
(that is, neither the integer pointed to by a, nor the pointer itself may be modified). If the
candidate correctly answers these questions, I'll be impressed. Incidentally, you might wonder
why I put so much emphasis on const, since it is easy to write a correctly functioning program
without ever using it. I have several reasons:
· The use of const conveys some very useful information to someone reading your code. In
effect, declaring a parameter const tells the user about its intended usage. If you spend a
lot of time cleaning up the mess left by other people, you'll quickly learn to appreciate
this extra piece of information. (Of course, programmers who use const , rarely leave a
mess for others to clean up.)
· const has the potential for generating tighter code by giving the optimizer some
additional information
· Code that uses const liberally is inherently protected by the compiler against inadvertent
coding constructs that result in parameters being changed that should not be. In short,

they tend to have fewer bugs
Volatile
8. What does the keyword volatile mean? Give three different examples of its use.
A volatile variable is one that can change unexpectedly. Consequently, the compiler can make
no assumptions about the value of the variable. In particular, the optimizer must be careful to
reload the variable every time it is used instead of holding a copy in a register. Examples of
volatile variables are:
· Hardware registers in peripherals (for example, status registers)
· Non-automatic variables referenced within an interrupt service routine
· Variables shared by multiple tasks in a multi-threaded application
Candidates who don't know the answer to this question aren't hired. I consider this the most
fundamental question that distinguishes between a C programmer and an embedded systems
programmer. Embedded folks deal with hardware, interrupts, RTOSes, and the like. All of these
require volatile variables. Failure to understand the concept of volatile will lead to disaster.
On the (dubious) assumption that the interviewee gets this question correct, I like to probe a
little deeper to see if they really understand the full significance of volatile . In particular, I'll ask
them the following additional questions:
· Can a parameter be both const and volatile ? Explain.
· Can a pointer be volatile ? Explain.
· What's wrong with the following function?:
int square(volatile int *ptr)
{
return *ptr * *ptr;
}
The answers are as follows:
· Yes. An example is a read-only status register. It is volatile because it can change
unexpectedly. It is const because the program should not attempt to modify it
· Yes, although this is not very common. An example is when an interrupt service routine
modifies a pointer to a buffer
· This one is wicked. The intent of the code is to return the square of the value pointed to
by *ptr . However, since *ptr points to a volatile parameter, the compiler will generate
code that looks something like this:
int square(volatile int *ptr)
{
int a,b;
a = *ptr;
b = *ptr;
return a * b;

}
Because it's possible for the value of *ptr to change unexpectedly, it is possible for a and b to be
different. Consequently, this code could return a number that is not a square! The correct way to
code this is:
long square(volatile int *ptr)
{
int a;
a = *ptr;
return a * a;
}
Bit manipulation
9. Embedded systems always require the user to manipulate bits in registers or
variables. Given an integer variable a, write two code fragments. The first should set
bit 3 of a. The second should clear bit 3 of a. In both cases, the remaining bits should
be unmodified.
These are the three basic responses to this question:
· No idea. The interviewee cannot have done any embedded systems work
· Use bit fields. Bit fields are right up there with trigraphs as the most brain-dead portion
of C. Bit fields are inherently non-portable across compilers, and as such guarantee that
your code is not reusable. I recently had the misfortune to look at a driver written by
Infineon for one of their more complex communications chips. It used bit fields and was
completely useless because my compiler implemented the bit fields the other way
around. The moral: never let a non-embedded person anywhere near a real piece of
hardware!
· Use #defines and bit masks. This is a highly portable method and is the one that should
be used. My optimal solution to this problem would be:
#define BIT3 (0x1
<
<
3)
static int a;
void set_bit3(void) {
a |= BIT3;
}
void clear_bit3(void) {
a &= ~BIT3;
}

Some people prefer to define a mask together with manifest constants for the set and clear
values. This is also acceptable. The element that I'm looking for is the use of manifest constants,
together with the |= and &= ~ constructs
Accessing fixed memory locations
10. Embedded systems are often characterized by requiring the programmer to access
a specific memory location. On a certain project it is required to set an integer
variable at the absolute address 0x67a9 to the value 0xaa55. The compiler is a pure
ANSI compiler. Write code to accomplish this task.
This problem tests whether you know that it is legal to typecast an integer to a pointer in order
to access an absolute location. The exact syntax varies depending upon one's style. However, I
would typically be looking for something like this:
int *ptr;
ptr = (int *)0x67a9;
*ptr = 0xaa55;
A more obscure approach is:
*(int * const)(0x67a9) = 0xaa55;
Even if your taste runs more to the second solution, I suggest the first solution when you are in
an interview situation.
Interrupts
11. Interrupts are an important part of embedded systems. Consequently, many
compiler vendors offer an extension to standard C to support interrupts. Typically, this
new keyword is __interrupt. The following code uses __interrupt to define an
interrupt service routine (ISR). Comment on the code.
__interrupt double compute_area
(double
radius)
{
double area = PI * radius *
radius;
printf("\nArea = %f", area);
return area;
}
This function has so much wrong with it, it's hard to know where to start:

· ISRs cannot return a value. If you don't understand this, you aren't hired
· ISRs cannot be passed parameters. See the first item for your employment prospects if
you missed this
· On many processors/compilers, floating-point operations are not necessarily re-entrant.
In some cases one needs to stack additional registers. In other cases, one simply cannot
do floating point in an ISR. Furthermore, given that a general rule of thumb is that ISRs
should be short and sweet, one wonders about the wisdom of doing floating-point math
here
· In a vein similar to the third point, printf() often has problems with reentrancy and
performance. If you missed points three and four, I wouldn't be too hard on you.
Needless to say, if you got these last two points, your employment prospects are looking
better and better
Code examples
12. What does the following code output and why?
void foo(void)
{
unsigned int a = 6;
int b = -20;
(a+b > 6) ? puts("> 6") :
puts("
<
= 6");
}
This question tests whether you understand the integer promotion rules in C-an area that I find
is very poorly understood by many developers. Anyway, the answer is that this outputs "> 6."
The reason for this is that expressions involving signed and unsigned types have all operands
promoted to unsigned types. Thus �comes a very large positive integer and the expression
evaluates to greater than 6. This is a very important point in embedded systems where unsigned
data types should be used frequently (see Reference 2). If you get this one wrong, you are
perilously close to not getting the job.
13. Comment on the following code fragment.
unsigned int zero = 0;
unsigned int compzero = 0xFFFF;
/*1's complement of zero */
On machines where an int is not 16 bits, this will be incorrect. It should be coded:
unsigned int compzero = ~0;
This question really gets to whether the candidate understands the importance of word length on

a computer. In my experience, good embedded programmers are critically aware of the
underlying hardware and its limitations, whereas computer programmers tend to dismiss the
hardware as a necessary annoyance.
By this stage, candidates are either completely demoralized-or they're on a roll and having a
good time. If it's obvious that the candidate isn't very good, then the test is terminated at this
point. However, if the candidate is doing well, then I throw in these supplemental questions.
These questions are hard, and I expect that only the very best candidates will do well on them.
In posing these questions, I'm looking more at the way the candidate tackles the problems,
rather than the answers. Anyway, have fun...
Dynamic memory allocation
14. Although not as common as in non-embedded computers, embedded systems do
still dynamically allocate memory from the heap. What are the problems with dynamic
memory allocation in embedded systems?
Here, I expect the user to mention memory fragmentation, problems with garbage collection,
variable execution time, and so on. This topic has been covered extensively in ESP , mainly by
P.J. Plauger. His explanations are far more insightful than anything I could offer here, so go and
read those back issues! Having lulled the candidate into a sense of false security, I then offer up
this tidbit:
What does the following code fragment output and why?
char *ptr;
if ((ptr = (char *)malloc(0)) ==
NULL)
else
puts("Got a null pointer");
puts("Got a valid pointer");
This is a fun question. I stumbled across this only recently when a colleague of mine
inadvertently passed a value of 0 to malloc and got back a valid pointer! That is, the above code
will output "Got a valid pointer." I use this to start a discussion on whether the interviewee
thinks this is the correct thing for the library routine to do. Getting the right answer here is not
nearly as important as the way you approach the problem and the rationale for your decision.
Typedef
15. Typedef is frequently used in C to declare synonyms for pre-existing data types. It
is also possible to use the preprocessor to do something similar. For instance,
consider the following code fragment:
#define dPS struct s *
typedef struct s * tPS;
The intent in both cases is to define dPS and tPS to be pointers to structure s. Which
method, if any, is preferred and why?

This is a very subtle question, and anyone who gets it right (for the right reason) is to be
congratulated or condemned ("get a life" springs to mind). The answer is the typedef is
preferred. Consider the declarations:
dPS p1,p2;
tPS p3,p4;
The first expands to:
struct s * p1, p2;
which defines p1 to be a pointer to the structure and p2 to be an actual structure, which is
probably not what you wanted. The second example correctly defines p3 and p4 to be pointers.
Obscure syntax
16. C allows some appalling constructs. Is this construct legal, and if so what does
this code do?
int a = 5, b = 7, c;
c = a+++b;
This question is intended to be a lighthearted end to the quiz, as, believe it or not, this is
perfectly legal syntax. The question is how does the compiler treat it? Those poor compiler
writers actually debated this issue, and came up with the "maximum munch" rule, which
stipulates that the compiler should bite off as big (and legal) a chunk as it can. Hence, this code
is treated as:
c = a++ + b;
Thus, after this code is executed, a = 6, b = 7, and c = 12.
If you knew the answer, or guessed correctly, well done. If you didn't know the answer then I
wouldn't consider this to be a problem. I find the greatest benefit of this question is that it is
good for stimulating questions on coding styles, the value of code reviews, and the benefits of
using lint.

 RTOS interview questions
1. What is a Real-Time System?
2. Does the RTOS give you a flexible set of scheduling policies?
3. Does the RTOS use the dynamic object’s address as its identifier?
4. Are interrupts handled with a macro/function or do you have to write your own prologue (entry) and epilogue (exit)?
5. How does the RTOS synchronize with events? Do your event synchronization objects automatically clear with a task release or can events be missed? Can multiple tasks wait on a single event? Can a single task wait on multiple events?
6. Does the RTOS allow you to count both periodic or aperiodic ticks?
7. Can the RTOS count ticks other than time?
8. Are Timers/Alarms globally available so that they can be used by multiple tasks or are they tied to a single task? Does the RTOS allow you to define future actions to be taken when any counter reaches a predefined value?
9. Does the RTOS manage RAM with a heap that can create non-deterministic response and fragmentation?
10.Does the RTOS provide multiple data passing options?
11. Does the RTOS allow data to be passed between tasks and ISRs (or just between tasks)?
12. How does the RTOS provide exclusive access to resources? Does it use binary semaphores or mutexes?
13. Does the RTOS have a mechanism to prevent priority inversion—when a low priority task has control of a resource that is required by a higher priority task?
14. How the RTOS is coded. Is it designed for deterministic operation? Does it ensure low system overhead? Low latency? Responsive services?
15. Write a code to connect Hardware interrupt to ISR?
16. What is priority inversion ? and What is the solution ?
17. Explain Priority Inheritance
18. Explain various types of Scheduling
19. Which RTOS supports Non-Preemptive scheduling ? Why other scheduling methods are supported by such OSes?
20. RTOS vs OS21. what is a non re-entrant code?
22. Is unix a multitasking or multiprocessing operating system? whats the difference between the two?
23. What is stack overflow and heap overflow?
24. What is a core dump?
25. Windows also has multiple processes has process priotities switches between multiple process, how RTOS is different from that?
26. what is paging, segmentation Why do we need it?
27. write a code to check wther a stack grows upwards or downwards?

28. Why do we require semaphore mutex?
29. write a small piece of code protecting a shared memory variable with a semaphore?

SOME MORE RTOS QUESTIONS:
1. What is priority inversion ?
2. What are the solutions for priority inversion ?
3. What is priority inheritance ?
4. What is priority ceiling ?
5. What is deadlock ?
6. What is the famous diners problem ?
7. What is mutex ?
8. What is spinlock ?
9. Where are spinlocks used ?
10. What do you mean by atomic operations ?
11. what is a semaphore ?
12. What are the types of semaphore ?
13. What is binary semaphore ?
14. What is a counting semaphore ?
15. What is message queue ?
16. What is the role of a scheduler ? How does it function ?
17. What is the difference between a normal OS and RTOS ?
18. What is preemption ?
19. What is preemptive multi-tasking/time-sharing ? What is its difference with co-operative multi-tasking/time-sharing ?
20. Threads are described as lightweight because switching between threads does not involve changing the memory context – True/False ?
21.What are the factors considered for a RTOS selection ?
22. What is the use of the method of temporarily masking / disabling interrupts ? When is it used ? What should be taken care while doing this method ?
23. Since, disabling/masking of interrupts can be done whent the critical section is ONLY SHORT,What method can be used if the critical section is longer than few source lines or if it involves few lengthy loopings ?
24. Difference between semaphores and disabling/masking of interrupts method ?
25. Binary semaphore is equivalent to Mutex – True/False. How ?
26. How can you avoid deadlocks incase of semaphore based designs ?
27. What is Message passing method ? What is its advantages ?
28. Tell about the design of Interrupt Handler and Scheduler in RTOS ?
29. What is interrupt latency ?
30. Even if we never enables interrupts in the code, the processor automatically disables them often during hardware access – True/False ? In this case how to reduce interrupt latency ?
31. When should we re-enable the interrupts in an ISR and why ?
32. How do you measure the latency of your system ?
33. What are First Level Interrupt handlers and Second level Interrupt handlers ?
34. What could be the typical design/implementation of FLIH and SLIH ?
35. Reentrant interrupt handlers might cause a stack overflow from multiple preemptions by the same interrupt vector – True / False ?
36. What kind of memory allocation procedure is good for embedded systems ?
37. Is there any RTOS that has non-preemptive scheduling ?
38. What is reentrant code ?
39. What is preemptive multitasking ?
40. What does timeslice refer to ?
41. If the time slice is too short then the scheduler will consume too much of processing time – True / False
42. What is I/O bound ? What is CPU bound ?
43. What is non-preemptive multitasking ?
44. CFS uses ‘nanosecond’ granularity accounting, the atomic units by which individual process share the CPU instead of previous notion of ‘timeslice’ – True/False .
45. When will you use binary semaphore ?
46. When will you choose busy-wait instead of context switch ?

47. What are the possible scenarios in which context switching of threads can occur ?
48. Can you use mutex/semaphore inside an ISR ?
49. Explain a scenari that could cause deadlock ? What is the best solution for a deadlock ?
50. Will the performance of your application improve if it has only a single thread and it is running on multiple cores of a processor ?
51. What will happen if there are more threads requesting for CPU resource such as time ?
52. What is Gang Scheduling and how is it useful ?
53. Can you sleep in interrupt handler ?
54. What is the main drawback for not considering Linux as realtime / RTOS ?
55. What is the drawback in using semaphore for synchronization ? How does spinlock help in overcoming it ?
56. What does a semaphore consist of ? and What does a spinlock consist of ?
57. Why spinlocks are useless in uniprocessor systems ?
58. What is timeslice ?
59. What is the difference between multiprogramming and multiprocessing ?
60. What is parallel programming ?
61. What are the types of IPC mechanisms ?
62. What are the types of synchronization problems and what are the resources that can cause such problems ?
63. What is data race ?
64. What is Indefinite Postponement / Indefinite blocking or starvation ?
65. What are the synchronization relationships that are present in a multithreaded or mulitprogramming applications ?
66. How Many Processes or Threads Are Enough for an application ?
67. Tell the advantages and disadvantages of Co-operative multitasking.
67. When should we use mutex and when should we use semaphore ?

 Interview questions on embedded c
1. How C program works?
Ans:
#include<stdio.h>
#define x 1 // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html
main()
{
int i;
i = 0;
i = i + x;
printf(“The value of i is %d n”, i);
Printf(“Hello”); // Run time error (Linking error)
//Think
}
Before compilation, preprocessor comes into picture, and the value of X gets replaced by 1 before actual compilation starts. Then compiler looks for main() and starts compiling, and checks for the syntax format. Then when we run the program the linking comes into picture, compiler links the functions and all called within the file, are really exists in the library or not? If everything is Okay then program runs successfully… Manythigs I have skipped (Where variable gets stored and all) and I briefed some overall idea. Refer
http://www.howstuffworks.com/c.htm
2.What is the output of printf(“%d”)?
Ans:
main()
{
printf(“%d”);
}
Output will be a Garbage.
3. Calloc vs Malloc
Ans:-
There are two differences. First, is in the number of arguments.
Malloc() takes a single argument (memory required in bytes), while calloc() needs two arguments.
Secondly, malloc() does not initialize the memory allocated, while calloc() initializes the allocated memory to ZERO.
calloc() allocates a memory area, the length will be the product of its parameters. calloc fills the memory with ZERO’s and returns a pointer to first byte. If it fails to locate enough space it returns a NULL pointer.
Syntax:
ptr_var=(cast_type *)calloc(no_of_blocks , size_of_each_block);
i.e. ptr_var=(type *)calloc(n,s);
malloc() allocates a single block of memory of REQUSTED SIZE and returns a pointer to first byte. If it fails to locate requsted amount of memory it returns a null pointer.
Syntax:
ptr_var=(cast_type *)malloc(Size_in_bytes);
4. Struct vs union
Think and Try
I just wanted to addmake/add apoint here, In Union:-
union u{
int x;
char y;
}
u.x = 0;
u.y = 1.;
printf(“The value of u.x will be ? “) //Think before you scroll Down or look down
The o/p of x will be garbage.
5. #define vs #include
Try yourself
6. #define vs typedef; Explain
typedefs can correctly encode pointer types.
where as #DEFINES are just replacements done by the preprocessor.
For example,
typedef char *String_t;
#define String_d char *
String_t s1, s2;
String_d s3, s4;
s1, s2, and s3 are all declared as char *, but s4 is declared as a char,
which is probably not the intention.
http://www.oualline.com/style/c06.html
7. #define vs enum; Which one is better? And Why?
Ans: Click the below link for better understnding
http://www.embedded.com/showArticle.jhtml?articleID=9900402
Coming to the question:- Which one is better and why? It depends on the programmer. If there is only few changes needed then #define is the best solution. But if there are lots of changes need to be done then the solution is enum. e.g,
#define x 1 // if tomorrow you are changing the value of x from 1 to 2 then #define is effective
similarly if there are many
#defines like #define X1 1 #define X2 2 . . . #define Xn n In this case we can use enum, to reduce the complexity. enum {X1, X2….Xn};
Now the question is if X10 value changed from 10 to 50 but the rest of the sequence are unchanged then how to tackle? Think !!!
8.Compilation How to reduce a final size of executable?
Ans:
Size of the final execuatable can be reduced using dynamic linking for libraries.
http://wiki.wxwidgets.org/Reducing_Executable_Size
9. What does static variable and function mean?
void func()
{
static int x = 0;
/*Remember the value of un-initialized static variable is always initializes to zero by compiler at run time.*/
// x is initialized only once across three calls of func()
printf(“%d, “, x); // outputs the value of x
x = x + 1;
fun();
}
O/p:- 0,1,2,3,….. Because the scope of static variable is always to that particular function/file(incase of Global declaration). It gets stored in Data Segment The default value of static variable is always Zero, It (Default value or user-defined value) gets initialized at the runtime.And it get initialized only once. In this above example the value of x is initialized to Zero. When next time fun() call happens, the variable x does not get initialized again.
Static Function:- in file 1.c In file 2.c
main()
static void fun();
void fun1();
{ fun();
fun1();
}
void fun{ printf(“It is a static fun”) ;}
void fun1{printf(“It is not a static fun”);}
// Try to compile and see what happens, That (The warning or error) is your answer.
/*undefined reference to `Func’ */
//Ans:: the fun() is local to file 2.c and can’t get accessed by main().
/***** Local Variables are stored in Stack.
Register variables are stored in Register.
Global & static variables are stored in data segment.
The memory created dynamically are stored in Heap And the C program instructions get stored in code segment and the extern variables also stored in data segment. *****/
10. Can a static variable accessed from outside of the file?
Ans: See Qestion number 9.
11. Macro vs inline; Explain each of them; and which one is better why?
12. What are different storage classes? Why register is used?
13. Const vs static vs #define
14. What is the difference between strings and character arrays?
15. Difference between const char* p and char const* p
16. **p vs &*p vs *&p
17.What is hashing?
18. memmove vs memcpy vs memset
19. How free() works?
20. Can a variable be both const and volatile? Explain Volatile
21. Can include files be nested?
22.What is NULL pointer? Why it is required?
23. Is NULL = =0?
24. What is static memory allocation and dynamic memory allocation?
25. How you do dynamic memory allocation?
26. Is realloc() uses the same memory location which was used by malloc()?
27. Describe different types of pointers?
28. How are pointer variables initialized?
29. Difference between arrays and pointers?
30. Is using exit() the same as using return?
31. declaring a variable vs defining a variable
32. lvalue vs rvalue
33. Differentiate between an internal static and external static variable?
34. string vs array?
35. Call by value vs call by reference
36.What are advantages and disadvantages of external storage class?
37.Describe void pointer
38. Typecast when to use and when not to use?
39. Switch vs if; which one is better? Why?
40. Linker vs linkage?
41. Function vs built-in function
42. Why should I prototype a function?
43. Array vs Linked list
44. Write a code for String reverse, strlen, etc
45. Explain C memory
46. Little endian vs big endian? Why it is required? Which one is better? How the conversion happens? White a pseudo code for hton() and ntoh()
47. How can you make sure that 3 rd bit (Say 8-bits given to you) is set or not?
48.How do you set/reset a particular bit?
49. Write the T-table of X-OR
50. What is code optimization?
51. How code optimization does not happen when it comes to VOLATILE? Explain
52. Const to Pointer vs Pointer to Const
53. Difference between Static and Dynamic Library
54. Write a function which takes few arguments and displays the arguments
e.g fun(int arg1, int arg2, int arg3); //May be infinite numbers of arguments
o/p will be value of agr1, arg2, arg3….
Ans:
Use logic of printf()
Refer http://en.wikipedia.org/wiki/Stdarg.h
55.How to write and read data from an address location in C language?Ans: Method -1 Assume it’s 8 bits:
char * address = (char *)3000; // address is a pointer to address 3000 char val;
*address = 36; // write 36 to 8 bit location at address
val = *address; // read 8 bit value from address
Method – 2
char *ptr; //u can take any datatype ptr = 0x0000000a; //”0x0000000a” is hexadecimal adrr. bit
*ptr = ‘a'; //here u put data “i had put a”
same as u can read it by
char d,*ptr; ‘” ” // as it is above ‘” d = *ptr; // u`r value read from ptr is store in d
http://in.answers.yahoo.com/question/index?qid=20091118002501AAYTcjU
56. What is segmentation fault?
57. volatile vs const volatile, Explain

58. How function call happens in C? or How function/function call works internally?

 Questions on processors & architectures
1. What are the two famous architecture of CPU ?
2. What is the difference between Harvard and Von Neuman architecture ?
3. What is the use of instruction cache ?
4. Is it good to have more instruction cache or data cache ?
5. What is the use of data cache ?
6. What is the use of TLB ?
7. What do you mean by Cache Hit or Cache Miss ? What is cache hit rate ?
8. What is the difference between read miss and write miss ?
9. How does cache hit or cache miss determine the selection of processor ?
10. What is cache line or cache block ?
11. What is write-back or copy-back cache ?
12. What is the need for cache coherence protocol ?
13. What are the 3 kinds of cache misses ? or Which of the below causes the most delay and why ? Instruction read miss, Data read miss, and Data write miss .
14. What is boundary alignment and what is the use of it ?
15. What will happen if the data being fetched exceeds the cache line size ? or
if the data is not being aligned at the beginning of cache block ?
16. How can grouping of data can improve the cache based operations from application-side ?
17. What is cache prefetch ?
18. Brief up on pipelined versus Run-to-Completion processor software architecture ?
19. Why multicore processors are preferred to improve performance rather than trying to make a single processor based system faster ?
20. Does memory access speed varies at various stages ? Which is the fastest memory that you can directly deal with from a processor or Which type of memory of a CPU has almost zero percent latency ?
21. What is temporal locality and spatial locality ?
22. What are the applications of temporal locality and spatial locality ? or where are they applied in a CPU architecture ?
23. What is the use of Shadow Registers in ARM architecture ?
24. How will you calculate the idle time off a processor ?
25. How will you identify the endianness of a processor programatically ?
26. What is Memory Overlay ?
27. Tell about Bank Switching ?
28. What are the Disadvantages of Bank Switching ?
29. Why is the size of L1 cache smaller than that of the L2 cache in most of the processors ?
30. When should one use polling method and when should one use interrupt based method ? Are there scenarios in which both can be used ?
31. What could be the better way to determine the exact locations in which the prefetch instruction should be used ?
32. Considering that a processor runs at 100 MHz and the data is coming to the processor from an external device/peripheral at the rate of 1000 Mbit/s (8 Bits/Clockcycle @ 125 MHz), which is the best way to handle traffic that comes at a higher speed to the processor ?
33. Consider that there are 100 plus ways of interrupts occuring from various sensors. There are chances that all can occur at the same time too. How can the software be designed to handle it efficiently ?
34. What is Write-Back Cache ?
35. What is Write-Through Cache ?
36. What is cache coherency ?
37. What is Clock Cycles Per Instruction (CPI) ?
38. What is IPC(Instructions per cycle) ?
39. Tell about the ‘nested interrupt handler’ , ‘reentrant interrupt handler’ and ‘ prioritized direct interrupt handler’ ?
40. What is Memory Banking ? Explain w.r.t 8051 architecture
41. What is Primary Memory and What is Secondary Memory ?
42. What is the advantage of MMU ?
43. How do you determine the direction of stack growth ?
44. What is the debugger that you have used ?
45. Have you used any emulator. If yes, how have you used it ?
46. Can you tell a scenario that was very difficult to solve / fix ?
47. Have you worked on optimization w.r.t memory usage ? What techniques have you followed to optimize ?
47. Have you worked on optimization w.r.t throughput / speed ? What techniques have you followed to optimize ?

48. What kind of co-processors have you used ?

 Questions on ARM processor
1. What are the types of CORTEX-M series ?
2. How do you select a specific CORTEX-M processor ?
3. What is Trustzone System IP block ?
4. What is the use of T604 ? Have you used it ?
5. Have you come across LINARO ? Have you been involved in LINARO ?
6. What is pipeline shutdown ?
7. what are the kinds of protection available for SRAMS ?
How to use the single bit or double bit fault correction ?
8. What is interrupt pipelining ?
9. Explain the architecture of the CORTEX series ARM that you have used .
10. What is the use of the AMBA interface and where is it present in the architecture ?
11. What is branch prediction ?
12. What is out of order execution ? Have you considered it in selection of processor ?
13. If the pipleline is wider , the instruction throughput is high – True/False ?
14. What is the use of Neon Floating point engine ?
15. In what scenarios can neon do better than normal core ?
16. Is power dissipation more in neon compared to normal core ?
17. Incase of multimedia applications, what is the approximate number of times by which the throughput
is increased compared to normal core ?
18. Is Neon available with Cortex M or Cortex A series ?
19. Have you used RVDS ? Have you used gcc arm toolchain ? Which of these two tools is better ?
20. What is the use of –vectorize option ?
21. Have you used Palladium emulator ? Is it JTAG based ?
22. Have you used XDS510 emulator ?
23. What is Coresight System Trace Macrocell(STM) ?
24. What is the difference between ‘intrusive trace’ and ‘non-intrusive trace’ mechanisms ?
25. Which of the following is intrusive – printf, lttng, strace, ftrace, ltrace ?
26. Can you explain the flow from User application and the role of STM driver ?
27. What are the advantages and disadvantages of LTTng ?
28. What is hardware assisted instrumentation ?
29. What is the advantage of hardware assisted instrumentation over software instrumentation ?
30. What is PTM ?
31. What is TPIU ?
32. What is ITM ?
33. What is ETM ?
34. Low latency instrumentation is required for ISR tracing, Bootcode tracing . How is low latency
tracing achieved ?
35. STM cannot trace instructions. It traces only system level calls – True / False.
36. ETM is for data/program instructions & for cache/DMA level instructions – True / False.
37. In Kinetis, can SRAM be configured to act as either NVRAM or EEPROM ? Have you configured or tried it ?
38. How many power modes are there in Kinetis ? Can you tell the wakeup/recovery time for every mode ?
Which mode has the fastest recovery time ? Which mode has the lowest current consumption ?
39. Cortex M4 has Run , Sleep and Deep sleep modes – True / False ?
40. Is 32-pin Cortex M4 compatible with 256 pin Cortex M4 processor ?
41. What is I2S interface ?
42. What are the features of Cortex M4 ?
43. Tell about the Exception Handling in ARM processor. What does the ARM Core do automatically for every exception ?
44. Can you tell about DSP in ARM7TDMI or DSP in STRONGARM or DSP in ARM9E ?
45. Why should you design the DSP algorithm in general ARM architecture so that saturation is not required ?
46. Tell about AIF(Arm Image Format) and AOF(Arm Object Format) ?
47. What are the Memory initialization directives ?
48. What is the use of ‘SWI’ in ARM assembly ?
49. How to Represent a Digital Signal in ARM ?
50. Give Example of STMFD w.r.t Stack Operation push/pop ?
51. Tell about Extended Multiply Instructions in ARM
52. Tell about the NORMAL Multiply Instructions in ARM
53. Tell about ADR’s relation with LDR and the Advantage of using LDR together with ‘=’ ?
54. When does the Processor Stall in ARM and what is the pipeline hazard in ARM?
55. What is called ‘pipeline bubble’ in ARM ?
56. What is Saturating Arithmetic ? Explain
57. Tell the 2 software methods available to remove interlocks following load instructions
58. Tell about ‘Load Scheduling By Preloading’ and ‘Load Scheduling by unrolling’ ?
59. How will you flush the instuction Cache in ARM processor ?
60. List the issues when porting C code to the ARM processor ?
61. What are the advantages of writing in Assembly in ARM processor?
62. Explain this -> “AREA |.text|, CODE, READONLY”
63. What is the use of the ‘EXPORT’ directive ?
64. What is the use of various directives ?
65. How to build using command line tools w.r.t ARM ?
66. Write a simple square.s program in ARM assembly called from a C file ?
67. What will you change that program when calling ARM code from C compiled as Thumb ?
68. How will you allow Thumb C code to call the ARM assembly Code ?
69. What is the use of ‘RN’ directive in ARM assembly ?
70. What imports the libraries like printf automatically in the assembly side of ARM ?
71. What is the DCB directive and its relation with strings ?
72. What is ARMulator ? Where and How have you used it ?
73. How will you handle the Register Shortage problem in ARM ?
74. Relation between CPSR flags, S Suffix Instructions and Comparison Instructions ?
75. What is Conditional Execution in ARM ?
76. What is single issue multiple data (SIMD) processing ?
77. What is a Coprorcessor / CP15 in ARM ?
78. What does the ‘B’ mean in LDRB or What is the difference between LDR and LDRB in ARM ?
79. What is the use of Write-Back ?
80. When should i use ‘!’ in ARM programming and where is it Not Allowed to be used in ARM programming ?
81. Tell about ‘Single Data Transfer’ and ‘Multiple Data Transfer’ in ARM
82. How will you manually Enable / Disable an interrupt in ARM Processor ?
83. Tell about MRS and MSR instructions ?
84. Can you tell a 32-bit branch instruction and the way you used it ?
85. When have you used Thumb instructions in ARM processor ?
86. Write a program to mask bytes in ARM assembly ?
87. ARM7 family of processors does not use any branch prediction scheme. Neither
ARM9 nor ARM9E family implements branch prediction – True / False
88. The ARM11 micro-architecture uses two techniques to predict branches – True / False
89. What is Translation Lookaside Buffer (TLB) ?
90. What are the types of addressing modes in ARM ?
91. Can you brief up the evolution of ARM architecture ?
92. Why ARM7TDMI alone highlights the features that it supports in its naming and why not other ARM architectures ?
93. When will you choose to use ARM and when will you choose to use Thumb instructions ?
94. Can you explain the operation of ARM7 pipeline for simple instructions ?

95. Can you tell about function performed by this instruction – ADD r3, r5, r12 ?


